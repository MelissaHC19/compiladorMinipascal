
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSOLUTE AMPERSANT AND ANY_CHARACTER_EXCEPT_QUOTE ARRAY ASM ASSIGN AT BEGIN BUCKS CASE COLON COMMA CONST CONSTRUCTOR DESTRUCTOR DIGIT DIV DIVIDE DIVIDEEQUAL DO DOT DOWNTO ELSE END EQUAL FILE FOR FORWARD FUNCTION GOTO GREATER GREATEREQUAL HASHTAG ID IF IMPLEMENTATION IN INHERITED INLINE INTERFACE LABEL LBLOCK LBRACKET LESS LESSEQUAL LETTER LPAREN MINUS MINUSEQUAL MOD NIL NOT NOTEQUAL NUMBER OBJECT OF OPERATOR OR PACKED PERCENT PLUS PLUSEQUAL PROCEDURE PROGRAM QUOTE RANGE_OPERATOR RBLOCK RBRACKET RECORD REINTRODUCE REPEAT RPAREN SELF SEMICOLON SET SHL SHR SQUOTE STRING THEN TIMES TIMESEQUAL TO TYPE UNIT UNTIL UPARROW USES VAR WHILE WITH XORprogram : program_heading block DOTprogram_heading : PROGRAM identifier SEMICOLON\n\t\t\t\t\t   | PROGRAM identifier LPAREN identifier_list RPAREN SEMICOLONblock : declaration_part statement_partdeclaration_part : label_declaration_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|  label_declaration_part constant_definition_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|  label_declaration_part type_definition_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|  label_declaration_part variable_declaration_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|  label_declaration_part constant_definition_part type_definition_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|  label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|  label_declaration_part constant_definition_part variable_declaration_part procedure_and_function_declaration_part\t\t\t\t\t\n\t\t\t\t\t\t|  label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|\tconstant_definition_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|\tconstant_definition_part type_definition_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|\tconstant_definition_part variable_declaration_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|\tconstant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|\ttype_definition_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|\ttype_definition_part variable_declaration_part procedure_and_function_declaration_part\n\t\t\t\t\t\t|\tprocedure_and_function_declaration_part\n\tlabel_declaration_part : LABEL label_list SEMICOLONlabel_list : label\n\t\t\t\t| label_list COMMA labelconstant_definition_part : CONST constant_definition_list SEMICOLONconstant_definition_list : constant_definition \n\t\t\t\t\t\t\t| constant_definition_list SEMICOLON constant_definitionconstant_definition : identifier EQUAL constanttype_definition_part : TYPE type_definition_list SEMICOLONtype_definition_list : type_definition\n\t\t\t\t\t\t\t| type_definition_list SEMICOLON type_definitiontype_definition : identifier EQUAL typevariable_declaration_part : VAR variable_declaration_list SEMICOLONvariable_declaration_list : variable_declaration\n\t\t\t\t\t\t\t\t| variable_declaration_list SEMICOLON variable_declarationvariable_declaration : identifier_list COLON typeprocedure_and_function_declaration_part : procedure_declaration SEMICOLON\n\t\t\t\t\t\t\t\t\t\t\t\t| function_declaration SEMICOLON procedure_declaration : procedure_heading SEMICOLON procedure_body\n\t\t\t\t\t\t\t| procedure_heading SEMICOLON directive\n\t\t\t\t\t\t\t| procedure_identification SEMICOLON procedure_body\n\tprocedure_body : blockfunction_declaration : function_heading SEMICOLON function_body\n\t\t\t\t\t\t\t| function_heading SEMICOLON directive\n\t\t\t\t\t\t\t| function_identification SEMICOLON function_body\n\tfunction_body : blockdirective : FORWARDstatement_part : BEGIN statement_sequence ENDprocedure_heading : PROCEDURE identifier\n\t\t\t\t\t\t| PROCEDURE identifier formal_parameter_listfunction_heading : FUNCTION identifier COLON result_type\n\t\t\t\t\t\t| FUNCTION identifier formal_parameter_list COLON result_typeresult_type : type_identifierprocedure_identification : PROCEDURE procedure_identifierfunction_identification : FUNCTION function_identifierformal_parameter_list : LPAREN formal_parameter_section_list RPARENformal_parameter_section_list : formal_parameter_section\n\t\t\t\t\t\t\t\t\t| formal_parameter_section_list SEMICOLON formal_parameter_sectionformal_parameter_section : value_parameter_section\n\t\t\t\t\t\t\t\t| variable_parameter_section\n\t\t\t\t\t\t\t\t| procedure_parameter_section\n\t\t\t\t\t\t\t\t| function_parameter_sectionvalue_parameter_section : identifier_list COLON parameter_typevariable_parameter_section : VAR identifier_list COLON parameter_typeprocedure_parameter_section : procedure_headingfunction_parameter_section : function_headingparameter_type : type_identifier\n\t\t\t\t\t| conformant_array_schemaconformant_array_schema : packed_conformant_array_schema\n\t\t\t\t\t\t\t| unpacked_conformant_array_schemapacked_conformant_array_schema : PACKED ARRAY LBRACKET bound_specification RBRACKET OF type_identifierunpacked_conformant_array_schema : ARRAY LBRACKET bound_specification_list RBRACKET OF type_identifier\n\t\t\t\t\t\t\t\t\t\t| ARRAY LBRACKET bound_specification_list RBRACKET OF conformant_array_schemabound_specification_list : bound_specification\n\t\t\t\t\t\t\t\t| bound_specification_list SEMICOLON bound_specificationbound_specification : identifier RANGE_OPERATOR identifier SEMICOLON ordinal_type_identifierordinal_type_identifier : type_identifierstatement_sequence : statementstatement_sequence : statement SEMICOLON statement\n\tstatement : label COLON simple_statement\n\t\t\t| label COLON structured_statement\n\t\t\t| simple_statement\n\t\t\t| structured_statement\n\tsimple_statement : assignment_statement\n\t\t\t\t\t\t| procedure_statement\n\t\t\t\t\t\t| goto_statement\n\t\t\t\t\t\tassignment_statement : variable ASSIGN expression\n\t\t\t\t\t\t\t| function_identifier ASSIGN expressionprocedure_statement : procedure_identifier \n\t\t\t\t\t\t| procedure_identifier actual_parameter_listgoto_statement : GOTO labelstructured_statement : compound_statement \n\t\t\t\t\t\t\t| repetitive_statement \n\t\t\t\t\t\t\t| conditional_statement \n\t\t\t\t\t\t\t| with_statementcompound_statement : BEGIN statement_sequence ENDrepetitive_statement : while_statement \n\t\t\t\t\t\t| repeat_statement \n\t\t\t\t\t\t| for_statementwhile_statement : WHILE expression DO statementrepeat_statement : REPEAT statement_sequence UNTIL expressionfor_statement : FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement\n\t\t\t\t\t| FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statementinitial_expression : expressionfinal_expression : expressionconditional_statement : if_statement\n\t\t\t\t\t\t\t| case_statementif_statement : IF expression THEN statement\n\t\t\t\t\t| IF expression THEN statement ELSE statementcase_statement : CASE expression OF case_limb_list END\n\t\t\t\t\t| CASE expression OF case_limb_list SEMICOLON ENDcase_limb_list : case_limb\n\t\t\t\t\t| case_limb_list SEMICOLON case_limbcase_limb : case_label_list COLON statementcase_label_list : constant\n\t\t\t\t\t| case_label_list COMMA constantwith_statement : WITH record_variable_list DO statementrecord_variable_list : record_variable\n\t\t\t\t\t\t\t| record_variable_list COMMA record_variableactual_parameter_list : LPAREN actual_parameter_list2 RPARENactual_parameter_list2 : actual_parameter\n\t\t\t\t\t\t\t| actual_parameter_list2 COMMA actual_parameteractual_parameter : actual_value\n\t\t\t\t\t\t| actual_variable\n\t\t\t\t\t\t| actual_procedure\n\t\t\t\t\t\t| actual_functionactual_value : expressionactual_procedure : procedure_identifieractual_function : function_identifierexpression : simple_expression\n\t\t\t\t| simple_expression relational_operator simple_expressionsimple_expression : sign term_list\n\t\t\t\t\t\t| term_list term_list : term\n\t\t\t\t| term_list addition_operator termterm : factor\n\t\t\t| term multiplication_operator factorfactor : variable\n\t\t\t| number\n\t\t\t| string\n\t\t\t| set\n\t\t\t| NIL\n\t\t\t| constant_identifier \n\t\t\t| bound_identifier \n\t\t\t| function_designator \n\t\t\t| LPAREN expression RPAREN \n\t\t\t| NOT factorrelational_operator : EQUAL\n\t\t\t| NOTEQUAL\n\t\t\t| LESS \n\t\t\t| LESSEQUAL\n\t\t\t| GREATER\n\t\t\t| GREATEREQUAL\n\t\t\t| IN addition_operator : PLUS\n\t\t\t| MINUS\n\t\t\t| OR multiplication_operator : TIMES\n\t\t\t| DIVIDE\n\t\t\t| DIV\n\t\t\t| MOD\n\t\t\t| ANDvariable : entire_variable \n\t\t\t| component_variable \n\t\t\t| referenced_variableentire_variable : variable_identifier \n\t\t\t| field_identifier component_variable : indexed_variable \n\t\t\t\t\t\t| field_designator \n\t\t\t\t\t\t| file_buffer indexed_variable : array_variable LBRACKET expression_list RBRACKETfield_designator : record_variable DOT field_identifierset : LBRACKET element_list RBRACKETelement_list : \n\t\t\t\t| expression_listfunction_designator :  function_identifier \n\t\t\t\t\t\t| function_identifier actual_parameter_listfile_buffer : file_variable UPARROWtype : simple_type \n\t\t\t| structured_type \n\t\t\t| pointer_type \n\t\t\t| type_identifier simple_type : subrange_type \n\t\t\t\t| enumerated_typeenumerated_type : LPAREN identifier_list RPARENsubrange_type : lower_bound RANGE_OPERATOR upper_boundlower_bound : constantupper_bound : constantstructured_type : PACKED unpacked_structured_type\n\t\t\t\t\t| unpacked_structured_typeunpacked_structured_type : array_type \n\t\t\t\t\t\t\t| record_type \n\t\t\t\t\t\t\t| set_type \n\t\t\t\t\t\t\t| file_typearray_type : ARRAY LBRACKET index_type_list RBRACKET OF element_typeindex_type_list : index_type\n\t\t\t\t\t| index_type_list COMMA index_type index_type : simple_type element_type : typerecord_type : RECORD field_list ENDset_type : SET OF base_typebase_type : typefile_type : FILE OF file_component_typefile_component_type : typepointer_type : UPARROW type_identifierfield_list : \n\t\t\t\t| fixed_part\n\t\t\t\t| fixed_part SEMICOLON variant_part\n\t\t\t\t| fixed_part SEMICOLON variant_part SEMICOLON\n\t\t\t\t| variant_part\n\t\t\t\t| variant_part SEMICOLONfixed_part : record_section\n\t\t\t\t| fixed_part SEMICOLON record_sectionrecord_section : identifier_list COLON typevariant_part : CASE tag_field type_identifier OF variant_listvariant_list : variant\n\t\t\t\t\t| variant_list SEMICOLON varianttag_field :   \n\t\t\t\t| identifier COLONvariant : case_label_list SEMICOLON LPAREN field_list RPARENoutput_list : output_value \n\t\t\t\t| output_list COMMA output_valueoutput_value : expression\n\t\t\t\t| expression SEMICOLON field_width\n\t\t\t\t| expression SEMICOLON field_width COLON fraction_lengthfield_width : expressionfraction_length : expressionidentifier : IDfile_variable : variablereferenced_variable : pointer_variable UPARROWrecord_variable : variablepointer_variable : variableactual_variable : variablearray_variable : variablefield_identifier : identifierconstant_identifier : identifiervariable_identifier : identifiertype_identifier : identifierprocedure_identifier : identifierfunction_identifier : identifierbound_identifier : identifiervariable_list : variable\n\t\t\t\t\t| variable_list COMMA variableidentifier_list : identifier\n\t\t\t\t\t| identifier_list COMMA identifierexpression_list : expression\n\t\t\t\t\t| expression_list COMMA expressionnumber : integer_number\n\t\t\t  | real_numberinteger_number : digit_sequencereal_number : digit_sequence DOT\n\t\t\t\t  | digit_sequence DOT digit_sequence\n\t\t\t\t  | digit_sequence DOT digit_sequence scale_factor\n\t\t\t\t  | digit_sequence DOT scale_factor\n\t\t\t\t  | digit_sequence scale_factorscale_factor : digit_sequence DOT\n\t\t\t\t  | digit_sequence DOT digit_sequence\n\t\t\t\t  | digit_sequence DOT digit_sequence scale_factor\n\t\t\t\t  | digit_sequence DOT scale_factor\n\t\t\t\t  | digit_sequence scale_factorunsigned_digit_sequence : digit\n\t\t\t\t\t\t\t\t| unsigned_digit_sequence digitdigit_sequence : sign unsigned_digit_sequence\n\t\t\t\t\t\t| unsigned_digit_sequencesign : PLUS\n\t\t\t| MINUSletter : LETTERdigit : NUMBERstring : QUOTE string_character_list QUOTEstring_character_list : string_character\n\t\t\t\t\t\t\t | string_character_list string_characterstring_character : ANY_CHARACTER_EXCEPT_QUOTE\n\t\t\t\t\t\t| SQUOTE SQUOTElabel : integer_numberconstant : sign constant_identifier\n\t\t\t\t| sign number \n\t\t\t\t| constant_identifier \n\t\t\t\t| number \n\t\t\t\t| string'
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,23,],[0,-1,]),'LABEL':([2,54,55,56,57,62,328,],[10,10,10,10,10,-2,-3,]),'CONST':([2,6,54,55,56,57,62,119,328,],[11,11,11,11,11,11,-2,-20,-3,]),'TYPE':([2,6,8,27,54,55,56,57,62,119,123,328,],[12,12,12,12,12,12,12,12,-2,-20,-23,-3,]),'PROCEDURE':([2,6,8,9,27,28,29,32,33,35,54,55,56,57,62,106,107,109,116,119,123,125,137,187,190,322,328,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,-2,19,19,19,19,-20,-23,-27,235,19,-31,235,-3,]),'FUNCTION':([2,6,8,9,27,28,29,32,33,35,54,55,56,57,62,106,107,109,116,119,123,125,137,187,190,322,328,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,-2,20,20,20,20,-20,-23,-27,236,20,-31,236,-3,]),'ID':([3,11,12,19,20,25,30,42,43,63,64,86,91,92,93,95,96,123,124,125,126,137,138,143,144,145,146,148,156,168,169,173,183,184,190,191,192,198,213,215,222,232,235,236,240,259,260,261,262,263,264,265,266,267,268,269,272,273,274,275,276,277,278,279,280,281,295,296,297,298,310,312,317,319,320,322,323,330,342,363,365,367,380,386,387,388,390,391,392,394,398,401,412,415,416,420,421,429,430,433,436,440,441,444,],[22,22,22,22,22,22,22,-263,-264,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-146,-147,-148,-149,-150,-151,-152,22,-153,-154,-155,22,-156,-157,-158,-159,-160,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-217,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'DOT':([4,22,24,41,44,45,77,87,88,89,90,94,97,98,99,100,103,121,122,142,151,152,153,160,174,176,182,185,255,258,271,292,300,301,332,345,355,383,],[23,-226,-4,-262,-259,-266,-229,-161,-162,-163,-233,-164,-165,-166,-167,-168,184,-261,-260,-46,184,-229,-233,-229,-233,293,-228,-176,-229,-233,-261,343,-170,-233,184,343,-169,343,]),'BEGIN':([5,7,25,26,31,34,52,53,64,92,105,108,110,115,117,118,143,144,186,188,189,193,259,261,297,302,388,391,420,421,],[25,-19,64,-5,-13,-17,-35,-36,64,64,-6,-7,-8,-14,-15,-18,64,64,-9,-11,-12,-16,64,64,64,-10,64,64,64,64,]),'VAR':([6,8,9,27,28,32,106,119,123,125,137,322,],[30,30,30,30,30,30,30,-20,-23,-27,232,232,]),'PLUS':([10,22,25,41,42,43,44,45,64,80,87,88,89,91,92,94,95,96,97,98,99,100,120,121,122,124,126,143,145,146,148,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,174,175,176,182,183,185,191,198,255,257,258,259,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,283,291,292,293,294,295,296,297,298,300,301,310,312,319,320,329,330,335,336,337,338,341,342,343,344,345,346,355,367,383,384,385,386,387,388,390,391,392,394,403,412,415,420,421,433,],[42,-226,42,-262,-263,-264,-259,-266,42,42,-161,-162,-163,42,42,-164,42,42,-165,-166,-167,-168,42,-261,-260,42,42,42,42,42,42,42,273,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,42,42,-246,-247,42,-233,-174,42,-228,42,-176,42,42,-136,-174,-233,42,42,42,-146,-147,-148,-149,-150,-151,-152,273,-261,42,-153,-154,-155,42,-156,-157,-158,-159,-160,-145,-175,42,42,-253,42,42,42,42,-170,-233,42,42,42,42,-118,42,-133,-135,-144,-267,-171,42,42,-258,42,-252,-169,42,42,-257,-251,42,42,42,42,42,42,42,-256,42,42,42,42,42,]),'MINUS':([10,22,25,41,42,43,44,45,64,80,87,88,89,91,92,94,95,96,97,98,99,100,120,121,122,124,126,143,145,146,148,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,174,175,176,182,183,185,191,198,255,257,258,259,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,283,291,292,293,294,295,296,297,298,300,301,310,312,319,320,329,330,335,336,337,338,341,342,343,344,345,346,355,367,383,384,385,386,387,388,390,391,392,394,403,412,415,420,421,433,],[43,-226,43,-262,-263,-264,-259,-266,43,43,-161,-162,-163,43,43,-164,43,43,-165,-166,-167,-168,43,-261,-260,43,43,43,43,43,43,43,274,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,43,43,-246,-247,43,-233,-174,43,-228,43,-176,43,43,-136,-174,-233,43,43,43,-146,-147,-148,-149,-150,-151,-152,274,-261,43,-153,-154,-155,43,-156,-157,-158,-159,-160,-145,-175,43,43,-253,43,43,43,43,-170,-233,43,43,43,43,-118,43,-133,-135,-144,-267,-171,43,43,-258,43,-252,-169,43,43,-257,-251,43,43,43,43,43,43,43,-256,43,43,43,43,43,]),'NUMBER':([10,25,40,41,42,43,44,45,64,80,91,92,95,96,120,121,122,124,126,143,145,146,148,156,168,169,173,176,183,191,198,259,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,292,293,295,296,297,298,310,312,319,320,330,342,343,345,367,383,386,387,388,390,391,392,394,412,415,420,421,433,],[45,45,45,45,-263,-264,-259,-266,45,45,45,45,45,45,45,45,-260,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-146,-147,-148,-149,-150,-151,-152,45,45,-153,-154,-155,45,-156,-157,-158,-159,-160,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'SEMICOLON':([13,14,15,16,17,18,21,22,24,36,37,38,39,41,44,45,46,47,49,50,58,59,60,61,66,68,69,70,71,72,73,74,75,76,79,81,82,83,84,85,87,88,89,90,94,97,98,99,100,111,112,121,122,127,128,129,130,131,132,133,134,135,136,142,147,149,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,194,195,196,197,199,200,201,202,203,204,205,206,207,208,209,210,212,216,217,218,219,225,226,227,228,229,230,233,234,237,238,239,241,242,244,245,246,247,270,271,283,291,293,294,300,301,303,304,306,307,308,309,314,315,316,321,325,327,329,331,333,334,335,336,337,338,341,343,344,345,346,347,350,351,352,354,355,356,357,358,362,368,369,370,371,372,373,374,375,376,377,383,384,385,389,395,396,399,402,403,407,408,409,410,411,417,418,422,423,424,425,426,431,432,437,438,439,442,443,446,447,448,449,],[52,53,54,55,56,57,62,-226,-4,119,-21,-272,-248,-262,-259,-266,123,-24,125,-28,-47,-52,-238,-53,143,-80,-81,-82,-83,-84,-90,-91,-92,-93,-87,-95,-96,-97,-104,-105,-161,-162,-163,-237,-164,-165,-166,-167,-168,190,-32,-261,-260,-37,-38,-40,-45,-39,-41,-42,-44,-43,-48,-46,-88,-89,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-22,-25,-234,-26,-275,-276,-277,-29,-236,-30,-177,-178,-179,-180,-181,-182,-188,-189,-190,-191,-192,322,-55,-57,-58,-59,-60,-63,-64,-236,-49,-51,328,-94,-78,-79,-85,-86,-130,-261,-145,-175,-249,-253,-170,-233,-33,-34,-273,-274,-187,-203,363,364,-210,-54,-47,-50,-118,-115,-98,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,-99,-106,390,-110,-113,-169,-184,-186,-183,-198,-199,-200,-201,-202,-56,-61,-65,-66,-67,-68,-255,-257,-251,-108,414,-211,-212,-62,-256,-107,-109,-111,-112,-114,429,-72,-193,-197,433,-214,434,-100,-101,-73,444,-215,-70,-71,-69,-74,-75,-218,]),'LPAREN':([21,22,42,43,58,60,79,90,91,95,96,126,145,146,148,156,168,169,173,174,175,183,191,257,258,262,263,264,265,266,267,268,269,272,273,274,275,276,277,278,279,280,281,295,296,312,319,320,325,326,330,342,367,386,387,394,412,434,],[63,-226,-263,-264,137,137,148,-237,168,168,168,215,168,168,168,168,168,168,168,-238,148,168,215,148,-238,168,-146,-147,-148,-149,-150,-151,-152,168,-153,-154,-155,168,-156,-157,-158,-159,-160,168,168,215,215,215,137,137,168,168,215,168,168,215,215,440,]),'EQUAL':([22,41,44,45,48,51,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,270,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,124,126,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,263,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-130,-261,-145,-175,-249,-253,-170,-233,-118,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'COLON':([22,38,39,41,44,45,60,67,113,114,121,122,139,170,171,176,196,199,200,201,231,271,293,294,305,306,307,318,321,324,326,338,343,344,345,346,353,354,366,383,384,385,403,411,],[-226,-272,-248,-262,-259,-266,138,144,191,-242,-261,-260,240,-246,-247,-248,-234,-275,-276,-277,323,-261,-249,-253,-243,-273,-274,367,-54,380,138,-267,-254,-258,-250,-252,391,-113,398,-255,-257,-251,-256,-114,]),'ASSIGN':([22,77,78,87,88,89,90,94,97,98,99,100,178,179,182,185,300,301,355,],[-226,145,146,-161,-162,-163,-233,-164,-165,-166,-167,-168,296,-235,-228,-176,-170,-233,-169,]),'END':([22,38,39,41,44,45,65,66,68,69,70,71,72,73,74,75,76,79,81,82,83,84,85,87,88,89,90,94,97,98,99,100,121,122,141,147,149,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,196,199,200,201,203,205,206,207,208,209,210,212,216,217,218,219,222,237,242,243,244,245,246,247,270,271,283,291,293,294,300,301,306,307,308,309,313,314,315,316,329,331,333,334,335,336,337,338,341,343,344,345,346,347,350,351,352,355,356,357,358,362,364,368,369,370,371,383,384,385,389,390,395,396,399,403,407,408,409,410,414,422,423,424,425,431,432,439,449,],[-226,-272,-248,-262,-259,-266,142,-76,-80,-81,-82,-83,-84,-90,-91,-92,-93,-87,-95,-96,-97,-104,-105,-161,-162,-163,-237,-164,-165,-166,-167,-168,-261,-260,242,-88,-89,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-234,-275,-276,-277,-236,-177,-178,-179,-180,-181,-182,-188,-189,-190,-191,-192,-204,-236,-94,-77,-78,-79,-85,-86,-130,-261,-145,-175,-249,-253,-170,-233,-273,-274,-187,-203,362,-205,-208,-210,-118,-115,-98,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,-99,-106,389,-110,-169,-184,-186,-183,-198,-209,-199,-200,-201,-202,-255,-257,-251,-108,408,-206,-211,-212,-256,-107,-109,-111,-112,-207,-193,-197,-213,-214,-100,-101,-215,-218,]),'UPARROW':([22,77,87,88,89,90,94,97,98,99,100,101,104,126,152,153,160,174,182,185,191,255,258,300,301,319,320,355,367,412,],[-226,-227,-161,-162,-163,-233,-164,-165,-166,-167,-168,182,185,213,-227,-233,-227,-233,-228,-176,213,-227,-233,-170,-233,213,213,-169,213,213,]),'LBRACKET':([22,42,43,77,87,88,89,90,91,94,95,96,97,98,99,100,102,145,146,148,152,153,156,160,168,169,173,174,182,183,185,221,255,258,262,263,264,265,266,267,268,269,272,273,274,275,276,277,278,279,280,281,295,296,300,301,330,342,355,379,386,387,400,],[-226,-263,-264,-232,-161,-162,-163,-233,173,-164,173,173,-165,-166,-167,-168,183,173,173,173,-232,-233,173,-232,173,173,173,-233,-228,173,-176,312,-232,-233,173,-146,-147,-148,-149,-150,-151,-152,173,-153,-154,-155,173,-156,-157,-158,-159,-160,173,173,-170,-233,173,173,-169,401,173,173,416,]),'COMMA':([22,36,37,38,39,41,44,45,87,88,89,94,97,98,99,100,113,114,121,122,140,150,151,152,153,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,194,196,199,200,201,209,210,231,248,249,250,251,252,253,254,255,256,257,258,270,271,283,289,290,291,293,294,299,300,301,305,306,307,311,318,324,329,332,334,335,336,337,338,341,343,344,345,346,353,354,355,356,357,358,359,360,361,381,382,383,384,385,403,411,413,426,],[-226,120,-21,-272,-248,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,192,-242,-261,-260,192,260,-116,-229,-233,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-22,-234,-275,-276,-277,-181,-182,192,330,-119,-121,-122,-123,-124,-125,-136,-126,-127,-233,-130,-261,-145,342,-244,-175,-249,-253,342,-170,-233,-243,-273,-274,192,192,192,-118,-117,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,392,-113,-169,-184,-186,-183,394,-194,-196,-120,-245,-255,-257,-251,-256,-114,-195,392,]),'RPAREN':([22,41,44,45,87,88,89,94,97,98,99,100,114,121,122,136,140,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,196,199,200,201,203,205,206,207,208,209,210,212,216,217,218,219,225,226,227,228,229,230,233,234,237,238,239,248,249,250,251,252,253,254,255,256,257,258,270,271,282,283,291,293,294,300,301,305,306,307,308,309,311,314,315,316,321,325,327,329,334,335,336,337,338,341,343,344,345,346,355,356,357,358,362,364,368,369,370,371,372,373,374,375,376,377,381,383,384,385,395,396,399,402,403,414,422,423,424,425,439,440,442,443,445,446,449,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-242,-261,-260,-48,241,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-234,-275,-276,-277,-236,-177,-178,-179,-180,-181,-182,-188,-189,-190,-191,-192,321,-55,-57,-58,-59,-60,-63,-64,-236,-49,-51,329,-119,-121,-122,-123,-124,-125,-136,-126,-127,-233,-130,-261,337,-145,-175,-249,-253,-170,-233,-243,-273,-274,-187,-203,358,-205,-208,-210,-54,-47,-50,-118,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-184,-186,-183,-198,-209,-199,-200,-201,-202,-56,-61,-65,-66,-67,-68,-120,-255,-257,-251,-206,-211,-212,-62,-256,-207,-193,-197,-213,-214,-215,-204,-70,-71,449,-69,-218,]),'DO':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,150,151,152,153,154,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,270,271,283,291,293,294,300,301,329,332,334,335,336,337,338,341,343,344,345,346,355,383,384,385,403,404,405,406,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,259,-116,-229,-233,261,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-130,-261,-145,-175,-249,-253,-170,-233,-118,-117,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,420,-103,421,]),'TIMES':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,277,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-261,-145,-175,-249,-253,-170,-233,-118,277,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'DIVIDE':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,278,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-261,-145,-175,-249,-253,-170,-233,-118,278,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'DIV':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,279,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-261,-145,-175,-249,-253,-170,-233,-118,279,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'MOD':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,280,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-261,-145,-175,-249,-253,-170,-233,-118,280,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'AND':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,281,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-261,-145,-175,-249,-253,-170,-233,-118,281,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'OR':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,270,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,275,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,275,-261,-145,-175,-249,-253,-170,-233,-118,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'NOTEQUAL':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,270,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,264,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-130,-261,-145,-175,-249,-253,-170,-233,-118,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'LESS':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,270,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,265,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-130,-261,-145,-175,-249,-253,-170,-233,-118,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'LESSEQUAL':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,270,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,266,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-130,-261,-145,-175,-249,-253,-170,-233,-118,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'GREATER':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,270,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,267,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-130,-261,-145,-175,-249,-253,-170,-233,-118,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'GREATEREQUAL':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,270,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,268,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-130,-261,-145,-175,-249,-253,-170,-233,-118,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'IN':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,255,257,258,270,271,283,291,293,294,300,301,329,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,269,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-136,-174,-233,-130,-261,-145,-175,-249,-253,-170,-233,-118,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'UNTIL':([22,38,39,41,44,45,66,68,69,70,71,72,73,74,75,76,79,81,82,83,84,85,87,88,89,90,94,97,98,99,100,121,122,147,149,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,177,182,185,242,243,244,245,246,247,270,271,283,291,293,294,300,301,329,331,333,334,335,336,337,338,341,343,344,345,346,347,350,355,383,384,385,389,403,407,408,431,432,],[-226,-272,-248,-262,-259,-266,-76,-80,-81,-82,-83,-84,-90,-91,-92,-93,-87,-95,-96,-97,-104,-105,-161,-162,-163,-237,-164,-165,-166,-167,-168,-261,-260,-88,-89,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,295,-228,-176,-94,-77,-78,-79,-85,-86,-130,-261,-145,-175,-249,-253,-170,-233,-118,-115,-98,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,-99,-106,-169,-255,-257,-251,-108,-256,-107,-109,-100,-101,]),'THEN':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,180,182,185,270,271,283,291,293,294,300,301,329,334,335,336,337,338,341,343,344,345,346,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,297,-228,-176,-130,-261,-145,-175,-249,-253,-170,-233,-118,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,-256,]),'OF':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,181,182,185,223,224,237,270,271,283,291,293,294,300,301,329,334,335,336,337,338,341,343,344,345,346,355,383,384,385,393,397,403,428,435,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,298,-228,-176,319,320,-236,-130,-261,-145,-175,-249,-253,-170,-233,-118,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-255,-257,-251,412,415,-256,436,441,]),'RANGE_OPERATOR':([22,41,44,45,121,122,170,171,176,196,199,200,201,203,214,220,271,293,294,306,307,338,343,344,345,346,383,384,385,403,419,],[-226,-262,-259,-266,-261,-260,-246,-247,-248,-234,-275,-276,-277,-234,310,-185,-261,-249,-253,-273,-274,-267,-254,-258,-250,-252,-255,-257,-251,-256,430,]),'ELSE':([22,38,39,41,44,45,68,69,70,71,72,73,74,75,76,79,81,82,83,84,85,87,88,89,90,94,97,98,99,100,121,122,147,149,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,242,244,245,246,247,270,271,283,291,293,294,300,301,329,331,333,334,335,336,337,338,341,343,344,345,346,347,350,355,383,384,385,389,403,407,408,431,432,],[-226,-272,-248,-262,-259,-266,-80,-81,-82,-83,-84,-90,-91,-92,-93,-87,-95,-96,-97,-104,-105,-161,-162,-163,-237,-164,-165,-166,-167,-168,-261,-260,-88,-89,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-94,-78,-79,-85,-86,-130,-261,-145,-175,-249,-253,-170,-233,-118,-115,-98,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,-99,388,-169,-255,-257,-251,-108,-256,-107,-109,-100,-101,]),'RBRACKET':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,173,174,175,176,182,185,196,199,200,201,209,210,237,270,271,283,288,289,290,291,293,294,299,300,301,306,307,329,334,335,336,337,338,341,343,344,345,346,355,356,357,358,359,360,361,382,383,384,385,403,413,417,418,427,437,447,448,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-172,-233,-174,-248,-228,-176,-234,-275,-276,-277,-181,-182,-236,-130,-261,-145,341,-173,-244,-175,-249,-253,355,-170,-233,-273,-274,-118,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,-169,-184,-186,-183,393,-194,-196,-245,-255,-257,-251,-256,-195,428,-72,435,-73,-74,-75,]),'TO':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,270,271,283,291,293,294,300,301,329,334,335,336,337,338,341,343,344,345,346,348,349,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-130,-261,-145,-175,-249,-253,-170,-233,-118,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,386,-102,-169,-255,-257,-251,-256,]),'DOWNTO':([22,41,44,45,87,88,89,94,97,98,99,100,121,122,155,157,158,159,160,161,162,163,164,165,166,167,170,171,174,175,176,182,185,270,271,283,291,293,294,300,301,329,334,335,336,337,338,341,343,344,345,346,348,349,355,383,384,385,403,],[-226,-262,-259,-266,-161,-162,-163,-164,-165,-166,-167,-168,-261,-260,-128,-131,-132,-134,-136,-137,-138,-139,-140,-141,-142,-143,-246,-247,-233,-174,-248,-228,-176,-130,-261,-145,-175,-249,-253,-170,-233,-118,-129,-133,-135,-144,-267,-171,-254,-258,-250,-252,387,-102,-169,-255,-257,-251,-256,]),'GOTO':([25,64,92,143,144,259,261,297,388,391,420,421,],[80,80,80,80,80,80,80,80,80,80,80,80,]),'WITH':([25,64,92,143,144,259,261,297,388,391,420,421,],[86,86,86,86,86,86,86,86,86,86,86,86,]),'WHILE':([25,64,92,143,144,259,261,297,388,391,420,421,],[91,91,91,91,91,91,91,91,91,91,91,91,]),'REPEAT':([25,64,92,143,144,259,261,297,388,391,420,421,],[92,92,92,92,92,92,92,92,92,92,92,92,]),'FOR':([25,64,92,143,144,259,261,297,388,391,420,421,],[93,93,93,93,93,93,93,93,93,93,93,93,]),'IF':([25,64,92,143,144,259,261,297,388,391,420,421,],[95,95,95,95,95,95,95,95,95,95,95,95,]),'CASE':([25,64,92,143,144,222,259,261,297,363,388,391,420,421,440,],[96,96,96,96,96,317,96,96,96,317,96,96,96,96,317,]),'NIL':([42,43,91,95,96,145,146,148,156,168,169,173,183,262,263,264,265,266,267,268,269,272,273,274,275,276,277,278,279,280,281,295,296,330,342,386,387,],[-263,-264,164,164,164,164,164,164,164,164,164,164,164,164,-146,-147,-148,-149,-150,-151,-152,164,-153,-154,-155,164,-156,-157,-158,-159,-160,164,164,164,164,164,164,]),'NOT':([42,43,91,95,96,145,146,148,156,168,169,173,183,262,263,264,265,266,267,268,269,272,273,274,275,276,277,278,279,280,281,295,296,330,342,386,387,],[-263,-264,169,169,169,169,169,169,169,169,169,169,169,169,-146,-147,-148,-149,-150,-151,-152,169,-153,-154,-155,169,-156,-157,-158,-159,-160,169,169,169,169,169,169,]),'QUOTE':([42,43,91,95,96,124,126,145,146,148,156,168,169,173,183,191,262,263,264,265,266,267,268,269,272,273,274,275,276,277,278,279,280,281,284,285,286,295,296,298,310,312,319,320,330,339,340,342,367,386,387,390,392,394,412,415,433,],[-263,-264,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,-146,-147,-148,-149,-150,-151,-152,172,-153,-154,-155,172,-156,-157,-158,-159,-160,338,-268,-270,172,172,172,172,172,172,172,172,-269,-271,172,172,172,172,172,172,172,172,172,172,]),'FORWARD':([54,56,],[130,130,]),'PACKED':([126,191,319,320,323,367,380,412,436,],[211,211,211,211,378,211,378,211,378,]),'ARRAY':([126,191,211,319,320,323,367,378,380,412,436,],[221,221,221,221,221,379,221,400,379,221,379,]),'RECORD':([126,191,211,319,320,367,412,],[222,222,222,222,222,222,222,]),'SET':([126,191,211,319,320,367,412,],[223,223,223,223,223,223,223,]),'FILE':([126,191,211,319,320,367,412,],[224,224,224,224,224,224,224,]),'ANY_CHARACTER_EXCEPT_QUOTE':([172,284,285,286,339,340,],[286,286,-268,-270,-269,-271,]),'SQUOTE':([172,284,285,286,287,339,340,],[287,287,-268,-270,340,-269,-271,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_heading':([0,],[2,]),'block':([2,54,55,56,57,],[4,129,129,134,134,]),'declaration_part':([2,54,55,56,57,],[5,5,5,5,5,]),'label_declaration_part':([2,54,55,56,57,],[6,6,6,6,6,]),'procedure_and_function_declaration_part':([2,6,8,9,27,28,29,32,33,35,54,55,56,57,106,107,109,116,187,],[7,26,31,34,105,108,110,115,117,118,7,7,7,7,186,188,189,193,302,]),'constant_definition_part':([2,6,54,55,56,57,],[8,27,8,8,8,8,]),'type_definition_part':([2,6,8,27,54,55,56,57,],[9,28,32,106,9,9,9,9,]),'procedure_declaration':([2,6,8,9,27,28,29,32,33,35,54,55,56,57,106,107,109,116,187,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'function_declaration':([2,6,8,9,27,28,29,32,33,35,54,55,56,57,106,107,109,116,187,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'procedure_heading':([2,6,8,9,27,28,29,32,33,35,54,55,56,57,106,107,109,116,137,187,322,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,233,15,233,]),'procedure_identification':([2,6,8,9,27,28,29,32,33,35,54,55,56,57,106,107,109,116,187,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'function_heading':([2,6,8,9,27,28,29,32,33,35,54,55,56,57,106,107,109,116,137,187,322,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,234,17,234,]),'function_identification':([2,6,8,9,27,28,29,32,33,35,54,55,56,57,106,107,109,116,187,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'identifier':([3,11,12,19,20,25,30,63,64,86,91,92,93,95,96,123,124,125,126,137,138,143,144,145,146,148,156,168,169,173,183,184,190,191,192,198,213,215,222,232,235,236,240,259,260,261,262,272,276,295,296,297,298,310,312,317,319,320,322,323,330,342,363,365,367,380,386,387,388,390,391,392,394,401,412,415,416,420,421,429,430,433,436,440,441,444,],[21,48,51,58,60,90,114,114,90,153,174,90,179,174,174,48,196,51,203,114,237,90,90,174,174,258,174,174,174,174,174,301,114,203,305,196,237,114,114,114,325,326,237,90,153,90,174,174,174,174,174,90,196,196,196,366,203,203,114,237,258,174,114,237,203,237,174,174,90,196,90,196,196,419,203,196,419,90,90,419,438,196,237,114,237,237,]),'statement_part':([5,],[24,]),'variable_declaration_part':([6,8,9,27,28,32,106,],[29,33,35,107,109,116,187,]),'label_list':([10,],[36,]),'label':([10,25,64,80,92,120,143,259,261,297,388,391,420,421,],[37,67,67,149,67,194,67,67,67,67,67,67,67,67,]),'integer_number':([10,25,64,80,91,92,95,96,120,124,126,143,145,146,148,156,168,169,173,183,191,198,259,261,262,272,276,295,296,297,298,310,312,319,320,330,342,367,386,387,388,390,391,392,394,412,415,420,421,433,],[38,38,38,38,170,38,170,170,38,170,170,38,170,170,170,170,170,170,170,170,170,170,38,38,170,170,170,170,170,38,170,170,170,170,170,170,170,170,170,170,38,170,38,170,170,170,170,38,38,170,]),'digit_sequence':([10,25,64,80,91,92,95,96,120,124,126,143,145,146,148,156,168,169,173,176,183,191,198,259,261,262,272,276,292,293,295,296,297,298,310,312,319,320,330,342,343,345,367,383,386,387,388,390,391,392,394,412,415,420,421,433,],[39,39,39,39,176,39,176,176,39,176,176,39,176,176,176,176,176,176,176,292,176,176,176,39,39,176,176,176,292,345,176,176,39,176,176,176,176,176,176,176,383,292,176,292,176,176,39,176,39,176,176,176,176,39,39,176,]),'sign':([10,25,64,80,91,92,95,96,120,124,126,143,145,146,148,156,168,169,173,176,183,191,198,259,261,262,272,276,292,293,295,296,297,298,310,312,319,320,330,342,343,345,367,383,386,387,388,390,391,392,394,412,415,420,421,433,],[40,40,40,40,156,40,156,156,40,198,198,40,156,156,156,40,156,40,156,40,156,198,40,40,40,156,40,40,40,40,156,156,40,198,198,198,198,198,156,156,40,40,198,40,156,156,40,198,40,198,198,198,198,40,40,198,]),'unsigned_digit_sequence':([10,25,40,64,80,91,92,95,96,120,124,126,143,145,146,148,156,168,169,173,176,183,191,198,259,261,262,272,276,292,293,295,296,297,298,310,312,319,320,330,342,343,345,367,383,386,387,388,390,391,392,394,412,415,420,421,433,],[41,41,121,41,41,41,41,41,41,41,41,41,41,41,41,41,271,41,41,41,41,41,41,271,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'digit':([10,25,40,41,64,80,91,92,95,96,120,121,124,126,143,145,146,148,156,168,169,173,176,183,191,198,259,261,262,271,272,276,292,293,295,296,297,298,310,312,319,320,330,342,343,345,367,383,386,387,388,390,391,392,394,412,415,420,421,433,],[44,44,44,122,44,44,44,44,44,44,44,122,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,122,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'constant_definition_list':([11,],[46,]),'constant_definition':([11,123,],[47,195,]),'type_definition_list':([12,],[49,]),'type_definition':([12,125,],[50,202,]),'procedure_identifier':([19,25,64,92,143,144,148,259,261,297,330,388,391,420,421,],[59,79,79,79,79,79,256,79,79,79,256,79,79,79,79,]),'function_identifier':([20,25,64,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[61,78,78,175,78,175,175,78,78,175,175,257,175,175,175,175,175,78,78,175,175,175,175,175,78,257,175,175,175,78,78,78,78,]),'statement_sequence':([25,64,92,],[65,141,177,]),'statement':([25,64,92,143,259,261,297,388,391,420,421,],[66,66,66,243,331,333,350,407,410,431,432,]),'simple_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[68,68,68,68,244,68,68,68,68,68,68,68,]),'structured_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[69,69,69,69,245,69,69,69,69,69,69,69,]),'assignment_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[70,70,70,70,70,70,70,70,70,70,70,70,]),'procedure_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[71,71,71,71,71,71,71,71,71,71,71,71,]),'goto_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[72,72,72,72,72,72,72,72,72,72,72,72,]),'compound_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[73,73,73,73,73,73,73,73,73,73,73,73,]),'repetitive_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[74,74,74,74,74,74,74,74,74,74,74,74,]),'conditional_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[75,75,75,75,75,75,75,75,75,75,75,75,]),'with_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[76,76,76,76,76,76,76,76,76,76,76,76,]),'variable':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[77,77,152,160,77,160,160,77,77,160,160,255,160,160,160,160,160,77,152,77,160,160,160,160,160,77,255,160,160,160,77,77,77,77,]),'while_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[81,81,81,81,81,81,81,81,81,81,81,81,]),'repeat_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[82,82,82,82,82,82,82,82,82,82,82,82,]),'for_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[83,83,83,83,83,83,83,83,83,83,83,83,]),'if_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[84,84,84,84,84,84,84,84,84,84,84,84,]),'case_statement':([25,64,92,143,144,259,261,297,388,391,420,421,],[85,85,85,85,85,85,85,85,85,85,85,85,]),'entire_variable':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'component_variable':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'referenced_variable':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'variable_identifier':([25,64,86,91,92,93,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[94,94,94,94,94,178,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'field_identifier':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,184,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,300,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'indexed_variable':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'field_designator':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'file_buffer':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'pointer_variable':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'array_variable':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'record_variable':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[103,103,151,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,332,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'file_variable':([25,64,86,91,92,95,96,143,144,145,146,148,156,168,169,173,183,259,260,261,262,272,276,295,296,297,330,342,386,387,388,391,420,421,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'variable_declaration_list':([30,],[111,]),'variable_declaration':([30,190,],[112,303,]),'identifier_list':([30,63,137,190,215,222,232,322,363,440,],[113,140,231,113,311,318,324,231,318,318,]),'procedure_body':([54,55,],[127,131,]),'directive':([54,56,],[128,133,]),'function_body':([56,57,],[132,135,]),'formal_parameter_list':([58,60,325,326,],[136,139,136,139,]),'actual_parameter_list':([79,175,257,],[147,291,291,]),'record_variable_list':([86,],[150,]),'expression':([91,95,96,145,146,148,168,173,183,295,296,330,342,386,387,],[154,180,181,246,247,254,282,290,290,347,349,254,382,405,405,]),'simple_expression':([91,95,96,145,146,148,168,173,183,262,295,296,330,342,386,387,],[155,155,155,155,155,155,155,155,155,334,155,155,155,155,155,155,]),'term_list':([91,95,96,145,146,148,156,168,173,183,262,295,296,330,342,386,387,],[157,157,157,157,157,157,270,157,157,157,157,157,157,157,157,157,157,]),'term':([91,95,96,145,146,148,156,168,173,183,262,272,295,296,330,342,386,387,],[158,158,158,158,158,158,158,158,158,158,158,335,158,158,158,158,158,158,]),'factor':([91,95,96,145,146,148,156,168,169,173,183,262,272,276,295,296,330,342,386,387,],[159,159,159,159,159,159,159,159,283,159,159,159,159,336,159,159,159,159,159,159,]),'number':([91,95,96,124,126,145,146,148,156,168,169,173,183,191,198,262,272,276,295,296,298,310,312,319,320,330,342,367,386,387,390,392,394,412,415,433,],[161,161,161,200,200,161,161,161,161,161,161,161,161,200,307,161,161,161,161,161,200,200,200,200,200,161,161,200,161,161,200,200,200,200,200,200,]),'string':([91,95,96,124,126,145,146,148,156,168,169,173,183,191,262,272,276,295,296,298,310,312,319,320,330,342,367,386,387,390,392,394,412,415,433,],[162,162,162,201,201,162,162,162,162,162,162,162,162,201,162,162,162,162,162,201,201,201,201,201,162,162,201,162,162,201,201,201,201,201,201,]),'set':([91,95,96,145,146,148,156,168,169,173,183,262,272,276,295,296,330,342,386,387,],[163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,]),'constant_identifier':([91,95,96,124,126,145,146,148,156,168,169,173,183,191,198,262,272,276,295,296,298,310,312,319,320,330,342,367,386,387,390,392,394,412,415,433,],[165,165,165,199,199,165,165,165,165,165,165,165,165,199,306,165,165,165,165,165,199,199,199,199,199,165,165,199,165,165,199,199,199,199,199,199,]),'bound_identifier':([91,95,96,145,146,148,156,168,169,173,183,262,272,276,295,296,330,342,386,387,],[166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,]),'function_designator':([91,95,96,145,146,148,156,168,169,173,183,262,272,276,295,296,330,342,386,387,],[167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,]),'real_number':([91,95,96,124,126,145,146,148,156,168,169,173,183,191,198,262,272,276,295,296,298,310,312,319,320,330,342,367,386,387,390,392,394,412,415,433,],[171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,]),'constant':([124,126,191,298,310,312,319,320,367,390,392,394,412,415,433,],[197,220,220,354,357,220,220,220,220,354,411,220,220,354,354,]),'type':([126,191,319,320,367,412,],[204,304,369,371,399,423,]),'simple_type':([126,191,312,319,320,367,394,412,],[205,205,361,205,205,205,361,205,]),'structured_type':([126,191,319,320,367,412,],[206,206,206,206,206,206,]),'pointer_type':([126,191,319,320,367,412,],[207,207,207,207,207,207,]),'type_identifier':([126,138,191,213,240,319,320,323,365,367,380,412,436,441,444,],[208,239,208,309,239,208,208,374,397,208,374,208,442,446,448,]),'subrange_type':([126,191,312,319,320,367,394,412,],[209,209,209,209,209,209,209,209,]),'enumerated_type':([126,191,312,319,320,367,394,412,],[210,210,210,210,210,210,210,210,]),'unpacked_structured_type':([126,191,211,319,320,367,412,],[212,212,308,212,212,212,212,]),'lower_bound':([126,191,312,319,320,367,394,412,],[214,214,214,214,214,214,214,214,]),'array_type':([126,191,211,319,320,367,412,],[216,216,216,216,216,216,216,]),'record_type':([126,191,211,319,320,367,412,],[217,217,217,217,217,217,217,]),'set_type':([126,191,211,319,320,367,412,],[218,218,218,218,218,218,218,]),'file_type':([126,191,211,319,320,367,412,],[219,219,219,219,219,219,219,]),'formal_parameter_section_list':([137,],[225,]),'formal_parameter_section':([137,322,],[226,372,]),'value_parameter_section':([137,322,],[227,227,]),'variable_parameter_section':([137,322,],[228,228,]),'procedure_parameter_section':([137,322,],[229,229,]),'function_parameter_section':([137,322,],[230,230,]),'result_type':([138,240,],[238,327,]),'actual_parameter_list2':([148,],[248,]),'actual_parameter':([148,330,],[249,381,]),'actual_value':([148,330,],[250,250,]),'actual_variable':([148,330,],[251,251,]),'actual_procedure':([148,330,],[252,252,]),'actual_function':([148,330,],[253,253,]),'relational_operator':([155,],[262,]),'addition_operator':([157,270,],[272,272,]),'multiplication_operator':([158,335,],[276,276,]),'string_character_list':([172,],[284,]),'string_character':([172,284,],[285,339,]),'element_list':([173,],[288,]),'expression_list':([173,183,],[289,299,]),'scale_factor':([176,292,293,343,345,383,],[294,344,346,384,385,403,]),'field_list':([222,440,],[313,445,]),'fixed_part':([222,440,],[314,314,]),'variant_part':([222,363,440,],[315,395,315,]),'record_section':([222,363,440,],[316,396,316,]),'initial_expression':([296,],[348,]),'case_limb_list':([298,],[351,]),'case_limb':([298,390,],[352,409,]),'case_label_list':([298,390,415,433,],[353,353,426,426,]),'upper_bound':([310,],[356,]),'index_type_list':([312,],[359,]),'index_type':([312,394,],[360,413,]),'tag_field':([317,],[365,]),'base_type':([319,],[368,]),'file_component_type':([320,],[370,]),'parameter_type':([323,380,],[373,402,]),'conformant_array_schema':([323,380,436,],[375,375,443,]),'packed_conformant_array_schema':([323,380,436,],[376,376,376,]),'unpacked_conformant_array_schema':([323,380,436,],[377,377,377,]),'final_expression':([386,387,],[404,406,]),'bound_specification_list':([401,],[417,]),'bound_specification':([401,416,429,],[418,427,437,]),'element_type':([412,],[422,]),'variant_list':([415,],[424,]),'variant':([415,433,],[425,439,]),'ordinal_type_identifier':([444,],[447,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_heading block DOT','program',3,'p_program','minipascal_parser.py',9),
  ('program_heading -> PROGRAM identifier SEMICOLON','program_heading',3,'p_program_heading','minipascal_parser.py',13),
  ('program_heading -> PROGRAM identifier LPAREN identifier_list RPAREN SEMICOLON','program_heading',6,'p_program_heading','minipascal_parser.py',14),
  ('block -> declaration_part statement_part','block',2,'p_block','minipascal_parser.py',18),
  ('declaration_part -> label_declaration_part procedure_and_function_declaration_part','declaration_part',2,'p_declaration_part','minipascal_parser.py',22),
  ('declaration_part -> label_declaration_part constant_definition_part procedure_and_function_declaration_part','declaration_part',3,'p_declaration_part','minipascal_parser.py',23),
  ('declaration_part -> label_declaration_part type_definition_part procedure_and_function_declaration_part','declaration_part',3,'p_declaration_part','minipascal_parser.py',24),
  ('declaration_part -> label_declaration_part variable_declaration_part procedure_and_function_declaration_part','declaration_part',3,'p_declaration_part','minipascal_parser.py',25),
  ('declaration_part -> label_declaration_part constant_definition_part type_definition_part procedure_and_function_declaration_part','declaration_part',4,'p_declaration_part','minipascal_parser.py',26),
  ('declaration_part -> label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part','declaration_part',5,'p_declaration_part','minipascal_parser.py',27),
  ('declaration_part -> label_declaration_part constant_definition_part variable_declaration_part procedure_and_function_declaration_part','declaration_part',4,'p_declaration_part','minipascal_parser.py',28),
  ('declaration_part -> label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part','declaration_part',4,'p_declaration_part','minipascal_parser.py',29),
  ('declaration_part -> constant_definition_part procedure_and_function_declaration_part','declaration_part',2,'p_declaration_part','minipascal_parser.py',30),
  ('declaration_part -> constant_definition_part type_definition_part procedure_and_function_declaration_part','declaration_part',3,'p_declaration_part','minipascal_parser.py',31),
  ('declaration_part -> constant_definition_part variable_declaration_part procedure_and_function_declaration_part','declaration_part',3,'p_declaration_part','minipascal_parser.py',32),
  ('declaration_part -> constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part','declaration_part',4,'p_declaration_part','minipascal_parser.py',33),
  ('declaration_part -> type_definition_part procedure_and_function_declaration_part','declaration_part',2,'p_declaration_part','minipascal_parser.py',34),
  ('declaration_part -> type_definition_part variable_declaration_part procedure_and_function_declaration_part','declaration_part',3,'p_declaration_part','minipascal_parser.py',35),
  ('declaration_part -> procedure_and_function_declaration_part','declaration_part',1,'p_declaration_part','minipascal_parser.py',36),
  ('label_declaration_part -> LABEL label_list SEMICOLON','label_declaration_part',3,'p_label_declaration_part','minipascal_parser.py',41),
  ('label_list -> label','label_list',1,'p_label_list','minipascal_parser.py',45),
  ('label_list -> label_list COMMA label','label_list',3,'p_label_list','minipascal_parser.py',46),
  ('constant_definition_part -> CONST constant_definition_list SEMICOLON','constant_definition_part',3,'p_constant_definition_part','minipascal_parser.py',50),
  ('constant_definition_list -> constant_definition','constant_definition_list',1,'p_constant_definition_list','minipascal_parser.py',54),
  ('constant_definition_list -> constant_definition_list SEMICOLON constant_definition','constant_definition_list',3,'p_constant_definition_list','minipascal_parser.py',55),
  ('constant_definition -> identifier EQUAL constant','constant_definition',3,'p_constant_definition','minipascal_parser.py',59),
  ('type_definition_part -> TYPE type_definition_list SEMICOLON','type_definition_part',3,'p_type_definition_part','minipascal_parser.py',63),
  ('type_definition_list -> type_definition','type_definition_list',1,'p_type_definition_list','minipascal_parser.py',67),
  ('type_definition_list -> type_definition_list SEMICOLON type_definition','type_definition_list',3,'p_type_definition_list','minipascal_parser.py',68),
  ('type_definition -> identifier EQUAL type','type_definition',3,'p_type_definition','minipascal_parser.py',72),
  ('variable_declaration_part -> VAR variable_declaration_list SEMICOLON','variable_declaration_part',3,'p_variable_declaration_part','minipascal_parser.py',76),
  ('variable_declaration_list -> variable_declaration','variable_declaration_list',1,'p_variable_declaration_list','minipascal_parser.py',80),
  ('variable_declaration_list -> variable_declaration_list SEMICOLON variable_declaration','variable_declaration_list',3,'p_variable_declaration_list','minipascal_parser.py',81),
  ('variable_declaration -> identifier_list COLON type','variable_declaration',3,'p_variable_declaration','minipascal_parser.py',85),
  ('procedure_and_function_declaration_part -> procedure_declaration SEMICOLON','procedure_and_function_declaration_part',2,'p_procedure_and_function_declaration_part','minipascal_parser.py',89),
  ('procedure_and_function_declaration_part -> function_declaration SEMICOLON','procedure_and_function_declaration_part',2,'p_procedure_and_function_declaration_part','minipascal_parser.py',90),
  ('procedure_declaration -> procedure_heading SEMICOLON procedure_body','procedure_declaration',3,'p_procedure_declaration','minipascal_parser.py',94),
  ('procedure_declaration -> procedure_heading SEMICOLON directive','procedure_declaration',3,'p_procedure_declaration','minipascal_parser.py',95),
  ('procedure_declaration -> procedure_identification SEMICOLON procedure_body','procedure_declaration',3,'p_procedure_declaration','minipascal_parser.py',96),
  ('procedure_body -> block','procedure_body',1,'p_procedure_body','minipascal_parser.py',101),
  ('function_declaration -> function_heading SEMICOLON function_body','function_declaration',3,'p_function_declaration','minipascal_parser.py',105),
  ('function_declaration -> function_heading SEMICOLON directive','function_declaration',3,'p_function_declaration','minipascal_parser.py',106),
  ('function_declaration -> function_identification SEMICOLON function_body','function_declaration',3,'p_function_declaration','minipascal_parser.py',107),
  ('function_body -> block','function_body',1,'p_function_body','minipascal_parser.py',112),
  ('directive -> FORWARD','directive',1,'p_directive','minipascal_parser.py',116),
  ('statement_part -> BEGIN statement_sequence END','statement_part',3,'p_statement_part','minipascal_parser.py',120),
  ('procedure_heading -> PROCEDURE identifier','procedure_heading',2,'p_procedure_heading','minipascal_parser.py',127),
  ('procedure_heading -> PROCEDURE identifier formal_parameter_list','procedure_heading',3,'p_procedure_heading','minipascal_parser.py',128),
  ('function_heading -> FUNCTION identifier COLON result_type','function_heading',4,'p_function_heading','minipascal_parser.py',132),
  ('function_heading -> FUNCTION identifier formal_parameter_list COLON result_type','function_heading',5,'p_function_heading','minipascal_parser.py',133),
  ('result_type -> type_identifier','result_type',1,'p_result_type','minipascal_parser.py',137),
  ('procedure_identification -> PROCEDURE procedure_identifier','procedure_identification',2,'p_procedure_identification','minipascal_parser.py',141),
  ('function_identification -> FUNCTION function_identifier','function_identification',2,'p_function_identification','minipascal_parser.py',145),
  ('formal_parameter_list -> LPAREN formal_parameter_section_list RPAREN','formal_parameter_list',3,'p_formal_parameter_list','minipascal_parser.py',149),
  ('formal_parameter_section_list -> formal_parameter_section','formal_parameter_section_list',1,'p_formal_parameter_section_list','minipascal_parser.py',153),
  ('formal_parameter_section_list -> formal_parameter_section_list SEMICOLON formal_parameter_section','formal_parameter_section_list',3,'p_formal_parameter_section_list','minipascal_parser.py',154),
  ('formal_parameter_section -> value_parameter_section','formal_parameter_section',1,'p_formal_parameter_section','minipascal_parser.py',158),
  ('formal_parameter_section -> variable_parameter_section','formal_parameter_section',1,'p_formal_parameter_section','minipascal_parser.py',159),
  ('formal_parameter_section -> procedure_parameter_section','formal_parameter_section',1,'p_formal_parameter_section','minipascal_parser.py',160),
  ('formal_parameter_section -> function_parameter_section','formal_parameter_section',1,'p_formal_parameter_section','minipascal_parser.py',161),
  ('value_parameter_section -> identifier_list COLON parameter_type','value_parameter_section',3,'p_value_parameter_section','minipascal_parser.py',165),
  ('variable_parameter_section -> VAR identifier_list COLON parameter_type','variable_parameter_section',4,'p_variable_parameter_section','minipascal_parser.py',169),
  ('procedure_parameter_section -> procedure_heading','procedure_parameter_section',1,'p_procedure_parameter_section','minipascal_parser.py',173),
  ('function_parameter_section -> function_heading','function_parameter_section',1,'p_function_parameter_section','minipascal_parser.py',177),
  ('parameter_type -> type_identifier','parameter_type',1,'p_parameter_type','minipascal_parser.py',181),
  ('parameter_type -> conformant_array_schema','parameter_type',1,'p_parameter_type','minipascal_parser.py',182),
  ('conformant_array_schema -> packed_conformant_array_schema','conformant_array_schema',1,'p_conformant_array_schema','minipascal_parser.py',186),
  ('conformant_array_schema -> unpacked_conformant_array_schema','conformant_array_schema',1,'p_conformant_array_schema','minipascal_parser.py',187),
  ('packed_conformant_array_schema -> PACKED ARRAY LBRACKET bound_specification RBRACKET OF type_identifier','packed_conformant_array_schema',7,'p_packed_conformant_array_schema','minipascal_parser.py',191),
  ('unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF type_identifier','unpacked_conformant_array_schema',6,'p_unpacked_conformant_array_schema','minipascal_parser.py',195),
  ('unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF conformant_array_schema','unpacked_conformant_array_schema',6,'p_unpacked_conformant_array_schema','minipascal_parser.py',196),
  ('bound_specification_list -> bound_specification','bound_specification_list',1,'p_bound_specification_list','minipascal_parser.py',200),
  ('bound_specification_list -> bound_specification_list SEMICOLON bound_specification','bound_specification_list',3,'p_bound_specification_list','minipascal_parser.py',201),
  ('bound_specification -> identifier RANGE_OPERATOR identifier SEMICOLON ordinal_type_identifier','bound_specification',5,'p_bound_specification','minipascal_parser.py',205),
  ('ordinal_type_identifier -> type_identifier','ordinal_type_identifier',1,'p_ordinal_type_identifier','minipascal_parser.py',209),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','minipascal_parser.py',214),
  ('statement_sequence -> statement SEMICOLON statement','statement_sequence',3,'p_statement_sequence_1','minipascal_parser.py',218),
  ('statement -> label COLON simple_statement','statement',3,'p_statement','minipascal_parser.py',223),
  ('statement -> label COLON structured_statement','statement',3,'p_statement','minipascal_parser.py',224),
  ('statement -> simple_statement','statement',1,'p_statement','minipascal_parser.py',225),
  ('statement -> structured_statement','statement',1,'p_statement','minipascal_parser.py',226),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','minipascal_parser.py',231),
  ('simple_statement -> procedure_statement','simple_statement',1,'p_simple_statement','minipascal_parser.py',232),
  ('simple_statement -> goto_statement','simple_statement',1,'p_simple_statement','minipascal_parser.py',233),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','minipascal_parser.py',238),
  ('assignment_statement -> function_identifier ASSIGN expression','assignment_statement',3,'p_assignment_statement','minipascal_parser.py',239),
  ('procedure_statement -> procedure_identifier','procedure_statement',1,'p_procedure_statement','minipascal_parser.py',243),
  ('procedure_statement -> procedure_identifier actual_parameter_list','procedure_statement',2,'p_procedure_statement','minipascal_parser.py',244),
  ('goto_statement -> GOTO label','goto_statement',2,'p_goto_statement','minipascal_parser.py',248),
  ('structured_statement -> compound_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',252),
  ('structured_statement -> repetitive_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',253),
  ('structured_statement -> conditional_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',254),
  ('structured_statement -> with_statement','structured_statement',1,'p_structured_statement','minipascal_parser.py',255),
  ('compound_statement -> BEGIN statement_sequence END','compound_statement',3,'p_compound_statement','minipascal_parser.py',259),
  ('repetitive_statement -> while_statement','repetitive_statement',1,'p_repetitive_statement','minipascal_parser.py',263),
  ('repetitive_statement -> repeat_statement','repetitive_statement',1,'p_repetitive_statement','minipascal_parser.py',264),
  ('repetitive_statement -> for_statement','repetitive_statement',1,'p_repetitive_statement','minipascal_parser.py',265),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','minipascal_parser.py',269),
  ('repeat_statement -> REPEAT statement_sequence UNTIL expression','repeat_statement',4,'p_repeat_statement','minipascal_parser.py',273),
  ('for_statement -> FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement','for_statement',8,'p_for_statement','minipascal_parser.py',277),
  ('for_statement -> FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement','for_statement',8,'p_for_statement','minipascal_parser.py',278),
  ('initial_expression -> expression','initial_expression',1,'p_initial_expression','minipascal_parser.py',282),
  ('final_expression -> expression','final_expression',1,'p_final_expression','minipascal_parser.py',286),
  ('conditional_statement -> if_statement','conditional_statement',1,'p_conditional_statement','minipascal_parser.py',290),
  ('conditional_statement -> case_statement','conditional_statement',1,'p_conditional_statement','minipascal_parser.py',291),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','minipascal_parser.py',295),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','minipascal_parser.py',296),
  ('case_statement -> CASE expression OF case_limb_list END','case_statement',5,'p_case_statement','minipascal_parser.py',300),
  ('case_statement -> CASE expression OF case_limb_list SEMICOLON END','case_statement',6,'p_case_statement','minipascal_parser.py',301),
  ('case_limb_list -> case_limb','case_limb_list',1,'p_case_limb_list','minipascal_parser.py',305),
  ('case_limb_list -> case_limb_list SEMICOLON case_limb','case_limb_list',3,'p_case_limb_list','minipascal_parser.py',306),
  ('case_limb -> case_label_list COLON statement','case_limb',3,'p_case_limb','minipascal_parser.py',310),
  ('case_label_list -> constant','case_label_list',1,'p_case_label_list','minipascal_parser.py',314),
  ('case_label_list -> case_label_list COMMA constant','case_label_list',3,'p_case_label_list','minipascal_parser.py',315),
  ('with_statement -> WITH record_variable_list DO statement','with_statement',4,'p_with_statement','minipascal_parser.py',319),
  ('record_variable_list -> record_variable','record_variable_list',1,'p_record_variable_list','minipascal_parser.py',323),
  ('record_variable_list -> record_variable_list COMMA record_variable','record_variable_list',3,'p_record_variable_list','minipascal_parser.py',324),
  ('actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN','actual_parameter_list',3,'p_actual_parameter_list','minipascal_parser.py',328),
  ('actual_parameter_list2 -> actual_parameter','actual_parameter_list2',1,'p_actual_parameter_list2','minipascal_parser.py',332),
  ('actual_parameter_list2 -> actual_parameter_list2 COMMA actual_parameter','actual_parameter_list2',3,'p_actual_parameter_list2','minipascal_parser.py',333),
  ('actual_parameter -> actual_value','actual_parameter',1,'p_actual_parameter','minipascal_parser.py',337),
  ('actual_parameter -> actual_variable','actual_parameter',1,'p_actual_parameter','minipascal_parser.py',338),
  ('actual_parameter -> actual_procedure','actual_parameter',1,'p_actual_parameter','minipascal_parser.py',339),
  ('actual_parameter -> actual_function','actual_parameter',1,'p_actual_parameter','minipascal_parser.py',340),
  ('actual_value -> expression','actual_value',1,'p_actual_value','minipascal_parser.py',344),
  ('actual_procedure -> procedure_identifier','actual_procedure',1,'p_actual_procedure','minipascal_parser.py',348),
  ('actual_function -> function_identifier','actual_function',1,'p_actual_function','minipascal_parser.py',352),
  ('expression -> simple_expression','expression',1,'p_expression','minipascal_parser.py',357),
  ('expression -> simple_expression relational_operator simple_expression','expression',3,'p_expression','minipascal_parser.py',358),
  ('simple_expression -> sign term_list','simple_expression',2,'p_simple_expression','minipascal_parser.py',362),
  ('simple_expression -> term_list','simple_expression',1,'p_simple_expression','minipascal_parser.py',363),
  ('term_list -> term','term_list',1,'p_term_list','minipascal_parser.py',367),
  ('term_list -> term_list addition_operator term','term_list',3,'p_term_list','minipascal_parser.py',368),
  ('term -> factor','term',1,'p_term','minipascal_parser.py',372),
  ('term -> term multiplication_operator factor','term',3,'p_term','minipascal_parser.py',373),
  ('factor -> variable','factor',1,'p_factor','minipascal_parser.py',377),
  ('factor -> number','factor',1,'p_factor','minipascal_parser.py',378),
  ('factor -> string','factor',1,'p_factor','minipascal_parser.py',379),
  ('factor -> set','factor',1,'p_factor','minipascal_parser.py',380),
  ('factor -> NIL','factor',1,'p_factor','minipascal_parser.py',381),
  ('factor -> constant_identifier','factor',1,'p_factor','minipascal_parser.py',382),
  ('factor -> bound_identifier','factor',1,'p_factor','minipascal_parser.py',383),
  ('factor -> function_designator','factor',1,'p_factor','minipascal_parser.py',384),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','minipascal_parser.py',385),
  ('factor -> NOT factor','factor',2,'p_factor','minipascal_parser.py',386),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','minipascal_parser.py',390),
  ('relational_operator -> NOTEQUAL','relational_operator',1,'p_relational_operator','minipascal_parser.py',391),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','minipascal_parser.py',392),
  ('relational_operator -> LESSEQUAL','relational_operator',1,'p_relational_operator','minipascal_parser.py',393),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','minipascal_parser.py',394),
  ('relational_operator -> GREATEREQUAL','relational_operator',1,'p_relational_operator','minipascal_parser.py',395),
  ('relational_operator -> IN','relational_operator',1,'p_relational_operator','minipascal_parser.py',396),
  ('addition_operator -> PLUS','addition_operator',1,'p_addition_operator','minipascal_parser.py',400),
  ('addition_operator -> MINUS','addition_operator',1,'p_addition_operator','minipascal_parser.py',401),
  ('addition_operator -> OR','addition_operator',1,'p_addition_operator','minipascal_parser.py',402),
  ('multiplication_operator -> TIMES','multiplication_operator',1,'p_multiplication_operator','minipascal_parser.py',406),
  ('multiplication_operator -> DIVIDE','multiplication_operator',1,'p_multiplication_operator','minipascal_parser.py',407),
  ('multiplication_operator -> DIV','multiplication_operator',1,'p_multiplication_operator','minipascal_parser.py',408),
  ('multiplication_operator -> MOD','multiplication_operator',1,'p_multiplication_operator','minipascal_parser.py',409),
  ('multiplication_operator -> AND','multiplication_operator',1,'p_multiplication_operator','minipascal_parser.py',410),
  ('variable -> entire_variable','variable',1,'p_variable','minipascal_parser.py',414),
  ('variable -> component_variable','variable',1,'p_variable','minipascal_parser.py',415),
  ('variable -> referenced_variable','variable',1,'p_variable','minipascal_parser.py',416),
  ('entire_variable -> variable_identifier','entire_variable',1,'p_entire_variable','minipascal_parser.py',420),
  ('entire_variable -> field_identifier','entire_variable',1,'p_entire_variable','minipascal_parser.py',421),
  ('component_variable -> indexed_variable','component_variable',1,'p_component_variable','minipascal_parser.py',425),
  ('component_variable -> field_designator','component_variable',1,'p_component_variable','minipascal_parser.py',426),
  ('component_variable -> file_buffer','component_variable',1,'p_component_variable','minipascal_parser.py',427),
  ('indexed_variable -> array_variable LBRACKET expression_list RBRACKET','indexed_variable',4,'p_indexed_variable','minipascal_parser.py',431),
  ('field_designator -> record_variable DOT field_identifier','field_designator',3,'p_field_designator','minipascal_parser.py',435),
  ('set -> LBRACKET element_list RBRACKET','set',3,'p_set','minipascal_parser.py',439),
  ('element_list -> <empty>','element_list',0,'p_element_list','minipascal_parser.py',443),
  ('element_list -> expression_list','element_list',1,'p_element_list','minipascal_parser.py',444),
  ('function_designator -> function_identifier','function_designator',1,'p_function_designator','minipascal_parser.py',448),
  ('function_designator -> function_identifier actual_parameter_list','function_designator',2,'p_function_designator','minipascal_parser.py',449),
  ('file_buffer -> file_variable UPARROW','file_buffer',2,'p_file_buffer','minipascal_parser.py',453),
  ('type -> simple_type','type',1,'p_type','minipascal_parser.py',459),
  ('type -> structured_type','type',1,'p_type','minipascal_parser.py',460),
  ('type -> pointer_type','type',1,'p_type','minipascal_parser.py',461),
  ('type -> type_identifier','type',1,'p_type','minipascal_parser.py',462),
  ('simple_type -> subrange_type','simple_type',1,'p_simple_type','minipascal_parser.py',466),
  ('simple_type -> enumerated_type','simple_type',1,'p_simple_type','minipascal_parser.py',467),
  ('enumerated_type -> LPAREN identifier_list RPAREN','enumerated_type',3,'p_enumerated_type','minipascal_parser.py',471),
  ('subrange_type -> lower_bound RANGE_OPERATOR upper_bound','subrange_type',3,'p_subrange_type','minipascal_parser.py',475),
  ('lower_bound -> constant','lower_bound',1,'p_lower_bound','minipascal_parser.py',479),
  ('upper_bound -> constant','upper_bound',1,'p_upper_bound','minipascal_parser.py',483),
  ('structured_type -> PACKED unpacked_structured_type','structured_type',2,'p_structured_type','minipascal_parser.py',487),
  ('structured_type -> unpacked_structured_type','structured_type',1,'p_structured_type','minipascal_parser.py',488),
  ('unpacked_structured_type -> array_type','unpacked_structured_type',1,'p_unpacked_structured_type','minipascal_parser.py',492),
  ('unpacked_structured_type -> record_type','unpacked_structured_type',1,'p_unpacked_structured_type','minipascal_parser.py',493),
  ('unpacked_structured_type -> set_type','unpacked_structured_type',1,'p_unpacked_structured_type','minipascal_parser.py',494),
  ('unpacked_structured_type -> file_type','unpacked_structured_type',1,'p_unpacked_structured_type','minipascal_parser.py',495),
  ('array_type -> ARRAY LBRACKET index_type_list RBRACKET OF element_type','array_type',6,'p_array_type','minipascal_parser.py',499),
  ('index_type_list -> index_type','index_type_list',1,'p_index_type_list','minipascal_parser.py',503),
  ('index_type_list -> index_type_list COMMA index_type','index_type_list',3,'p_index_type_list','minipascal_parser.py',504),
  ('index_type -> simple_type','index_type',1,'p_index_type','minipascal_parser.py',508),
  ('element_type -> type','element_type',1,'p_element_type','minipascal_parser.py',512),
  ('record_type -> RECORD field_list END','record_type',3,'p_record_type','minipascal_parser.py',516),
  ('set_type -> SET OF base_type','set_type',3,'p_set_type','minipascal_parser.py',520),
  ('base_type -> type','base_type',1,'p_base_type','minipascal_parser.py',524),
  ('file_type -> FILE OF file_component_type','file_type',3,'p_file_type','minipascal_parser.py',528),
  ('file_component_type -> type','file_component_type',1,'p_file_component_type','minipascal_parser.py',532),
  ('pointer_type -> UPARROW type_identifier','pointer_type',2,'p_pointer_type','minipascal_parser.py',536),
  ('field_list -> <empty>','field_list',0,'p_field_list','minipascal_parser.py',542),
  ('field_list -> fixed_part','field_list',1,'p_field_list','minipascal_parser.py',543),
  ('field_list -> fixed_part SEMICOLON variant_part','field_list',3,'p_field_list','minipascal_parser.py',544),
  ('field_list -> fixed_part SEMICOLON variant_part SEMICOLON','field_list',4,'p_field_list','minipascal_parser.py',545),
  ('field_list -> variant_part','field_list',1,'p_field_list','minipascal_parser.py',546),
  ('field_list -> variant_part SEMICOLON','field_list',2,'p_field_list','minipascal_parser.py',547),
  ('fixed_part -> record_section','fixed_part',1,'p_fixed_part','minipascal_parser.py',551),
  ('fixed_part -> fixed_part SEMICOLON record_section','fixed_part',3,'p_fixed_part','minipascal_parser.py',552),
  ('record_section -> identifier_list COLON type','record_section',3,'p_record_section','minipascal_parser.py',556),
  ('variant_part -> CASE tag_field type_identifier OF variant_list','variant_part',5,'p_variant_part','minipascal_parser.py',560),
  ('variant_list -> variant','variant_list',1,'p_variant_list','minipascal_parser.py',564),
  ('variant_list -> variant_list SEMICOLON variant','variant_list',3,'p_variant_list','minipascal_parser.py',565),
  ('tag_field -> <empty>','tag_field',0,'p_tag_field','minipascal_parser.py',569),
  ('tag_field -> identifier COLON','tag_field',2,'p_tag_field','minipascal_parser.py',570),
  ('variant -> case_label_list SEMICOLON LPAREN field_list RPAREN','variant',5,'p_variant','minipascal_parser.py',574),
  ('output_list -> output_value','output_list',1,'p_output_list','minipascal_parser.py',579),
  ('output_list -> output_list COMMA output_value','output_list',3,'p_output_list','minipascal_parser.py',580),
  ('output_value -> expression','output_value',1,'p_output_value','minipascal_parser.py',584),
  ('output_value -> expression SEMICOLON field_width','output_value',3,'p_output_value','minipascal_parser.py',585),
  ('output_value -> expression SEMICOLON field_width COLON fraction_length','output_value',5,'p_output_value','minipascal_parser.py',586),
  ('field_width -> expression','field_width',1,'p_field_width','minipascal_parser.py',590),
  ('fraction_length -> expression','fraction_length',1,'p_fraction_length','minipascal_parser.py',594),
  ('identifier -> ID','identifier',1,'p_identifier','minipascal_parser.py',599),
  ('file_variable -> variable','file_variable',1,'p_file_variable','minipascal_parser.py',603),
  ('referenced_variable -> pointer_variable UPARROW','referenced_variable',2,'p_freferenced_variable','minipascal_parser.py',607),
  ('record_variable -> variable','record_variable',1,'p_record_variable','minipascal_parser.py',611),
  ('pointer_variable -> variable','pointer_variable',1,'p_pointer_variable','minipascal_parser.py',615),
  ('actual_variable -> variable','actual_variable',1,'p_actual_variable','minipascal_parser.py',619),
  ('array_variable -> variable','array_variable',1,'p_array_variable','minipascal_parser.py',623),
  ('field_identifier -> identifier','field_identifier',1,'p_field_identifier','minipascal_parser.py',627),
  ('constant_identifier -> identifier','constant_identifier',1,'p_constant_identifier','minipascal_parser.py',631),
  ('variable_identifier -> identifier','variable_identifier',1,'p_variable_identifier','minipascal_parser.py',635),
  ('type_identifier -> identifier','type_identifier',1,'p_type_identifier','minipascal_parser.py',639),
  ('procedure_identifier -> identifier','procedure_identifier',1,'p_procedure_identifier','minipascal_parser.py',643),
  ('function_identifier -> identifier','function_identifier',1,'p_function_identifier','minipascal_parser.py',647),
  ('bound_identifier -> identifier','bound_identifier',1,'p_bound_identifier','minipascal_parser.py',651),
  ('variable_list -> variable','variable_list',1,'p_variable_list','minipascal_parser.py',657),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','minipascal_parser.py',658),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','minipascal_parser.py',662),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','minipascal_parser.py',663),
  ('expression_list -> expression','expression_list',1,'p_expression_list','minipascal_parser.py',667),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','minipascal_parser.py',668),
  ('number -> integer_number','number',1,'p_number','minipascal_parser.py',672),
  ('number -> real_number','number',1,'p_number','minipascal_parser.py',673),
  ('integer_number -> digit_sequence','integer_number',1,'p_integer_number','minipascal_parser.py',677),
  ('real_number -> digit_sequence DOT','real_number',2,'p_real_number','minipascal_parser.py',681),
  ('real_number -> digit_sequence DOT digit_sequence','real_number',3,'p_real_number','minipascal_parser.py',682),
  ('real_number -> digit_sequence DOT digit_sequence scale_factor','real_number',4,'p_real_number','minipascal_parser.py',683),
  ('real_number -> digit_sequence DOT scale_factor','real_number',3,'p_real_number','minipascal_parser.py',684),
  ('real_number -> digit_sequence scale_factor','real_number',2,'p_real_number','minipascal_parser.py',685),
  ('scale_factor -> digit_sequence DOT','scale_factor',2,'p_scale_factor','minipascal_parser.py',689),
  ('scale_factor -> digit_sequence DOT digit_sequence','scale_factor',3,'p_scale_factor','minipascal_parser.py',690),
  ('scale_factor -> digit_sequence DOT digit_sequence scale_factor','scale_factor',4,'p_scale_factor','minipascal_parser.py',691),
  ('scale_factor -> digit_sequence DOT scale_factor','scale_factor',3,'p_scale_factor','minipascal_parser.py',692),
  ('scale_factor -> digit_sequence scale_factor','scale_factor',2,'p_scale_factor','minipascal_parser.py',693),
  ('unsigned_digit_sequence -> digit','unsigned_digit_sequence',1,'p_unsigned_digit_sequence','minipascal_parser.py',697),
  ('unsigned_digit_sequence -> unsigned_digit_sequence digit','unsigned_digit_sequence',2,'p_unsigned_digit_sequence','minipascal_parser.py',698),
  ('digit_sequence -> sign unsigned_digit_sequence','digit_sequence',2,'p_digit_sequence','minipascal_parser.py',702),
  ('digit_sequence -> unsigned_digit_sequence','digit_sequence',1,'p_digit_sequence','minipascal_parser.py',703),
  ('sign -> PLUS','sign',1,'p_sign','minipascal_parser.py',708),
  ('sign -> MINUS','sign',1,'p_sign','minipascal_parser.py',709),
  ('letter -> LETTER','letter',1,'p_letter','minipascal_parser.py',713),
  ('digit -> NUMBER','digit',1,'p_digit','minipascal_parser.py',717),
  ('string -> QUOTE string_character_list QUOTE','string',3,'p_string','minipascal_parser.py',721),
  ('string_character_list -> string_character','string_character_list',1,'p_string_character_list','minipascal_parser.py',725),
  ('string_character_list -> string_character_list string_character','string_character_list',2,'p_string_character_list','minipascal_parser.py',726),
  ('string_character -> ANY_CHARACTER_EXCEPT_QUOTE','string_character',1,'p_string_character','minipascal_parser.py',730),
  ('string_character -> SQUOTE SQUOTE','string_character',2,'p_string_character','minipascal_parser.py',731),
  ('label -> integer_number','label',1,'p_label','minipascal_parser.py',735),
  ('constant -> sign constant_identifier','constant',2,'p_constant','minipascal_parser.py',739),
  ('constant -> sign number','constant',2,'p_constant','minipascal_parser.py',740),
  ('constant -> constant_identifier','constant',1,'p_constant','minipascal_parser.py',741),
  ('constant -> number','constant',1,'p_constant','minipascal_parser.py',742),
  ('constant -> string','constant',1,'p_constant','minipascal_parser.py',743),
]
