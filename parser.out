Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSOLUTE
    AMPERSANT
    ASM
    AT
    BUCKS
    CONSTRUCTOR
    DESTRUCTOR
    DIGIT
    DIVIDEEQUAL
    HASHTAG
    IMPLEMENTATION
    INHERITED
    INLINE
    INTERFACE
    LBLOCK
    MINUSEQUAL
    OBJECT
    OPERATOR
    PERCENT
    PLUSEQUAL
    RBLOCK
    REINTRODUCE
    SELF
    SHL
    SHR
    STRING
    TIMESEQUAL
    UNIT
    USES
    XOR

Grammar

Rule 0     S' -> program
Rule 1     program -> program_heading block DOT
Rule 2     program_heading -> PROGRAM identifier SEMICOLON
Rule 3     program_heading -> PROGRAM identifier LPAREN identifier_list RPAREN SEMICOLON
Rule 4     block -> declaration_part statement_part
Rule 5     declaration_part -> label_declaration_part procedure_and_function_declaration_part
Rule 6     declaration_part -> label_declaration_part constant_definition_part procedure_and_function_declaration_part
Rule 7     declaration_part -> label_declaration_part type_definition_part procedure_and_function_declaration_part
Rule 8     declaration_part -> label_declaration_part variable_declaration_part procedure_and_function_declaration_part
Rule 9     declaration_part -> label_declaration_part constant_definition_part type_definition_part procedure_and_function_declaration_part
Rule 10    declaration_part -> label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
Rule 11    declaration_part -> label_declaration_part constant_definition_part variable_declaration_part procedure_and_function_declaration_part
Rule 12    declaration_part -> label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
Rule 13    declaration_part -> constant_definition_part procedure_and_function_declaration_part
Rule 14    declaration_part -> constant_definition_part type_definition_part procedure_and_function_declaration_part
Rule 15    declaration_part -> constant_definition_part variable_declaration_part procedure_and_function_declaration_part
Rule 16    declaration_part -> constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
Rule 17    declaration_part -> type_definition_part procedure_and_function_declaration_part
Rule 18    declaration_part -> type_definition_part variable_declaration_part procedure_and_function_declaration_part
Rule 19    declaration_part -> procedure_and_function_declaration_part
Rule 20    label_declaration_part -> LABEL label_list SEMICOLON
Rule 21    label_list -> label
Rule 22    label_list -> label_list COMMA label
Rule 23    constant_definition_part -> CONST constant_definition_list SEMICOLON
Rule 24    constant_definition_list -> constant_definition
Rule 25    constant_definition_list -> constant_definition_list SEMICOLON constant_definition
Rule 26    constant_definition -> identifier EQUAL constant
Rule 27    type_definition_part -> TYPE type_definition_list SEMICOLON
Rule 28    type_definition_list -> type_definition
Rule 29    type_definition_list -> type_definition_list SEMICOLON type_definition
Rule 30    type_definition -> identifier EQUAL type
Rule 31    variable_declaration_part -> VAR variable_declaration_list SEMICOLON
Rule 32    variable_declaration_list -> variable_declaration
Rule 33    variable_declaration_list -> variable_declaration_list SEMICOLON variable_declaration
Rule 34    variable_declaration -> identifier_list COLON type
Rule 35    procedure_and_function_declaration_part -> procedure_declaration SEMICOLON
Rule 36    procedure_and_function_declaration_part -> function_declaration SEMICOLON
Rule 37    procedure_declaration -> procedure_heading SEMICOLON procedure_body
Rule 38    procedure_declaration -> procedure_heading SEMICOLON directive
Rule 39    procedure_declaration -> procedure_identification SEMICOLON procedure_body
Rule 40    procedure_body -> block
Rule 41    function_declaration -> function_heading SEMICOLON function_body
Rule 42    function_declaration -> function_heading SEMICOLON directive
Rule 43    function_declaration -> function_identification SEMICOLON function_body
Rule 44    function_body -> block
Rule 45    directive -> FORWARD
Rule 46    statement_part -> BEGIN statement_sequence END
Rule 47    procedure_heading -> PROCEDURE identifier
Rule 48    procedure_heading -> PROCEDURE identifier formal_parameter_list
Rule 49    function_heading -> FUNCTION identifier COLON result_type
Rule 50    function_heading -> FUNCTION identifier formal_parameter_list COLON result_type
Rule 51    result_type -> type_identifier
Rule 52    procedure_identification -> PROCEDURE procedure_identifier
Rule 53    function_identification -> FUNCTION function_identifier
Rule 54    formal_parameter_list -> LPAREN formal_parameter_section_list RPAREN
Rule 55    formal_parameter_section_list -> formal_parameter_section
Rule 56    formal_parameter_section_list -> formal_parameter_section_list SEMICOLON formal_parameter_section
Rule 57    formal_parameter_section -> value_parameter_section
Rule 58    formal_parameter_section -> variable_parameter_section
Rule 59    formal_parameter_section -> procedure_parameter_section
Rule 60    formal_parameter_section -> function_parameter_section
Rule 61    value_parameter_section -> identifier_list COLON parameter_type
Rule 62    variable_parameter_section -> VAR identifier_list COLON parameter_type
Rule 63    procedure_parameter_section -> procedure_heading
Rule 64    function_parameter_section -> function_heading
Rule 65    parameter_type -> type_identifier
Rule 66    parameter_type -> conformant_array_schema
Rule 67    conformant_array_schema -> packed_conformant_array_schema
Rule 68    conformant_array_schema -> unpacked_conformant_array_schema
Rule 69    packed_conformant_array_schema -> PACKED ARRAY LBRACKET bound_specification RBRACKET OF type_identifier
Rule 70    unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF type_identifier
Rule 71    unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF conformant_array_schema
Rule 72    bound_specification_list -> bound_specification
Rule 73    bound_specification_list -> bound_specification_list SEMICOLON bound_specification
Rule 74    bound_specification -> identifier RANGE_OPERATOR identifier SEMICOLON ordinal_type_identifier
Rule 75    ordinal_type_identifier -> type_identifier
Rule 76    statement_sequence -> statement
Rule 77    statement_sequence -> statement SEMICOLON statement
Rule 78    statement -> label COLON simple_statement
Rule 79    statement -> label COLON structured_statement
Rule 80    statement -> simple_statement
Rule 81    statement -> structured_statement
Rule 82    simple_statement -> assignment_statement
Rule 83    simple_statement -> procedure_statement
Rule 84    simple_statement -> goto_statement
Rule 85    assignment_statement -> variable ASSIGN expression
Rule 86    assignment_statement -> function_identifier ASSIGN expression
Rule 87    procedure_statement -> procedure_identifier
Rule 88    procedure_statement -> procedure_identifier actual_parameter_list
Rule 89    goto_statement -> GOTO label
Rule 90    structured_statement -> compound_statement
Rule 91    structured_statement -> repetitive_statement
Rule 92    structured_statement -> conditional_statement
Rule 93    structured_statement -> with_statement
Rule 94    compound_statement -> BEGIN statement_sequence END
Rule 95    repetitive_statement -> while_statement
Rule 96    repetitive_statement -> repeat_statement
Rule 97    repetitive_statement -> for_statement
Rule 98    while_statement -> WHILE expression DO statement
Rule 99    repeat_statement -> REPEAT statement_sequence UNTIL expression
Rule 100   for_statement -> FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
Rule 101   for_statement -> FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
Rule 102   initial_expression -> expression
Rule 103   final_expression -> expression
Rule 104   conditional_statement -> if_statement
Rule 105   conditional_statement -> case_statement
Rule 106   if_statement -> IF expression THEN statement
Rule 107   if_statement -> IF expression THEN statement ELSE statement
Rule 108   case_statement -> CASE expression OF case_limb_list END
Rule 109   case_statement -> CASE expression OF case_limb_list SEMICOLON END
Rule 110   case_limb_list -> case_limb
Rule 111   case_limb_list -> case_limb_list SEMICOLON case_limb
Rule 112   case_limb -> case_label_list COLON statement
Rule 113   case_label_list -> constant
Rule 114   case_label_list -> case_label_list COMMA constant
Rule 115   with_statement -> WITH record_variable_list DO statement
Rule 116   record_variable_list -> record_variable
Rule 117   record_variable_list -> record_variable_list COMMA record_variable
Rule 118   actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN
Rule 119   actual_parameter_list2 -> actual_parameter
Rule 120   actual_parameter_list2 -> actual_parameter_list2 COMMA actual_parameter
Rule 121   actual_parameter -> actual_value
Rule 122   actual_parameter -> actual_variable
Rule 123   actual_parameter -> actual_procedure
Rule 124   actual_parameter -> actual_function
Rule 125   actual_value -> expression
Rule 126   actual_procedure -> procedure_identifier
Rule 127   actual_function -> function_identifier
Rule 128   expression -> simple_expression
Rule 129   expression -> simple_expression relational_operator simple_expression
Rule 130   simple_expression -> sign term_list
Rule 131   simple_expression -> term_list
Rule 132   term_list -> term
Rule 133   term_list -> term_list addition_operator term
Rule 134   term -> factor
Rule 135   term -> term multiplication_operator factor
Rule 136   factor -> variable
Rule 137   factor -> number
Rule 138   factor -> string
Rule 139   factor -> set
Rule 140   factor -> NIL
Rule 141   factor -> constant_identifier
Rule 142   factor -> bound_identifier
Rule 143   factor -> function_designator
Rule 144   factor -> LPAREN expression RPAREN
Rule 145   factor -> NOT factor
Rule 146   relational_operator -> EQUAL
Rule 147   relational_operator -> NOTEQUAL
Rule 148   relational_operator -> LESS
Rule 149   relational_operator -> LESSEQUAL
Rule 150   relational_operator -> GREATER
Rule 151   relational_operator -> GREATEREQUAL
Rule 152   relational_operator -> IN
Rule 153   addition_operator -> PLUS
Rule 154   addition_operator -> MINUS
Rule 155   addition_operator -> OR
Rule 156   multiplication_operator -> TIMES
Rule 157   multiplication_operator -> DIVIDE
Rule 158   multiplication_operator -> DIV
Rule 159   multiplication_operator -> MOD
Rule 160   multiplication_operator -> AND
Rule 161   variable -> entire_variable
Rule 162   variable -> component_variable
Rule 163   variable -> referenced_variable
Rule 164   entire_variable -> variable_identifier
Rule 165   entire_variable -> field_identifier
Rule 166   component_variable -> indexed_variable
Rule 167   component_variable -> field_designator
Rule 168   component_variable -> file_buffer
Rule 169   indexed_variable -> array_variable LBRACKET expression_list RBRACKET
Rule 170   field_designator -> record_variable DOT field_identifier
Rule 171   set -> LBRACKET element_list RBRACKET
Rule 172   element_list -> <empty>
Rule 173   element_list -> expression_list
Rule 174   function_designator -> function_identifier
Rule 175   function_designator -> function_identifier actual_parameter_list
Rule 176   file_buffer -> file_variable UPARROW
Rule 177   type -> simple_type
Rule 178   type -> structured_type
Rule 179   type -> pointer_type
Rule 180   type -> type_identifier
Rule 181   simple_type -> subrange_type
Rule 182   simple_type -> enumerated_type
Rule 183   enumerated_type -> LPAREN identifier_list RPAREN
Rule 184   subrange_type -> lower_bound RANGE_OPERATOR upper_bound
Rule 185   lower_bound -> constant
Rule 186   upper_bound -> constant
Rule 187   structured_type -> PACKED unpacked_structured_type
Rule 188   structured_type -> unpacked_structured_type
Rule 189   unpacked_structured_type -> array_type
Rule 190   unpacked_structured_type -> record_type
Rule 191   unpacked_structured_type -> set_type
Rule 192   unpacked_structured_type -> file_type
Rule 193   array_type -> ARRAY LBRACKET index_type_list RBRACKET OF element_type
Rule 194   index_type_list -> index_type
Rule 195   index_type_list -> index_type_list COMMA index_type
Rule 196   index_type -> simple_type
Rule 197   element_type -> type
Rule 198   record_type -> RECORD field_list END
Rule 199   set_type -> SET OF base_type
Rule 200   base_type -> type
Rule 201   file_type -> FILE OF file_component_type
Rule 202   file_component_type -> type
Rule 203   pointer_type -> UPARROW type_identifier
Rule 204   field_list -> <empty>
Rule 205   field_list -> fixed_part
Rule 206   field_list -> fixed_part SEMICOLON variant_part
Rule 207   field_list -> fixed_part SEMICOLON variant_part SEMICOLON
Rule 208   field_list -> variant_part
Rule 209   field_list -> variant_part SEMICOLON
Rule 210   fixed_part -> record_section
Rule 211   fixed_part -> fixed_part SEMICOLON record_section
Rule 212   record_section -> identifier_list COLON type
Rule 213   variant_part -> CASE tag_field type_identifier OF variant_list
Rule 214   variant_list -> variant
Rule 215   variant_list -> variant_list SEMICOLON variant
Rule 216   tag_field -> <empty>
Rule 217   tag_field -> identifier COLON
Rule 218   variant -> case_label_list SEMICOLON LPAREN field_list RPAREN
Rule 219   output_list -> output_value
Rule 220   output_list -> output_list COMMA output_value
Rule 221   output_value -> expression
Rule 222   output_value -> expression SEMICOLON field_width
Rule 223   output_value -> expression SEMICOLON field_width COLON fraction_length
Rule 224   field_width -> expression
Rule 225   fraction_length -> expression
Rule 226   identifier -> ID
Rule 227   file_variable -> variable
Rule 228   referenced_variable -> pointer_variable UPARROW
Rule 229   record_variable -> variable
Rule 230   pointer_variable -> variable
Rule 231   actual_variable -> variable
Rule 232   array_variable -> variable
Rule 233   field_identifier -> identifier
Rule 234   constant_identifier -> identifier
Rule 235   variable_identifier -> identifier
Rule 236   type_identifier -> identifier
Rule 237   procedure_identifier -> identifier
Rule 238   function_identifier -> identifier
Rule 239   bound_identifier -> identifier
Rule 240   variable_list -> variable
Rule 241   variable_list -> variable_list COMMA variable
Rule 242   identifier_list -> identifier
Rule 243   identifier_list -> identifier_list COMMA identifier
Rule 244   expression_list -> expression
Rule 245   expression_list -> expression_list COMMA expression
Rule 246   number -> integer_number
Rule 247   number -> real_number
Rule 248   integer_number -> digit_sequence
Rule 249   real_number -> digit_sequence DOT
Rule 250   real_number -> digit_sequence DOT digit_sequence
Rule 251   real_number -> digit_sequence DOT digit_sequence scale_factor
Rule 252   real_number -> digit_sequence DOT scale_factor
Rule 253   real_number -> digit_sequence scale_factor
Rule 254   scale_factor -> digit_sequence DOT
Rule 255   scale_factor -> digit_sequence DOT digit_sequence
Rule 256   scale_factor -> digit_sequence DOT digit_sequence scale_factor
Rule 257   scale_factor -> digit_sequence DOT scale_factor
Rule 258   scale_factor -> digit_sequence scale_factor
Rule 259   unsigned_digit_sequence -> digit
Rule 260   unsigned_digit_sequence -> unsigned_digit_sequence digit
Rule 261   digit_sequence -> sign unsigned_digit_sequence
Rule 262   digit_sequence -> unsigned_digit_sequence
Rule 263   sign -> PLUS
Rule 264   sign -> MINUS
Rule 265   letter -> LETTER
Rule 266   digit -> NUMBER
Rule 267   string -> QUOTE string_character_list QUOTE
Rule 268   string_character_list -> string_character
Rule 269   string_character_list -> string_character_list string_character
Rule 270   string_character -> ANY_CHARACTER_EXCEPT_QUOTE
Rule 271   string_character -> SQUOTE SQUOTE
Rule 272   label -> integer_number
Rule 273   constant -> sign constant_identifier
Rule 274   constant -> sign number
Rule 275   constant -> constant_identifier
Rule 276   constant -> number
Rule 277   constant -> string

Terminals, with rules where they appear

ABSOLUTE             : 
AMPERSANT            : 
AND                  : 160
ANY_CHARACTER_EXCEPT_QUOTE : 270
ARRAY                : 69 70 71 193
ASM                  : 
ASSIGN               : 85 86 100 101
AT                   : 
BEGIN                : 46 94
BUCKS                : 
CASE                 : 108 109 213
COLON                : 34 49 50 61 62 78 79 112 212 217 223
COMMA                : 22 114 117 120 195 220 241 243 245
CONST                : 23
CONSTRUCTOR          : 
DESTRUCTOR           : 
DIGIT                : 
DIV                  : 158
DIVIDE               : 157
DIVIDEEQUAL          : 
DO                   : 98 100 101 115
DOT                  : 1 170 249 250 251 252 254 255 256 257
DOWNTO               : 101
ELSE                 : 107
END                  : 46 94 108 109 198
EQUAL                : 26 30 146
FILE                 : 201
FOR                  : 100 101
FORWARD              : 45
FUNCTION             : 49 50 53
GOTO                 : 89
GREATER              : 150
GREATEREQUAL         : 151
HASHTAG              : 
ID                   : 226
IF                   : 106 107
IMPLEMENTATION       : 
IN                   : 152
INHERITED            : 
INLINE               : 
INTERFACE            : 
LABEL                : 20
LBLOCK               : 
LBRACKET             : 69 70 71 169 171 193
LESS                 : 148
LESSEQUAL            : 149
LETTER               : 265
LPAREN               : 3 54 118 144 183 218
MINUS                : 154 264
MINUSEQUAL           : 
MOD                  : 159
NIL                  : 140
NOT                  : 145
NOTEQUAL             : 147
NUMBER               : 266
OBJECT               : 
OF                   : 69 70 71 108 109 193 199 201 213
OPERATOR             : 
OR                   : 155
PACKED               : 69 187
PERCENT              : 
PLUS                 : 153 263
PLUSEQUAL            : 
PROCEDURE            : 47 48 52
PROGRAM              : 2 3
QUOTE                : 267 267
RANGE_OPERATOR       : 74 184
RBLOCK               : 
RBRACKET             : 69 70 71 169 171 193
RECORD               : 198
REINTRODUCE          : 
REPEAT               : 99
RPAREN               : 3 54 118 144 183 218
SELF                 : 
SEMICOLON            : 2 3 20 23 25 27 29 31 33 35 36 37 38 39 41 42 43 56 73 74 77 109 111 206 207 207 209 211 215 218 222 223
SET                  : 199
SHL                  : 
SHR                  : 
SQUOTE               : 271 271
STRING               : 
THEN                 : 106 107
TIMES                : 156
TIMESEQUAL           : 
TO                   : 100
TYPE                 : 27
UNIT                 : 
UNTIL                : 99
UPARROW              : 176 203 228
USES                 : 
VAR                  : 31 62
WHILE                : 98
WITH                 : 115
XOR                  : 
error                : 

Nonterminals, with rules where they appear

actual_function      : 124
actual_parameter     : 119 120
actual_parameter_list : 88 175
actual_parameter_list2 : 118 120
actual_procedure     : 123
actual_value         : 121
actual_variable      : 122
addition_operator    : 133
array_type           : 189
array_variable       : 169
assignment_statement : 82
base_type            : 199
block                : 1 40 44
bound_identifier     : 142
bound_specification  : 69 72 73
bound_specification_list : 70 71 73
case_label_list      : 112 114 218
case_limb            : 110 111
case_limb_list       : 108 109 111
case_statement       : 105
component_variable   : 162
compound_statement   : 90
conditional_statement : 92
conformant_array_schema : 66 71
constant             : 26 113 114 185 186
constant_definition  : 24 25
constant_definition_list : 23 25
constant_definition_part : 6 9 10 11 13 14 15 16
constant_identifier  : 141 273 275
declaration_part     : 4
digit                : 259 260
digit_sequence       : 248 249 250 250 251 251 252 253 254 255 255 256 256 257 258
directive            : 38 42
element_list         : 171
element_type         : 193
entire_variable      : 161
enumerated_type      : 182
expression           : 85 86 98 99 102 103 106 107 108 109 125 144 221 222 223 224 225 244 245
expression_list      : 169 173 245
factor               : 134 135 145
field_designator     : 167
field_identifier     : 165 170
field_list           : 198 218
field_width          : 222 223
file_buffer          : 168
file_component_type  : 201
file_type            : 192
file_variable        : 176
final_expression     : 100 101
fixed_part           : 205 206 207 211
for_statement        : 97
formal_parameter_list : 48 50
formal_parameter_section : 55 56
formal_parameter_section_list : 54 56
fraction_length      : 223
function_body        : 41 43
function_declaration : 36
function_designator  : 143
function_heading     : 41 42 64
function_identification : 43
function_identifier  : 53 86 127 174 175
function_parameter_section : 60
goto_statement       : 84
identifier           : 2 3 26 30 47 48 49 50 74 74 217 233 234 235 236 237 238 239 242 243
identifier_list      : 3 34 61 62 183 212 243
if_statement         : 104
index_type           : 194 195
index_type_list      : 193 195
indexed_variable     : 166
initial_expression   : 100 101
integer_number       : 246 272
label                : 21 22 78 79 89
label_declaration_part : 5 6 7 8 9 10 11 12
label_list           : 20 22
letter               : 
lower_bound          : 184
multiplication_operator : 135
number               : 137 274 276
ordinal_type_identifier : 74
output_list          : 220
output_value         : 219 220
packed_conformant_array_schema : 67
parameter_type       : 61 62
pointer_type         : 179
pointer_variable     : 228
procedure_and_function_declaration_part : 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
procedure_body       : 37 39
procedure_declaration : 35
procedure_heading    : 37 38 63
procedure_identification : 39
procedure_identifier : 52 87 88 126
procedure_parameter_section : 59
procedure_statement  : 83
program              : 0
program_heading      : 1
real_number          : 247
record_section       : 210 211
record_type          : 190
record_variable      : 116 117 170
record_variable_list : 115 117
referenced_variable  : 163
relational_operator  : 129
repeat_statement     : 96
repetitive_statement : 91
result_type          : 49 50
scale_factor         : 251 252 253 256 257 258
set                  : 139
set_type             : 191
sign                 : 130 261 273 274
simple_expression    : 128 129 129
simple_statement     : 78 80
simple_type          : 177 196
statement            : 76 77 77 98 100 101 106 107 107 112 115
statement_part       : 4
statement_sequence   : 46 94 99
string               : 138 277
string_character     : 268 269
string_character_list : 267 269
structured_statement : 79 81
structured_type      : 178
subrange_type        : 181
tag_field            : 213
term                 : 132 133 135
term_list            : 130 131 133
type                 : 30 34 197 200 202 212
type_definition      : 28 29
type_definition_list : 27 29
type_definition_part : 7 9 10 12 14 16 17 18
type_identifier      : 51 65 69 70 75 180 203 213
unpacked_conformant_array_schema : 68
unpacked_structured_type : 187 188
unsigned_digit_sequence : 260 261 262
upper_bound          : 184
value_parameter_section : 57
variable             : 85 136 227 229 230 231 232 240 241
variable_declaration : 32 33
variable_declaration_list : 31 33
variable_declaration_part : 8 10 11 12 15 16 18
variable_identifier  : 100 101 164
variable_list        : 241
variable_parameter_section : 58
variant              : 214 215
variant_list         : 213 215
variant_part         : 206 207 208 209
while_statement      : 95
with_statement       : 93

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_heading block DOT
    (2) program_heading -> . PROGRAM identifier SEMICOLON
    (3) program_heading -> . PROGRAM identifier LPAREN identifier_list RPAREN SEMICOLON

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    program_heading                shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_heading . block DOT
    (4) block -> . declaration_part statement_part
    (5) declaration_part -> . label_declaration_part procedure_and_function_declaration_part
    (6) declaration_part -> . label_declaration_part constant_definition_part procedure_and_function_declaration_part
    (7) declaration_part -> . label_declaration_part type_definition_part procedure_and_function_declaration_part
    (8) declaration_part -> . label_declaration_part variable_declaration_part procedure_and_function_declaration_part
    (9) declaration_part -> . label_declaration_part constant_definition_part type_definition_part procedure_and_function_declaration_part
    (10) declaration_part -> . label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (11) declaration_part -> . label_declaration_part constant_definition_part variable_declaration_part procedure_and_function_declaration_part
    (12) declaration_part -> . label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (13) declaration_part -> . constant_definition_part procedure_and_function_declaration_part
    (14) declaration_part -> . constant_definition_part type_definition_part procedure_and_function_declaration_part
    (15) declaration_part -> . constant_definition_part variable_declaration_part procedure_and_function_declaration_part
    (16) declaration_part -> . constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (17) declaration_part -> . type_definition_part procedure_and_function_declaration_part
    (18) declaration_part -> . type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (19) declaration_part -> . procedure_and_function_declaration_part
    (20) label_declaration_part -> . LABEL label_list SEMICOLON
    (23) constant_definition_part -> . CONST constant_definition_list SEMICOLON
    (27) type_definition_part -> . TYPE type_definition_list SEMICOLON
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    LABEL           shift and go to state 10
    CONST           shift and go to state 11
    TYPE            shift and go to state 12
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    block                          shift and go to state 4
    declaration_part               shift and go to state 5
    label_declaration_part         shift and go to state 6
    procedure_and_function_declaration_part shift and go to state 7
    constant_definition_part       shift and go to state 8
    type_definition_part           shift and go to state 9
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 3

    (2) program_heading -> PROGRAM . identifier SEMICOLON
    (3) program_heading -> PROGRAM . identifier LPAREN identifier_list RPAREN SEMICOLON
    (226) identifier -> . ID

    ID              shift and go to state 22

    identifier                     shift and go to state 21

state 4

    (1) program -> program_heading block . DOT

    DOT             shift and go to state 23


state 5

    (4) block -> declaration_part . statement_part
    (46) statement_part -> . BEGIN statement_sequence END

    BEGIN           shift and go to state 25

    statement_part                 shift and go to state 24

state 6

    (5) declaration_part -> label_declaration_part . procedure_and_function_declaration_part
    (6) declaration_part -> label_declaration_part . constant_definition_part procedure_and_function_declaration_part
    (7) declaration_part -> label_declaration_part . type_definition_part procedure_and_function_declaration_part
    (8) declaration_part -> label_declaration_part . variable_declaration_part procedure_and_function_declaration_part
    (9) declaration_part -> label_declaration_part . constant_definition_part type_definition_part procedure_and_function_declaration_part
    (10) declaration_part -> label_declaration_part . constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (11) declaration_part -> label_declaration_part . constant_definition_part variable_declaration_part procedure_and_function_declaration_part
    (12) declaration_part -> label_declaration_part . type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (23) constant_definition_part -> . CONST constant_definition_list SEMICOLON
    (27) type_definition_part -> . TYPE type_definition_list SEMICOLON
    (31) variable_declaration_part -> . VAR variable_declaration_list SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    CONST           shift and go to state 11
    TYPE            shift and go to state 12
    VAR             shift and go to state 30
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 26
    constant_definition_part       shift and go to state 27
    type_definition_part           shift and go to state 28
    variable_declaration_part      shift and go to state 29
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 7

    (19) declaration_part -> procedure_and_function_declaration_part .

    BEGIN           reduce using rule 19 (declaration_part -> procedure_and_function_declaration_part .)


state 8

    (13) declaration_part -> constant_definition_part . procedure_and_function_declaration_part
    (14) declaration_part -> constant_definition_part . type_definition_part procedure_and_function_declaration_part
    (15) declaration_part -> constant_definition_part . variable_declaration_part procedure_and_function_declaration_part
    (16) declaration_part -> constant_definition_part . type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (27) type_definition_part -> . TYPE type_definition_list SEMICOLON
    (31) variable_declaration_part -> . VAR variable_declaration_list SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    TYPE            shift and go to state 12
    VAR             shift and go to state 30
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 31
    type_definition_part           shift and go to state 32
    variable_declaration_part      shift and go to state 33
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 9

    (17) declaration_part -> type_definition_part . procedure_and_function_declaration_part
    (18) declaration_part -> type_definition_part . variable_declaration_part procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (31) variable_declaration_part -> . VAR variable_declaration_list SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    VAR             shift and go to state 30
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 34
    variable_declaration_part      shift and go to state 35
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 10

    (20) label_declaration_part -> LABEL . label_list SEMICOLON
    (21) label_list -> . label
    (22) label_list -> . label_list COMMA label
    (272) label -> . integer_number
    (248) integer_number -> . digit_sequence
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

    label_list                     shift and go to state 36
    label                          shift and go to state 37
    integer_number                 shift and go to state 38
    digit_sequence                 shift and go to state 39
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 11

    (23) constant_definition_part -> CONST . constant_definition_list SEMICOLON
    (24) constant_definition_list -> . constant_definition
    (25) constant_definition_list -> . constant_definition_list SEMICOLON constant_definition
    (26) constant_definition -> . identifier EQUAL constant
    (226) identifier -> . ID

    ID              shift and go to state 22

    constant_definition_list       shift and go to state 46
    constant_definition            shift and go to state 47
    identifier                     shift and go to state 48

state 12

    (27) type_definition_part -> TYPE . type_definition_list SEMICOLON
    (28) type_definition_list -> . type_definition
    (29) type_definition_list -> . type_definition_list SEMICOLON type_definition
    (30) type_definition -> . identifier EQUAL type
    (226) identifier -> . ID

    ID              shift and go to state 22

    type_definition_list           shift and go to state 49
    type_definition                shift and go to state 50
    identifier                     shift and go to state 51

state 13

    (35) procedure_and_function_declaration_part -> procedure_declaration . SEMICOLON

    SEMICOLON       shift and go to state 52


state 14

    (36) procedure_and_function_declaration_part -> function_declaration . SEMICOLON

    SEMICOLON       shift and go to state 53


state 15

    (37) procedure_declaration -> procedure_heading . SEMICOLON procedure_body
    (38) procedure_declaration -> procedure_heading . SEMICOLON directive

    SEMICOLON       shift and go to state 54


state 16

    (39) procedure_declaration -> procedure_identification . SEMICOLON procedure_body

    SEMICOLON       shift and go to state 55


state 17

    (41) function_declaration -> function_heading . SEMICOLON function_body
    (42) function_declaration -> function_heading . SEMICOLON directive

    SEMICOLON       shift and go to state 56


state 18

    (43) function_declaration -> function_identification . SEMICOLON function_body

    SEMICOLON       shift and go to state 57


state 19

    (47) procedure_heading -> PROCEDURE . identifier
    (48) procedure_heading -> PROCEDURE . identifier formal_parameter_list
    (52) procedure_identification -> PROCEDURE . procedure_identifier
    (226) identifier -> . ID
    (237) procedure_identifier -> . identifier

    ID              shift and go to state 22

    identifier                     shift and go to state 58
    procedure_identifier           shift and go to state 59

state 20

    (49) function_heading -> FUNCTION . identifier COLON result_type
    (50) function_heading -> FUNCTION . identifier formal_parameter_list COLON result_type
    (53) function_identification -> FUNCTION . function_identifier
    (226) identifier -> . ID
    (238) function_identifier -> . identifier

    ID              shift and go to state 22

    identifier                     shift and go to state 60
    function_identifier            shift and go to state 61

state 21

    (2) program_heading -> PROGRAM identifier . SEMICOLON
    (3) program_heading -> PROGRAM identifier . LPAREN identifier_list RPAREN SEMICOLON

    SEMICOLON       shift and go to state 62
    LPAREN          shift and go to state 63


state 22

    (226) identifier -> ID .

    SEMICOLON       reduce using rule 226 (identifier -> ID .)
    LPAREN          reduce using rule 226 (identifier -> ID .)
    EQUAL           reduce using rule 226 (identifier -> ID .)
    COLON           reduce using rule 226 (identifier -> ID .)
    ASSIGN          reduce using rule 226 (identifier -> ID .)
    END             reduce using rule 226 (identifier -> ID .)
    UPARROW         reduce using rule 226 (identifier -> ID .)
    LBRACKET        reduce using rule 226 (identifier -> ID .)
    DOT             reduce using rule 226 (identifier -> ID .)
    COMMA           reduce using rule 226 (identifier -> ID .)
    RPAREN          reduce using rule 226 (identifier -> ID .)
    DO              reduce using rule 226 (identifier -> ID .)
    TIMES           reduce using rule 226 (identifier -> ID .)
    DIVIDE          reduce using rule 226 (identifier -> ID .)
    DIV             reduce using rule 226 (identifier -> ID .)
    MOD             reduce using rule 226 (identifier -> ID .)
    AND             reduce using rule 226 (identifier -> ID .)
    PLUS            reduce using rule 226 (identifier -> ID .)
    MINUS           reduce using rule 226 (identifier -> ID .)
    OR              reduce using rule 226 (identifier -> ID .)
    NOTEQUAL        reduce using rule 226 (identifier -> ID .)
    LESS            reduce using rule 226 (identifier -> ID .)
    LESSEQUAL       reduce using rule 226 (identifier -> ID .)
    GREATER         reduce using rule 226 (identifier -> ID .)
    GREATEREQUAL    reduce using rule 226 (identifier -> ID .)
    IN              reduce using rule 226 (identifier -> ID .)
    UNTIL           reduce using rule 226 (identifier -> ID .)
    THEN            reduce using rule 226 (identifier -> ID .)
    OF              reduce using rule 226 (identifier -> ID .)
    RANGE_OPERATOR  reduce using rule 226 (identifier -> ID .)
    ELSE            reduce using rule 226 (identifier -> ID .)
    RBRACKET        reduce using rule 226 (identifier -> ID .)
    TO              reduce using rule 226 (identifier -> ID .)
    DOWNTO          reduce using rule 226 (identifier -> ID .)


state 23

    (1) program -> program_heading block DOT .

    $end            reduce using rule 1 (program -> program_heading block DOT .)


state 24

    (4) block -> declaration_part statement_part .

    DOT             reduce using rule 4 (block -> declaration_part statement_part .)
    SEMICOLON       reduce using rule 4 (block -> declaration_part statement_part .)


state 25

    (46) statement_part -> BEGIN . statement_sequence END
    (76) statement_sequence -> . statement
    (77) statement_sequence -> . statement SEMICOLON statement
    (78) statement -> . label COLON simple_statement
    (79) statement -> . label COLON structured_statement
    (80) statement -> . simple_statement
    (81) statement -> . structured_statement
    (272) label -> . integer_number
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (248) integer_number -> . digit_sequence
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (266) digit -> . NUMBER
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    statement_sequence             shift and go to state 65
    statement                      shift and go to state 66
    label                          shift and go to state 67
    simple_statement               shift and go to state 68
    structured_statement           shift and go to state 69
    integer_number                 shift and go to state 38
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    digit_sequence                 shift and go to state 39
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    variable_identifier            shift and go to state 94
    digit                          shift and go to state 44
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 26

    (5) declaration_part -> label_declaration_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 5 (declaration_part -> label_declaration_part procedure_and_function_declaration_part .)


state 27

    (6) declaration_part -> label_declaration_part constant_definition_part . procedure_and_function_declaration_part
    (9) declaration_part -> label_declaration_part constant_definition_part . type_definition_part procedure_and_function_declaration_part
    (10) declaration_part -> label_declaration_part constant_definition_part . type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (11) declaration_part -> label_declaration_part constant_definition_part . variable_declaration_part procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (27) type_definition_part -> . TYPE type_definition_list SEMICOLON
    (31) variable_declaration_part -> . VAR variable_declaration_list SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    TYPE            shift and go to state 12
    VAR             shift and go to state 30
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 105
    type_definition_part           shift and go to state 106
    variable_declaration_part      shift and go to state 107
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 28

    (7) declaration_part -> label_declaration_part type_definition_part . procedure_and_function_declaration_part
    (12) declaration_part -> label_declaration_part type_definition_part . variable_declaration_part procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (31) variable_declaration_part -> . VAR variable_declaration_list SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    VAR             shift and go to state 30
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 108
    variable_declaration_part      shift and go to state 109
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 29

    (8) declaration_part -> label_declaration_part variable_declaration_part . procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 110
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 30

    (31) variable_declaration_part -> VAR . variable_declaration_list SEMICOLON
    (32) variable_declaration_list -> . variable_declaration
    (33) variable_declaration_list -> . variable_declaration_list SEMICOLON variable_declaration
    (34) variable_declaration -> . identifier_list COLON type
    (242) identifier_list -> . identifier
    (243) identifier_list -> . identifier_list COMMA identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    variable_declaration_list      shift and go to state 111
    variable_declaration           shift and go to state 112
    identifier_list                shift and go to state 113
    identifier                     shift and go to state 114

state 31

    (13) declaration_part -> constant_definition_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 13 (declaration_part -> constant_definition_part procedure_and_function_declaration_part .)


state 32

    (14) declaration_part -> constant_definition_part type_definition_part . procedure_and_function_declaration_part
    (16) declaration_part -> constant_definition_part type_definition_part . variable_declaration_part procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (31) variable_declaration_part -> . VAR variable_declaration_list SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    VAR             shift and go to state 30
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 115
    variable_declaration_part      shift and go to state 116
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 33

    (15) declaration_part -> constant_definition_part variable_declaration_part . procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 117
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 34

    (17) declaration_part -> type_definition_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 17 (declaration_part -> type_definition_part procedure_and_function_declaration_part .)


state 35

    (18) declaration_part -> type_definition_part variable_declaration_part . procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 118
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 36

    (20) label_declaration_part -> LABEL label_list . SEMICOLON
    (22) label_list -> label_list . COMMA label

    SEMICOLON       shift and go to state 119
    COMMA           shift and go to state 120


state 37

    (21) label_list -> label .

    SEMICOLON       reduce using rule 21 (label_list -> label .)
    COMMA           reduce using rule 21 (label_list -> label .)


state 38

    (272) label -> integer_number .

    SEMICOLON       reduce using rule 272 (label -> integer_number .)
    COMMA           reduce using rule 272 (label -> integer_number .)
    COLON           reduce using rule 272 (label -> integer_number .)
    END             reduce using rule 272 (label -> integer_number .)
    UNTIL           reduce using rule 272 (label -> integer_number .)
    ELSE            reduce using rule 272 (label -> integer_number .)


state 39

    (248) integer_number -> digit_sequence .

    SEMICOLON       reduce using rule 248 (integer_number -> digit_sequence .)
    COMMA           reduce using rule 248 (integer_number -> digit_sequence .)
    COLON           reduce using rule 248 (integer_number -> digit_sequence .)
    END             reduce using rule 248 (integer_number -> digit_sequence .)
    UNTIL           reduce using rule 248 (integer_number -> digit_sequence .)
    ELSE            reduce using rule 248 (integer_number -> digit_sequence .)


state 40

    (261) digit_sequence -> sign . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    NUMBER          shift and go to state 45

    unsigned_digit_sequence        shift and go to state 121
    digit                          shift and go to state 44

state 41

    (262) digit_sequence -> unsigned_digit_sequence .
    (260) unsigned_digit_sequence -> unsigned_digit_sequence . digit
    (266) digit -> . NUMBER

  ! shift/reduce conflict for NUMBER resolved as shift
    SEMICOLON       reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    COMMA           reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    COLON           reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    END             reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    UNTIL           reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    ELSE            reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    DOT             reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    PLUS            reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    MINUS           reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    TIMES           reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    DIVIDE          reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    DIV             reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    MOD             reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    AND             reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    OR              reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    EQUAL           reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    NOTEQUAL        reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    LESS            reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    LESSEQUAL       reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    GREATER         reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    GREATEREQUAL    reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    IN              reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    DO              reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    THEN            reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    OF              reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    RANGE_OPERATOR  reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    RPAREN          reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    RBRACKET        reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    TO              reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    DOWNTO          reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .)
    NUMBER          shift and go to state 45

  ! NUMBER          [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]

    digit                          shift and go to state 122

state 42

    (263) sign -> PLUS .

    NUMBER          reduce using rule 263 (sign -> PLUS .)
    NIL             reduce using rule 263 (sign -> PLUS .)
    LPAREN          reduce using rule 263 (sign -> PLUS .)
    NOT             reduce using rule 263 (sign -> PLUS .)
    QUOTE           reduce using rule 263 (sign -> PLUS .)
    LBRACKET        reduce using rule 263 (sign -> PLUS .)
    ID              reduce using rule 263 (sign -> PLUS .)
    PLUS            reduce using rule 263 (sign -> PLUS .)
    MINUS           reduce using rule 263 (sign -> PLUS .)


state 43

    (264) sign -> MINUS .

    NUMBER          reduce using rule 264 (sign -> MINUS .)
    NIL             reduce using rule 264 (sign -> MINUS .)
    LPAREN          reduce using rule 264 (sign -> MINUS .)
    NOT             reduce using rule 264 (sign -> MINUS .)
    QUOTE           reduce using rule 264 (sign -> MINUS .)
    LBRACKET        reduce using rule 264 (sign -> MINUS .)
    ID              reduce using rule 264 (sign -> MINUS .)
    PLUS            reduce using rule 264 (sign -> MINUS .)
    MINUS           reduce using rule 264 (sign -> MINUS .)


state 44

    (259) unsigned_digit_sequence -> digit .

    NUMBER          reduce using rule 259 (unsigned_digit_sequence -> digit .)
    SEMICOLON       reduce using rule 259 (unsigned_digit_sequence -> digit .)
    COMMA           reduce using rule 259 (unsigned_digit_sequence -> digit .)
    COLON           reduce using rule 259 (unsigned_digit_sequence -> digit .)
    END             reduce using rule 259 (unsigned_digit_sequence -> digit .)
    UNTIL           reduce using rule 259 (unsigned_digit_sequence -> digit .)
    ELSE            reduce using rule 259 (unsigned_digit_sequence -> digit .)
    DOT             reduce using rule 259 (unsigned_digit_sequence -> digit .)
    PLUS            reduce using rule 259 (unsigned_digit_sequence -> digit .)
    MINUS           reduce using rule 259 (unsigned_digit_sequence -> digit .)
    TIMES           reduce using rule 259 (unsigned_digit_sequence -> digit .)
    DIVIDE          reduce using rule 259 (unsigned_digit_sequence -> digit .)
    DIV             reduce using rule 259 (unsigned_digit_sequence -> digit .)
    MOD             reduce using rule 259 (unsigned_digit_sequence -> digit .)
    AND             reduce using rule 259 (unsigned_digit_sequence -> digit .)
    OR              reduce using rule 259 (unsigned_digit_sequence -> digit .)
    EQUAL           reduce using rule 259 (unsigned_digit_sequence -> digit .)
    NOTEQUAL        reduce using rule 259 (unsigned_digit_sequence -> digit .)
    LESS            reduce using rule 259 (unsigned_digit_sequence -> digit .)
    LESSEQUAL       reduce using rule 259 (unsigned_digit_sequence -> digit .)
    GREATER         reduce using rule 259 (unsigned_digit_sequence -> digit .)
    GREATEREQUAL    reduce using rule 259 (unsigned_digit_sequence -> digit .)
    IN              reduce using rule 259 (unsigned_digit_sequence -> digit .)
    DO              reduce using rule 259 (unsigned_digit_sequence -> digit .)
    THEN            reduce using rule 259 (unsigned_digit_sequence -> digit .)
    OF              reduce using rule 259 (unsigned_digit_sequence -> digit .)
    RPAREN          reduce using rule 259 (unsigned_digit_sequence -> digit .)
    RBRACKET        reduce using rule 259 (unsigned_digit_sequence -> digit .)
    TO              reduce using rule 259 (unsigned_digit_sequence -> digit .)
    DOWNTO          reduce using rule 259 (unsigned_digit_sequence -> digit .)
    RANGE_OPERATOR  reduce using rule 259 (unsigned_digit_sequence -> digit .)


state 45

    (266) digit -> NUMBER .

    NUMBER          reduce using rule 266 (digit -> NUMBER .)
    SEMICOLON       reduce using rule 266 (digit -> NUMBER .)
    COMMA           reduce using rule 266 (digit -> NUMBER .)
    COLON           reduce using rule 266 (digit -> NUMBER .)
    END             reduce using rule 266 (digit -> NUMBER .)
    UNTIL           reduce using rule 266 (digit -> NUMBER .)
    ELSE            reduce using rule 266 (digit -> NUMBER .)
    DOT             reduce using rule 266 (digit -> NUMBER .)
    PLUS            reduce using rule 266 (digit -> NUMBER .)
    MINUS           reduce using rule 266 (digit -> NUMBER .)
    TIMES           reduce using rule 266 (digit -> NUMBER .)
    DIVIDE          reduce using rule 266 (digit -> NUMBER .)
    DIV             reduce using rule 266 (digit -> NUMBER .)
    MOD             reduce using rule 266 (digit -> NUMBER .)
    AND             reduce using rule 266 (digit -> NUMBER .)
    OR              reduce using rule 266 (digit -> NUMBER .)
    EQUAL           reduce using rule 266 (digit -> NUMBER .)
    NOTEQUAL        reduce using rule 266 (digit -> NUMBER .)
    LESS            reduce using rule 266 (digit -> NUMBER .)
    LESSEQUAL       reduce using rule 266 (digit -> NUMBER .)
    GREATER         reduce using rule 266 (digit -> NUMBER .)
    GREATEREQUAL    reduce using rule 266 (digit -> NUMBER .)
    IN              reduce using rule 266 (digit -> NUMBER .)
    DO              reduce using rule 266 (digit -> NUMBER .)
    THEN            reduce using rule 266 (digit -> NUMBER .)
    OF              reduce using rule 266 (digit -> NUMBER .)
    RPAREN          reduce using rule 266 (digit -> NUMBER .)
    RBRACKET        reduce using rule 266 (digit -> NUMBER .)
    TO              reduce using rule 266 (digit -> NUMBER .)
    DOWNTO          reduce using rule 266 (digit -> NUMBER .)
    RANGE_OPERATOR  reduce using rule 266 (digit -> NUMBER .)


state 46

    (23) constant_definition_part -> CONST constant_definition_list . SEMICOLON
    (25) constant_definition_list -> constant_definition_list . SEMICOLON constant_definition

    SEMICOLON       shift and go to state 123


state 47

    (24) constant_definition_list -> constant_definition .

    SEMICOLON       reduce using rule 24 (constant_definition_list -> constant_definition .)


state 48

    (26) constant_definition -> identifier . EQUAL constant

    EQUAL           shift and go to state 124


state 49

    (27) type_definition_part -> TYPE type_definition_list . SEMICOLON
    (29) type_definition_list -> type_definition_list . SEMICOLON type_definition

    SEMICOLON       shift and go to state 125


state 50

    (28) type_definition_list -> type_definition .

    SEMICOLON       reduce using rule 28 (type_definition_list -> type_definition .)


state 51

    (30) type_definition -> identifier . EQUAL type

    EQUAL           shift and go to state 126


state 52

    (35) procedure_and_function_declaration_part -> procedure_declaration SEMICOLON .

    BEGIN           reduce using rule 35 (procedure_and_function_declaration_part -> procedure_declaration SEMICOLON .)


state 53

    (36) procedure_and_function_declaration_part -> function_declaration SEMICOLON .

    BEGIN           reduce using rule 36 (procedure_and_function_declaration_part -> function_declaration SEMICOLON .)


state 54

    (37) procedure_declaration -> procedure_heading SEMICOLON . procedure_body
    (38) procedure_declaration -> procedure_heading SEMICOLON . directive
    (40) procedure_body -> . block
    (45) directive -> . FORWARD
    (4) block -> . declaration_part statement_part
    (5) declaration_part -> . label_declaration_part procedure_and_function_declaration_part
    (6) declaration_part -> . label_declaration_part constant_definition_part procedure_and_function_declaration_part
    (7) declaration_part -> . label_declaration_part type_definition_part procedure_and_function_declaration_part
    (8) declaration_part -> . label_declaration_part variable_declaration_part procedure_and_function_declaration_part
    (9) declaration_part -> . label_declaration_part constant_definition_part type_definition_part procedure_and_function_declaration_part
    (10) declaration_part -> . label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (11) declaration_part -> . label_declaration_part constant_definition_part variable_declaration_part procedure_and_function_declaration_part
    (12) declaration_part -> . label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (13) declaration_part -> . constant_definition_part procedure_and_function_declaration_part
    (14) declaration_part -> . constant_definition_part type_definition_part procedure_and_function_declaration_part
    (15) declaration_part -> . constant_definition_part variable_declaration_part procedure_and_function_declaration_part
    (16) declaration_part -> . constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (17) declaration_part -> . type_definition_part procedure_and_function_declaration_part
    (18) declaration_part -> . type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (19) declaration_part -> . procedure_and_function_declaration_part
    (20) label_declaration_part -> . LABEL label_list SEMICOLON
    (23) constant_definition_part -> . CONST constant_definition_list SEMICOLON
    (27) type_definition_part -> . TYPE type_definition_list SEMICOLON
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    FORWARD         shift and go to state 130
    LABEL           shift and go to state 10
    CONST           shift and go to state 11
    TYPE            shift and go to state 12
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_heading              shift and go to state 15
    procedure_body                 shift and go to state 127
    directive                      shift and go to state 128
    block                          shift and go to state 129
    declaration_part               shift and go to state 5
    label_declaration_part         shift and go to state 6
    procedure_and_function_declaration_part shift and go to state 7
    constant_definition_part       shift and go to state 8
    type_definition_part           shift and go to state 9
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 55

    (39) procedure_declaration -> procedure_identification SEMICOLON . procedure_body
    (40) procedure_body -> . block
    (4) block -> . declaration_part statement_part
    (5) declaration_part -> . label_declaration_part procedure_and_function_declaration_part
    (6) declaration_part -> . label_declaration_part constant_definition_part procedure_and_function_declaration_part
    (7) declaration_part -> . label_declaration_part type_definition_part procedure_and_function_declaration_part
    (8) declaration_part -> . label_declaration_part variable_declaration_part procedure_and_function_declaration_part
    (9) declaration_part -> . label_declaration_part constant_definition_part type_definition_part procedure_and_function_declaration_part
    (10) declaration_part -> . label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (11) declaration_part -> . label_declaration_part constant_definition_part variable_declaration_part procedure_and_function_declaration_part
    (12) declaration_part -> . label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (13) declaration_part -> . constant_definition_part procedure_and_function_declaration_part
    (14) declaration_part -> . constant_definition_part type_definition_part procedure_and_function_declaration_part
    (15) declaration_part -> . constant_definition_part variable_declaration_part procedure_and_function_declaration_part
    (16) declaration_part -> . constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (17) declaration_part -> . type_definition_part procedure_and_function_declaration_part
    (18) declaration_part -> . type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (19) declaration_part -> . procedure_and_function_declaration_part
    (20) label_declaration_part -> . LABEL label_list SEMICOLON
    (23) constant_definition_part -> . CONST constant_definition_list SEMICOLON
    (27) type_definition_part -> . TYPE type_definition_list SEMICOLON
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    LABEL           shift and go to state 10
    CONST           shift and go to state 11
    TYPE            shift and go to state 12
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_identification       shift and go to state 16
    procedure_body                 shift and go to state 131
    block                          shift and go to state 129
    declaration_part               shift and go to state 5
    label_declaration_part         shift and go to state 6
    procedure_and_function_declaration_part shift and go to state 7
    constant_definition_part       shift and go to state 8
    type_definition_part           shift and go to state 9
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 56

    (41) function_declaration -> function_heading SEMICOLON . function_body
    (42) function_declaration -> function_heading SEMICOLON . directive
    (44) function_body -> . block
    (45) directive -> . FORWARD
    (4) block -> . declaration_part statement_part
    (5) declaration_part -> . label_declaration_part procedure_and_function_declaration_part
    (6) declaration_part -> . label_declaration_part constant_definition_part procedure_and_function_declaration_part
    (7) declaration_part -> . label_declaration_part type_definition_part procedure_and_function_declaration_part
    (8) declaration_part -> . label_declaration_part variable_declaration_part procedure_and_function_declaration_part
    (9) declaration_part -> . label_declaration_part constant_definition_part type_definition_part procedure_and_function_declaration_part
    (10) declaration_part -> . label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (11) declaration_part -> . label_declaration_part constant_definition_part variable_declaration_part procedure_and_function_declaration_part
    (12) declaration_part -> . label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (13) declaration_part -> . constant_definition_part procedure_and_function_declaration_part
    (14) declaration_part -> . constant_definition_part type_definition_part procedure_and_function_declaration_part
    (15) declaration_part -> . constant_definition_part variable_declaration_part procedure_and_function_declaration_part
    (16) declaration_part -> . constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (17) declaration_part -> . type_definition_part procedure_and_function_declaration_part
    (18) declaration_part -> . type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (19) declaration_part -> . procedure_and_function_declaration_part
    (20) label_declaration_part -> . LABEL label_list SEMICOLON
    (23) constant_definition_part -> . CONST constant_definition_list SEMICOLON
    (27) type_definition_part -> . TYPE type_definition_list SEMICOLON
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    FORWARD         shift and go to state 130
    LABEL           shift and go to state 10
    CONST           shift and go to state 11
    TYPE            shift and go to state 12
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    function_heading               shift and go to state 17
    function_body                  shift and go to state 132
    directive                      shift and go to state 133
    block                          shift and go to state 134
    declaration_part               shift and go to state 5
    label_declaration_part         shift and go to state 6
    procedure_and_function_declaration_part shift and go to state 7
    constant_definition_part       shift and go to state 8
    type_definition_part           shift and go to state 9
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_identification        shift and go to state 18

state 57

    (43) function_declaration -> function_identification SEMICOLON . function_body
    (44) function_body -> . block
    (4) block -> . declaration_part statement_part
    (5) declaration_part -> . label_declaration_part procedure_and_function_declaration_part
    (6) declaration_part -> . label_declaration_part constant_definition_part procedure_and_function_declaration_part
    (7) declaration_part -> . label_declaration_part type_definition_part procedure_and_function_declaration_part
    (8) declaration_part -> . label_declaration_part variable_declaration_part procedure_and_function_declaration_part
    (9) declaration_part -> . label_declaration_part constant_definition_part type_definition_part procedure_and_function_declaration_part
    (10) declaration_part -> . label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (11) declaration_part -> . label_declaration_part constant_definition_part variable_declaration_part procedure_and_function_declaration_part
    (12) declaration_part -> . label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (13) declaration_part -> . constant_definition_part procedure_and_function_declaration_part
    (14) declaration_part -> . constant_definition_part type_definition_part procedure_and_function_declaration_part
    (15) declaration_part -> . constant_definition_part variable_declaration_part procedure_and_function_declaration_part
    (16) declaration_part -> . constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (17) declaration_part -> . type_definition_part procedure_and_function_declaration_part
    (18) declaration_part -> . type_definition_part variable_declaration_part procedure_and_function_declaration_part
    (19) declaration_part -> . procedure_and_function_declaration_part
    (20) label_declaration_part -> . LABEL label_list SEMICOLON
    (23) constant_definition_part -> . CONST constant_definition_list SEMICOLON
    (27) type_definition_part -> . TYPE type_definition_list SEMICOLON
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    LABEL           shift and go to state 10
    CONST           shift and go to state 11
    TYPE            shift and go to state 12
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    function_identification        shift and go to state 18
    function_body                  shift and go to state 135
    block                          shift and go to state 134
    declaration_part               shift and go to state 5
    label_declaration_part         shift and go to state 6
    procedure_and_function_declaration_part shift and go to state 7
    constant_definition_part       shift and go to state 8
    type_definition_part           shift and go to state 9
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17

state 58

    (47) procedure_heading -> PROCEDURE identifier .
    (48) procedure_heading -> PROCEDURE identifier . formal_parameter_list
    (237) procedure_identifier -> identifier .
    (54) formal_parameter_list -> . LPAREN formal_parameter_section_list RPAREN

  ! reduce/reduce conflict for SEMICOLON resolved using rule 47 (procedure_heading -> PROCEDURE identifier .)
    SEMICOLON       reduce using rule 47 (procedure_heading -> PROCEDURE identifier .)
    LPAREN          shift and go to state 137

  ! SEMICOLON       [ reduce using rule 237 (procedure_identifier -> identifier .) ]

    formal_parameter_list          shift and go to state 136

state 59

    (52) procedure_identification -> PROCEDURE procedure_identifier .

    SEMICOLON       reduce using rule 52 (procedure_identification -> PROCEDURE procedure_identifier .)


state 60

    (49) function_heading -> FUNCTION identifier . COLON result_type
    (50) function_heading -> FUNCTION identifier . formal_parameter_list COLON result_type
    (238) function_identifier -> identifier .
    (54) formal_parameter_list -> . LPAREN formal_parameter_section_list RPAREN

    COLON           shift and go to state 138
    SEMICOLON       reduce using rule 238 (function_identifier -> identifier .)
    LPAREN          shift and go to state 137

    formal_parameter_list          shift and go to state 139

state 61

    (53) function_identification -> FUNCTION function_identifier .

    SEMICOLON       reduce using rule 53 (function_identification -> FUNCTION function_identifier .)


state 62

    (2) program_heading -> PROGRAM identifier SEMICOLON .

    LABEL           reduce using rule 2 (program_heading -> PROGRAM identifier SEMICOLON .)
    CONST           reduce using rule 2 (program_heading -> PROGRAM identifier SEMICOLON .)
    TYPE            reduce using rule 2 (program_heading -> PROGRAM identifier SEMICOLON .)
    PROCEDURE       reduce using rule 2 (program_heading -> PROGRAM identifier SEMICOLON .)
    FUNCTION        reduce using rule 2 (program_heading -> PROGRAM identifier SEMICOLON .)


state 63

    (3) program_heading -> PROGRAM identifier LPAREN . identifier_list RPAREN SEMICOLON
    (242) identifier_list -> . identifier
    (243) identifier_list -> . identifier_list COMMA identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    identifier                     shift and go to state 114
    identifier_list                shift and go to state 140

state 64

    (94) compound_statement -> BEGIN . statement_sequence END
    (76) statement_sequence -> . statement
    (77) statement_sequence -> . statement SEMICOLON statement
    (78) statement -> . label COLON simple_statement
    (79) statement -> . label COLON structured_statement
    (80) statement -> . simple_statement
    (81) statement -> . structured_statement
    (272) label -> . integer_number
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (248) integer_number -> . digit_sequence
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (266) digit -> . NUMBER
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    statement_sequence             shift and go to state 141
    statement                      shift and go to state 66
    label                          shift and go to state 67
    simple_statement               shift and go to state 68
    structured_statement           shift and go to state 69
    integer_number                 shift and go to state 38
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    digit_sequence                 shift and go to state 39
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    variable_identifier            shift and go to state 94
    digit                          shift and go to state 44
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 65

    (46) statement_part -> BEGIN statement_sequence . END

    END             shift and go to state 142


state 66

    (76) statement_sequence -> statement .
    (77) statement_sequence -> statement . SEMICOLON statement

    END             reduce using rule 76 (statement_sequence -> statement .)
    UNTIL           reduce using rule 76 (statement_sequence -> statement .)
    SEMICOLON       shift and go to state 143


state 67

    (78) statement -> label . COLON simple_statement
    (79) statement -> label . COLON structured_statement

    COLON           shift and go to state 144


state 68

    (80) statement -> simple_statement .

    SEMICOLON       reduce using rule 80 (statement -> simple_statement .)
    END             reduce using rule 80 (statement -> simple_statement .)
    UNTIL           reduce using rule 80 (statement -> simple_statement .)
    ELSE            reduce using rule 80 (statement -> simple_statement .)


state 69

    (81) statement -> structured_statement .

    SEMICOLON       reduce using rule 81 (statement -> structured_statement .)
    END             reduce using rule 81 (statement -> structured_statement .)
    UNTIL           reduce using rule 81 (statement -> structured_statement .)
    ELSE            reduce using rule 81 (statement -> structured_statement .)


state 70

    (82) simple_statement -> assignment_statement .

    SEMICOLON       reduce using rule 82 (simple_statement -> assignment_statement .)
    END             reduce using rule 82 (simple_statement -> assignment_statement .)
    UNTIL           reduce using rule 82 (simple_statement -> assignment_statement .)
    ELSE            reduce using rule 82 (simple_statement -> assignment_statement .)


state 71

    (83) simple_statement -> procedure_statement .

    SEMICOLON       reduce using rule 83 (simple_statement -> procedure_statement .)
    END             reduce using rule 83 (simple_statement -> procedure_statement .)
    UNTIL           reduce using rule 83 (simple_statement -> procedure_statement .)
    ELSE            reduce using rule 83 (simple_statement -> procedure_statement .)


state 72

    (84) simple_statement -> goto_statement .

    SEMICOLON       reduce using rule 84 (simple_statement -> goto_statement .)
    END             reduce using rule 84 (simple_statement -> goto_statement .)
    UNTIL           reduce using rule 84 (simple_statement -> goto_statement .)
    ELSE            reduce using rule 84 (simple_statement -> goto_statement .)


state 73

    (90) structured_statement -> compound_statement .

    SEMICOLON       reduce using rule 90 (structured_statement -> compound_statement .)
    END             reduce using rule 90 (structured_statement -> compound_statement .)
    UNTIL           reduce using rule 90 (structured_statement -> compound_statement .)
    ELSE            reduce using rule 90 (structured_statement -> compound_statement .)


state 74

    (91) structured_statement -> repetitive_statement .

    SEMICOLON       reduce using rule 91 (structured_statement -> repetitive_statement .)
    END             reduce using rule 91 (structured_statement -> repetitive_statement .)
    UNTIL           reduce using rule 91 (structured_statement -> repetitive_statement .)
    ELSE            reduce using rule 91 (structured_statement -> repetitive_statement .)


state 75

    (92) structured_statement -> conditional_statement .

    SEMICOLON       reduce using rule 92 (structured_statement -> conditional_statement .)
    END             reduce using rule 92 (structured_statement -> conditional_statement .)
    UNTIL           reduce using rule 92 (structured_statement -> conditional_statement .)
    ELSE            reduce using rule 92 (structured_statement -> conditional_statement .)


state 76

    (93) structured_statement -> with_statement .

    SEMICOLON       reduce using rule 93 (structured_statement -> with_statement .)
    END             reduce using rule 93 (structured_statement -> with_statement .)
    UNTIL           reduce using rule 93 (structured_statement -> with_statement .)
    ELSE            reduce using rule 93 (structured_statement -> with_statement .)


state 77

    (85) assignment_statement -> variable . ASSIGN expression
    (230) pointer_variable -> variable .
    (232) array_variable -> variable .
    (229) record_variable -> variable .
    (227) file_variable -> variable .

  ! reduce/reduce conflict for UPARROW resolved using rule 227 (file_variable -> variable .)
    ASSIGN          shift and go to state 145
    LBRACKET        reduce using rule 232 (array_variable -> variable .)
    DOT             reduce using rule 229 (record_variable -> variable .)
    UPARROW         reduce using rule 227 (file_variable -> variable .)

  ! UPARROW         [ reduce using rule 230 (pointer_variable -> variable .) ]


state 78

    (86) assignment_statement -> function_identifier . ASSIGN expression

    ASSIGN          shift and go to state 146


state 79

    (87) procedure_statement -> procedure_identifier .
    (88) procedure_statement -> procedure_identifier . actual_parameter_list
    (118) actual_parameter_list -> . LPAREN actual_parameter_list2 RPAREN

    SEMICOLON       reduce using rule 87 (procedure_statement -> procedure_identifier .)
    END             reduce using rule 87 (procedure_statement -> procedure_identifier .)
    UNTIL           reduce using rule 87 (procedure_statement -> procedure_identifier .)
    ELSE            reduce using rule 87 (procedure_statement -> procedure_identifier .)
    LPAREN          shift and go to state 148

    actual_parameter_list          shift and go to state 147

state 80

    (89) goto_statement -> GOTO . label
    (272) label -> . integer_number
    (248) integer_number -> . digit_sequence
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

    label                          shift and go to state 149
    integer_number                 shift and go to state 38
    digit_sequence                 shift and go to state 39
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 81

    (95) repetitive_statement -> while_statement .

    SEMICOLON       reduce using rule 95 (repetitive_statement -> while_statement .)
    END             reduce using rule 95 (repetitive_statement -> while_statement .)
    UNTIL           reduce using rule 95 (repetitive_statement -> while_statement .)
    ELSE            reduce using rule 95 (repetitive_statement -> while_statement .)


state 82

    (96) repetitive_statement -> repeat_statement .

    SEMICOLON       reduce using rule 96 (repetitive_statement -> repeat_statement .)
    END             reduce using rule 96 (repetitive_statement -> repeat_statement .)
    UNTIL           reduce using rule 96 (repetitive_statement -> repeat_statement .)
    ELSE            reduce using rule 96 (repetitive_statement -> repeat_statement .)


state 83

    (97) repetitive_statement -> for_statement .

    SEMICOLON       reduce using rule 97 (repetitive_statement -> for_statement .)
    END             reduce using rule 97 (repetitive_statement -> for_statement .)
    UNTIL           reduce using rule 97 (repetitive_statement -> for_statement .)
    ELSE            reduce using rule 97 (repetitive_statement -> for_statement .)


state 84

    (104) conditional_statement -> if_statement .

    SEMICOLON       reduce using rule 104 (conditional_statement -> if_statement .)
    END             reduce using rule 104 (conditional_statement -> if_statement .)
    UNTIL           reduce using rule 104 (conditional_statement -> if_statement .)
    ELSE            reduce using rule 104 (conditional_statement -> if_statement .)


state 85

    (105) conditional_statement -> case_statement .

    SEMICOLON       reduce using rule 105 (conditional_statement -> case_statement .)
    END             reduce using rule 105 (conditional_statement -> case_statement .)
    UNTIL           reduce using rule 105 (conditional_statement -> case_statement .)
    ELSE            reduce using rule 105 (conditional_statement -> case_statement .)


state 86

    (115) with_statement -> WITH . record_variable_list DO statement
    (116) record_variable_list -> . record_variable
    (117) record_variable_list -> . record_variable_list COMMA record_variable
    (229) record_variable -> . variable
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (226) identifier -> . ID
    (232) array_variable -> . variable
    (227) file_variable -> . variable

    ID              shift and go to state 22

    record_variable_list           shift and go to state 150
    record_variable                shift and go to state 151
    variable                       shift and go to state 152
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    identifier                     shift and go to state 153
    array_variable                 shift and go to state 102
    file_variable                  shift and go to state 104

state 87

    (161) variable -> entire_variable .

    ASSIGN          reduce using rule 161 (variable -> entire_variable .)
    UPARROW         reduce using rule 161 (variable -> entire_variable .)
    LBRACKET        reduce using rule 161 (variable -> entire_variable .)
    DOT             reduce using rule 161 (variable -> entire_variable .)
    DO              reduce using rule 161 (variable -> entire_variable .)
    COMMA           reduce using rule 161 (variable -> entire_variable .)
    TIMES           reduce using rule 161 (variable -> entire_variable .)
    DIVIDE          reduce using rule 161 (variable -> entire_variable .)
    DIV             reduce using rule 161 (variable -> entire_variable .)
    MOD             reduce using rule 161 (variable -> entire_variable .)
    AND             reduce using rule 161 (variable -> entire_variable .)
    PLUS            reduce using rule 161 (variable -> entire_variable .)
    MINUS           reduce using rule 161 (variable -> entire_variable .)
    OR              reduce using rule 161 (variable -> entire_variable .)
    EQUAL           reduce using rule 161 (variable -> entire_variable .)
    NOTEQUAL        reduce using rule 161 (variable -> entire_variable .)
    LESS            reduce using rule 161 (variable -> entire_variable .)
    LESSEQUAL       reduce using rule 161 (variable -> entire_variable .)
    GREATER         reduce using rule 161 (variable -> entire_variable .)
    GREATEREQUAL    reduce using rule 161 (variable -> entire_variable .)
    IN              reduce using rule 161 (variable -> entire_variable .)
    THEN            reduce using rule 161 (variable -> entire_variable .)
    OF              reduce using rule 161 (variable -> entire_variable .)
    SEMICOLON       reduce using rule 161 (variable -> entire_variable .)
    END             reduce using rule 161 (variable -> entire_variable .)
    UNTIL           reduce using rule 161 (variable -> entire_variable .)
    ELSE            reduce using rule 161 (variable -> entire_variable .)
    RPAREN          reduce using rule 161 (variable -> entire_variable .)
    RBRACKET        reduce using rule 161 (variable -> entire_variable .)
    TO              reduce using rule 161 (variable -> entire_variable .)
    DOWNTO          reduce using rule 161 (variable -> entire_variable .)


state 88

    (162) variable -> component_variable .

    ASSIGN          reduce using rule 162 (variable -> component_variable .)
    UPARROW         reduce using rule 162 (variable -> component_variable .)
    LBRACKET        reduce using rule 162 (variable -> component_variable .)
    DOT             reduce using rule 162 (variable -> component_variable .)
    DO              reduce using rule 162 (variable -> component_variable .)
    COMMA           reduce using rule 162 (variable -> component_variable .)
    TIMES           reduce using rule 162 (variable -> component_variable .)
    DIVIDE          reduce using rule 162 (variable -> component_variable .)
    DIV             reduce using rule 162 (variable -> component_variable .)
    MOD             reduce using rule 162 (variable -> component_variable .)
    AND             reduce using rule 162 (variable -> component_variable .)
    PLUS            reduce using rule 162 (variable -> component_variable .)
    MINUS           reduce using rule 162 (variable -> component_variable .)
    OR              reduce using rule 162 (variable -> component_variable .)
    EQUAL           reduce using rule 162 (variable -> component_variable .)
    NOTEQUAL        reduce using rule 162 (variable -> component_variable .)
    LESS            reduce using rule 162 (variable -> component_variable .)
    LESSEQUAL       reduce using rule 162 (variable -> component_variable .)
    GREATER         reduce using rule 162 (variable -> component_variable .)
    GREATEREQUAL    reduce using rule 162 (variable -> component_variable .)
    IN              reduce using rule 162 (variable -> component_variable .)
    THEN            reduce using rule 162 (variable -> component_variable .)
    OF              reduce using rule 162 (variable -> component_variable .)
    SEMICOLON       reduce using rule 162 (variable -> component_variable .)
    END             reduce using rule 162 (variable -> component_variable .)
    UNTIL           reduce using rule 162 (variable -> component_variable .)
    ELSE            reduce using rule 162 (variable -> component_variable .)
    RPAREN          reduce using rule 162 (variable -> component_variable .)
    RBRACKET        reduce using rule 162 (variable -> component_variable .)
    TO              reduce using rule 162 (variable -> component_variable .)
    DOWNTO          reduce using rule 162 (variable -> component_variable .)


state 89

    (163) variable -> referenced_variable .

    ASSIGN          reduce using rule 163 (variable -> referenced_variable .)
    UPARROW         reduce using rule 163 (variable -> referenced_variable .)
    LBRACKET        reduce using rule 163 (variable -> referenced_variable .)
    DOT             reduce using rule 163 (variable -> referenced_variable .)
    DO              reduce using rule 163 (variable -> referenced_variable .)
    COMMA           reduce using rule 163 (variable -> referenced_variable .)
    TIMES           reduce using rule 163 (variable -> referenced_variable .)
    DIVIDE          reduce using rule 163 (variable -> referenced_variable .)
    DIV             reduce using rule 163 (variable -> referenced_variable .)
    MOD             reduce using rule 163 (variable -> referenced_variable .)
    AND             reduce using rule 163 (variable -> referenced_variable .)
    PLUS            reduce using rule 163 (variable -> referenced_variable .)
    MINUS           reduce using rule 163 (variable -> referenced_variable .)
    OR              reduce using rule 163 (variable -> referenced_variable .)
    EQUAL           reduce using rule 163 (variable -> referenced_variable .)
    NOTEQUAL        reduce using rule 163 (variable -> referenced_variable .)
    LESS            reduce using rule 163 (variable -> referenced_variable .)
    LESSEQUAL       reduce using rule 163 (variable -> referenced_variable .)
    GREATER         reduce using rule 163 (variable -> referenced_variable .)
    GREATEREQUAL    reduce using rule 163 (variable -> referenced_variable .)
    IN              reduce using rule 163 (variable -> referenced_variable .)
    THEN            reduce using rule 163 (variable -> referenced_variable .)
    OF              reduce using rule 163 (variable -> referenced_variable .)
    SEMICOLON       reduce using rule 163 (variable -> referenced_variable .)
    END             reduce using rule 163 (variable -> referenced_variable .)
    UNTIL           reduce using rule 163 (variable -> referenced_variable .)
    ELSE            reduce using rule 163 (variable -> referenced_variable .)
    RPAREN          reduce using rule 163 (variable -> referenced_variable .)
    RBRACKET        reduce using rule 163 (variable -> referenced_variable .)
    TO              reduce using rule 163 (variable -> referenced_variable .)
    DOWNTO          reduce using rule 163 (variable -> referenced_variable .)


state 90

    (238) function_identifier -> identifier .
    (237) procedure_identifier -> identifier .
    (235) variable_identifier -> identifier .
    (233) field_identifier -> identifier .

  ! reduce/reduce conflict for ASSIGN resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for UPARROW resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DOT resolved using rule 233 (field_identifier -> identifier .)
    LPAREN          reduce using rule 237 (procedure_identifier -> identifier .)
    SEMICOLON       reduce using rule 237 (procedure_identifier -> identifier .)
    END             reduce using rule 237 (procedure_identifier -> identifier .)
    UNTIL           reduce using rule 237 (procedure_identifier -> identifier .)
    ELSE            reduce using rule 237 (procedure_identifier -> identifier .)
    ASSIGN          reduce using rule 233 (field_identifier -> identifier .)
    UPARROW         reduce using rule 233 (field_identifier -> identifier .)
    LBRACKET        reduce using rule 233 (field_identifier -> identifier .)
    DOT             reduce using rule 233 (field_identifier -> identifier .)

  ! ASSIGN          [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! ASSIGN          [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! UPARROW         [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! LBRACKET        [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! DOT             [ reduce using rule 235 (variable_identifier -> identifier .) ]


state 91

    (98) while_statement -> WHILE . expression DO statement
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    expression                     shift and go to state 154
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 92

    (99) repeat_statement -> REPEAT . statement_sequence UNTIL expression
    (76) statement_sequence -> . statement
    (77) statement_sequence -> . statement SEMICOLON statement
    (78) statement -> . label COLON simple_statement
    (79) statement -> . label COLON structured_statement
    (80) statement -> . simple_statement
    (81) statement -> . structured_statement
    (272) label -> . integer_number
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (248) integer_number -> . digit_sequence
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (266) digit -> . NUMBER
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    statement_sequence             shift and go to state 177
    statement                      shift and go to state 66
    label                          shift and go to state 67
    simple_statement               shift and go to state 68
    structured_statement           shift and go to state 69
    integer_number                 shift and go to state 38
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    digit_sequence                 shift and go to state 39
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    variable_identifier            shift and go to state 94
    digit                          shift and go to state 44
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 93

    (100) for_statement -> FOR . variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> FOR . variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (235) variable_identifier -> . identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    variable_identifier            shift and go to state 178
    identifier                     shift and go to state 179

state 94

    (164) entire_variable -> variable_identifier .

    ASSIGN          reduce using rule 164 (entire_variable -> variable_identifier .)
    UPARROW         reduce using rule 164 (entire_variable -> variable_identifier .)
    LBRACKET        reduce using rule 164 (entire_variable -> variable_identifier .)
    DOT             reduce using rule 164 (entire_variable -> variable_identifier .)
    DO              reduce using rule 164 (entire_variable -> variable_identifier .)
    COMMA           reduce using rule 164 (entire_variable -> variable_identifier .)
    TIMES           reduce using rule 164 (entire_variable -> variable_identifier .)
    DIVIDE          reduce using rule 164 (entire_variable -> variable_identifier .)
    DIV             reduce using rule 164 (entire_variable -> variable_identifier .)
    MOD             reduce using rule 164 (entire_variable -> variable_identifier .)
    AND             reduce using rule 164 (entire_variable -> variable_identifier .)
    PLUS            reduce using rule 164 (entire_variable -> variable_identifier .)
    MINUS           reduce using rule 164 (entire_variable -> variable_identifier .)
    OR              reduce using rule 164 (entire_variable -> variable_identifier .)
    EQUAL           reduce using rule 164 (entire_variable -> variable_identifier .)
    NOTEQUAL        reduce using rule 164 (entire_variable -> variable_identifier .)
    LESS            reduce using rule 164 (entire_variable -> variable_identifier .)
    LESSEQUAL       reduce using rule 164 (entire_variable -> variable_identifier .)
    GREATER         reduce using rule 164 (entire_variable -> variable_identifier .)
    GREATEREQUAL    reduce using rule 164 (entire_variable -> variable_identifier .)
    IN              reduce using rule 164 (entire_variable -> variable_identifier .)
    THEN            reduce using rule 164 (entire_variable -> variable_identifier .)
    OF              reduce using rule 164 (entire_variable -> variable_identifier .)
    SEMICOLON       reduce using rule 164 (entire_variable -> variable_identifier .)
    END             reduce using rule 164 (entire_variable -> variable_identifier .)
    UNTIL           reduce using rule 164 (entire_variable -> variable_identifier .)
    ELSE            reduce using rule 164 (entire_variable -> variable_identifier .)
    RPAREN          reduce using rule 164 (entire_variable -> variable_identifier .)
    RBRACKET        reduce using rule 164 (entire_variable -> variable_identifier .)
    TO              reduce using rule 164 (entire_variable -> variable_identifier .)
    DOWNTO          reduce using rule 164 (entire_variable -> variable_identifier .)


state 95

    (106) if_statement -> IF . expression THEN statement
    (107) if_statement -> IF . expression THEN statement ELSE statement
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    expression                     shift and go to state 180
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 96

    (108) case_statement -> CASE . expression OF case_limb_list END
    (109) case_statement -> CASE . expression OF case_limb_list SEMICOLON END
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    expression                     shift and go to state 181
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 97

    (165) entire_variable -> field_identifier .

    ASSIGN          reduce using rule 165 (entire_variable -> field_identifier .)
    UPARROW         reduce using rule 165 (entire_variable -> field_identifier .)
    LBRACKET        reduce using rule 165 (entire_variable -> field_identifier .)
    DOT             reduce using rule 165 (entire_variable -> field_identifier .)
    DO              reduce using rule 165 (entire_variable -> field_identifier .)
    COMMA           reduce using rule 165 (entire_variable -> field_identifier .)
    TIMES           reduce using rule 165 (entire_variable -> field_identifier .)
    DIVIDE          reduce using rule 165 (entire_variable -> field_identifier .)
    DIV             reduce using rule 165 (entire_variable -> field_identifier .)
    MOD             reduce using rule 165 (entire_variable -> field_identifier .)
    AND             reduce using rule 165 (entire_variable -> field_identifier .)
    PLUS            reduce using rule 165 (entire_variable -> field_identifier .)
    MINUS           reduce using rule 165 (entire_variable -> field_identifier .)
    OR              reduce using rule 165 (entire_variable -> field_identifier .)
    EQUAL           reduce using rule 165 (entire_variable -> field_identifier .)
    NOTEQUAL        reduce using rule 165 (entire_variable -> field_identifier .)
    LESS            reduce using rule 165 (entire_variable -> field_identifier .)
    LESSEQUAL       reduce using rule 165 (entire_variable -> field_identifier .)
    GREATER         reduce using rule 165 (entire_variable -> field_identifier .)
    GREATEREQUAL    reduce using rule 165 (entire_variable -> field_identifier .)
    IN              reduce using rule 165 (entire_variable -> field_identifier .)
    THEN            reduce using rule 165 (entire_variable -> field_identifier .)
    OF              reduce using rule 165 (entire_variable -> field_identifier .)
    SEMICOLON       reduce using rule 165 (entire_variable -> field_identifier .)
    END             reduce using rule 165 (entire_variable -> field_identifier .)
    UNTIL           reduce using rule 165 (entire_variable -> field_identifier .)
    ELSE            reduce using rule 165 (entire_variable -> field_identifier .)
    RPAREN          reduce using rule 165 (entire_variable -> field_identifier .)
    RBRACKET        reduce using rule 165 (entire_variable -> field_identifier .)
    TO              reduce using rule 165 (entire_variable -> field_identifier .)
    DOWNTO          reduce using rule 165 (entire_variable -> field_identifier .)


state 98

    (166) component_variable -> indexed_variable .

    ASSIGN          reduce using rule 166 (component_variable -> indexed_variable .)
    UPARROW         reduce using rule 166 (component_variable -> indexed_variable .)
    LBRACKET        reduce using rule 166 (component_variable -> indexed_variable .)
    DOT             reduce using rule 166 (component_variable -> indexed_variable .)
    DO              reduce using rule 166 (component_variable -> indexed_variable .)
    COMMA           reduce using rule 166 (component_variable -> indexed_variable .)
    TIMES           reduce using rule 166 (component_variable -> indexed_variable .)
    DIVIDE          reduce using rule 166 (component_variable -> indexed_variable .)
    DIV             reduce using rule 166 (component_variable -> indexed_variable .)
    MOD             reduce using rule 166 (component_variable -> indexed_variable .)
    AND             reduce using rule 166 (component_variable -> indexed_variable .)
    PLUS            reduce using rule 166 (component_variable -> indexed_variable .)
    MINUS           reduce using rule 166 (component_variable -> indexed_variable .)
    OR              reduce using rule 166 (component_variable -> indexed_variable .)
    EQUAL           reduce using rule 166 (component_variable -> indexed_variable .)
    NOTEQUAL        reduce using rule 166 (component_variable -> indexed_variable .)
    LESS            reduce using rule 166 (component_variable -> indexed_variable .)
    LESSEQUAL       reduce using rule 166 (component_variable -> indexed_variable .)
    GREATER         reduce using rule 166 (component_variable -> indexed_variable .)
    GREATEREQUAL    reduce using rule 166 (component_variable -> indexed_variable .)
    IN              reduce using rule 166 (component_variable -> indexed_variable .)
    THEN            reduce using rule 166 (component_variable -> indexed_variable .)
    OF              reduce using rule 166 (component_variable -> indexed_variable .)
    SEMICOLON       reduce using rule 166 (component_variable -> indexed_variable .)
    END             reduce using rule 166 (component_variable -> indexed_variable .)
    UNTIL           reduce using rule 166 (component_variable -> indexed_variable .)
    ELSE            reduce using rule 166 (component_variable -> indexed_variable .)
    RPAREN          reduce using rule 166 (component_variable -> indexed_variable .)
    RBRACKET        reduce using rule 166 (component_variable -> indexed_variable .)
    TO              reduce using rule 166 (component_variable -> indexed_variable .)
    DOWNTO          reduce using rule 166 (component_variable -> indexed_variable .)


state 99

    (167) component_variable -> field_designator .

    ASSIGN          reduce using rule 167 (component_variable -> field_designator .)
    UPARROW         reduce using rule 167 (component_variable -> field_designator .)
    LBRACKET        reduce using rule 167 (component_variable -> field_designator .)
    DOT             reduce using rule 167 (component_variable -> field_designator .)
    DO              reduce using rule 167 (component_variable -> field_designator .)
    COMMA           reduce using rule 167 (component_variable -> field_designator .)
    TIMES           reduce using rule 167 (component_variable -> field_designator .)
    DIVIDE          reduce using rule 167 (component_variable -> field_designator .)
    DIV             reduce using rule 167 (component_variable -> field_designator .)
    MOD             reduce using rule 167 (component_variable -> field_designator .)
    AND             reduce using rule 167 (component_variable -> field_designator .)
    PLUS            reduce using rule 167 (component_variable -> field_designator .)
    MINUS           reduce using rule 167 (component_variable -> field_designator .)
    OR              reduce using rule 167 (component_variable -> field_designator .)
    EQUAL           reduce using rule 167 (component_variable -> field_designator .)
    NOTEQUAL        reduce using rule 167 (component_variable -> field_designator .)
    LESS            reduce using rule 167 (component_variable -> field_designator .)
    LESSEQUAL       reduce using rule 167 (component_variable -> field_designator .)
    GREATER         reduce using rule 167 (component_variable -> field_designator .)
    GREATEREQUAL    reduce using rule 167 (component_variable -> field_designator .)
    IN              reduce using rule 167 (component_variable -> field_designator .)
    THEN            reduce using rule 167 (component_variable -> field_designator .)
    OF              reduce using rule 167 (component_variable -> field_designator .)
    SEMICOLON       reduce using rule 167 (component_variable -> field_designator .)
    END             reduce using rule 167 (component_variable -> field_designator .)
    UNTIL           reduce using rule 167 (component_variable -> field_designator .)
    ELSE            reduce using rule 167 (component_variable -> field_designator .)
    RPAREN          reduce using rule 167 (component_variable -> field_designator .)
    RBRACKET        reduce using rule 167 (component_variable -> field_designator .)
    TO              reduce using rule 167 (component_variable -> field_designator .)
    DOWNTO          reduce using rule 167 (component_variable -> field_designator .)


state 100

    (168) component_variable -> file_buffer .

    ASSIGN          reduce using rule 168 (component_variable -> file_buffer .)
    UPARROW         reduce using rule 168 (component_variable -> file_buffer .)
    LBRACKET        reduce using rule 168 (component_variable -> file_buffer .)
    DOT             reduce using rule 168 (component_variable -> file_buffer .)
    DO              reduce using rule 168 (component_variable -> file_buffer .)
    COMMA           reduce using rule 168 (component_variable -> file_buffer .)
    TIMES           reduce using rule 168 (component_variable -> file_buffer .)
    DIVIDE          reduce using rule 168 (component_variable -> file_buffer .)
    DIV             reduce using rule 168 (component_variable -> file_buffer .)
    MOD             reduce using rule 168 (component_variable -> file_buffer .)
    AND             reduce using rule 168 (component_variable -> file_buffer .)
    PLUS            reduce using rule 168 (component_variable -> file_buffer .)
    MINUS           reduce using rule 168 (component_variable -> file_buffer .)
    OR              reduce using rule 168 (component_variable -> file_buffer .)
    EQUAL           reduce using rule 168 (component_variable -> file_buffer .)
    NOTEQUAL        reduce using rule 168 (component_variable -> file_buffer .)
    LESS            reduce using rule 168 (component_variable -> file_buffer .)
    LESSEQUAL       reduce using rule 168 (component_variable -> file_buffer .)
    GREATER         reduce using rule 168 (component_variable -> file_buffer .)
    GREATEREQUAL    reduce using rule 168 (component_variable -> file_buffer .)
    IN              reduce using rule 168 (component_variable -> file_buffer .)
    THEN            reduce using rule 168 (component_variable -> file_buffer .)
    OF              reduce using rule 168 (component_variable -> file_buffer .)
    SEMICOLON       reduce using rule 168 (component_variable -> file_buffer .)
    END             reduce using rule 168 (component_variable -> file_buffer .)
    UNTIL           reduce using rule 168 (component_variable -> file_buffer .)
    ELSE            reduce using rule 168 (component_variable -> file_buffer .)
    RPAREN          reduce using rule 168 (component_variable -> file_buffer .)
    RBRACKET        reduce using rule 168 (component_variable -> file_buffer .)
    TO              reduce using rule 168 (component_variable -> file_buffer .)
    DOWNTO          reduce using rule 168 (component_variable -> file_buffer .)


state 101

    (228) referenced_variable -> pointer_variable . UPARROW

    UPARROW         shift and go to state 182


state 102

    (169) indexed_variable -> array_variable . LBRACKET expression_list RBRACKET

    LBRACKET        shift and go to state 183


state 103

    (170) field_designator -> record_variable . DOT field_identifier

    DOT             shift and go to state 184


state 104

    (176) file_buffer -> file_variable . UPARROW

    UPARROW         shift and go to state 185


state 105

    (6) declaration_part -> label_declaration_part constant_definition_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 6 (declaration_part -> label_declaration_part constant_definition_part procedure_and_function_declaration_part .)


state 106

    (9) declaration_part -> label_declaration_part constant_definition_part type_definition_part . procedure_and_function_declaration_part
    (10) declaration_part -> label_declaration_part constant_definition_part type_definition_part . variable_declaration_part procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (31) variable_declaration_part -> . VAR variable_declaration_list SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    VAR             shift and go to state 30
    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 186
    variable_declaration_part      shift and go to state 187
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 107

    (11) declaration_part -> label_declaration_part constant_definition_part variable_declaration_part . procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 188
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 108

    (7) declaration_part -> label_declaration_part type_definition_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 7 (declaration_part -> label_declaration_part type_definition_part procedure_and_function_declaration_part .)


state 109

    (12) declaration_part -> label_declaration_part type_definition_part variable_declaration_part . procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 189
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 110

    (8) declaration_part -> label_declaration_part variable_declaration_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 8 (declaration_part -> label_declaration_part variable_declaration_part procedure_and_function_declaration_part .)


state 111

    (31) variable_declaration_part -> VAR variable_declaration_list . SEMICOLON
    (33) variable_declaration_list -> variable_declaration_list . SEMICOLON variable_declaration

    SEMICOLON       shift and go to state 190


state 112

    (32) variable_declaration_list -> variable_declaration .

    SEMICOLON       reduce using rule 32 (variable_declaration_list -> variable_declaration .)


state 113

    (34) variable_declaration -> identifier_list . COLON type
    (243) identifier_list -> identifier_list . COMMA identifier

    COLON           shift and go to state 191
    COMMA           shift and go to state 192


state 114

    (242) identifier_list -> identifier .

    COLON           reduce using rule 242 (identifier_list -> identifier .)
    COMMA           reduce using rule 242 (identifier_list -> identifier .)
    RPAREN          reduce using rule 242 (identifier_list -> identifier .)


state 115

    (14) declaration_part -> constant_definition_part type_definition_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 14 (declaration_part -> constant_definition_part type_definition_part procedure_and_function_declaration_part .)


state 116

    (16) declaration_part -> constant_definition_part type_definition_part variable_declaration_part . procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 193
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 117

    (15) declaration_part -> constant_definition_part variable_declaration_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 15 (declaration_part -> constant_definition_part variable_declaration_part procedure_and_function_declaration_part .)


state 118

    (18) declaration_part -> type_definition_part variable_declaration_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 18 (declaration_part -> type_definition_part variable_declaration_part procedure_and_function_declaration_part .)


state 119

    (20) label_declaration_part -> LABEL label_list SEMICOLON .

    CONST           reduce using rule 20 (label_declaration_part -> LABEL label_list SEMICOLON .)
    TYPE            reduce using rule 20 (label_declaration_part -> LABEL label_list SEMICOLON .)
    VAR             reduce using rule 20 (label_declaration_part -> LABEL label_list SEMICOLON .)
    PROCEDURE       reduce using rule 20 (label_declaration_part -> LABEL label_list SEMICOLON .)
    FUNCTION        reduce using rule 20 (label_declaration_part -> LABEL label_list SEMICOLON .)


state 120

    (22) label_list -> label_list COMMA . label
    (272) label -> . integer_number
    (248) integer_number -> . digit_sequence
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

    label                          shift and go to state 194
    integer_number                 shift and go to state 38
    digit_sequence                 shift and go to state 39
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 121

    (261) digit_sequence -> sign unsigned_digit_sequence .
    (260) unsigned_digit_sequence -> unsigned_digit_sequence . digit
    (266) digit -> . NUMBER

  ! shift/reduce conflict for NUMBER resolved as shift
    SEMICOLON       reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    COMMA           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    COLON           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    END             reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    UNTIL           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    ELSE            reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    DOT             reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    PLUS            reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    MINUS           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    TIMES           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    DIVIDE          reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    DIV             reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    MOD             reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    AND             reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    OR              reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    EQUAL           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    NOTEQUAL        reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    LESS            reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    LESSEQUAL       reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    GREATER         reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    GREATEREQUAL    reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    IN              reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    DO              reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    THEN            reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    OF              reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    RPAREN          reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    RBRACKET        reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    TO              reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    DOWNTO          reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    RANGE_OPERATOR  reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    NUMBER          shift and go to state 45

  ! NUMBER          [ reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .) ]

    digit                          shift and go to state 122

state 122

    (260) unsigned_digit_sequence -> unsigned_digit_sequence digit .

    NUMBER          reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    SEMICOLON       reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    COMMA           reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    COLON           reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    END             reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    UNTIL           reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    ELSE            reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    DOT             reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    PLUS            reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    MINUS           reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    TIMES           reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    DIVIDE          reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    DIV             reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    MOD             reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    AND             reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    OR              reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    EQUAL           reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    NOTEQUAL        reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    LESS            reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    LESSEQUAL       reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    GREATER         reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    GREATEREQUAL    reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    IN              reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    DO              reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    THEN            reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    OF              reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    RPAREN          reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    RBRACKET        reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    TO              reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    DOWNTO          reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)
    RANGE_OPERATOR  reduce using rule 260 (unsigned_digit_sequence -> unsigned_digit_sequence digit .)


state 123

    (23) constant_definition_part -> CONST constant_definition_list SEMICOLON .
    (25) constant_definition_list -> constant_definition_list SEMICOLON . constant_definition
    (26) constant_definition -> . identifier EQUAL constant
    (226) identifier -> . ID

    TYPE            reduce using rule 23 (constant_definition_part -> CONST constant_definition_list SEMICOLON .)
    VAR             reduce using rule 23 (constant_definition_part -> CONST constant_definition_list SEMICOLON .)
    PROCEDURE       reduce using rule 23 (constant_definition_part -> CONST constant_definition_list SEMICOLON .)
    FUNCTION        reduce using rule 23 (constant_definition_part -> CONST constant_definition_list SEMICOLON .)
    ID              shift and go to state 22

    constant_definition            shift and go to state 195
    identifier                     shift and go to state 48

state 124

    (26) constant_definition -> identifier EQUAL . constant
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (226) identifier -> . ID
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    identifier                     shift and go to state 196
    constant                       shift and go to state 197
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 125

    (27) type_definition_part -> TYPE type_definition_list SEMICOLON .
    (29) type_definition_list -> type_definition_list SEMICOLON . type_definition
    (30) type_definition -> . identifier EQUAL type
    (226) identifier -> . ID

    VAR             reduce using rule 27 (type_definition_part -> TYPE type_definition_list SEMICOLON .)
    PROCEDURE       reduce using rule 27 (type_definition_part -> TYPE type_definition_list SEMICOLON .)
    FUNCTION        reduce using rule 27 (type_definition_part -> TYPE type_definition_list SEMICOLON .)
    ID              shift and go to state 22

    type_definition                shift and go to state 202
    identifier                     shift and go to state 51

state 126

    (30) type_definition -> identifier EQUAL . type
    (177) type -> . simple_type
    (178) type -> . structured_type
    (179) type -> . pointer_type
    (180) type -> . type_identifier
    (181) simple_type -> . subrange_type
    (182) simple_type -> . enumerated_type
    (187) structured_type -> . PACKED unpacked_structured_type
    (188) structured_type -> . unpacked_structured_type
    (203) pointer_type -> . UPARROW type_identifier
    (236) type_identifier -> . identifier
    (184) subrange_type -> . lower_bound RANGE_OPERATOR upper_bound
    (183) enumerated_type -> . LPAREN identifier_list RPAREN
    (189) unpacked_structured_type -> . array_type
    (190) unpacked_structured_type -> . record_type
    (191) unpacked_structured_type -> . set_type
    (192) unpacked_structured_type -> . file_type
    (226) identifier -> . ID
    (185) lower_bound -> . constant
    (193) array_type -> . ARRAY LBRACKET index_type_list RBRACKET OF element_type
    (198) record_type -> . RECORD field_list END
    (199) set_type -> . SET OF base_type
    (201) file_type -> . FILE OF file_component_type
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PACKED          shift and go to state 211
    UPARROW         shift and go to state 213
    LPAREN          shift and go to state 215
    ID              shift and go to state 22
    ARRAY           shift and go to state 221
    RECORD          shift and go to state 222
    SET             shift and go to state 223
    FILE            shift and go to state 224
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    NUMBER          shift and go to state 45

    identifier                     shift and go to state 203
    type                           shift and go to state 204
    simple_type                    shift and go to state 205
    structured_type                shift and go to state 206
    pointer_type                   shift and go to state 207
    type_identifier                shift and go to state 208
    subrange_type                  shift and go to state 209
    enumerated_type                shift and go to state 210
    unpacked_structured_type       shift and go to state 212
    lower_bound                    shift and go to state 214
    array_type                     shift and go to state 216
    record_type                    shift and go to state 217
    set_type                       shift and go to state 218
    file_type                      shift and go to state 219
    constant                       shift and go to state 220
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 127

    (37) procedure_declaration -> procedure_heading SEMICOLON procedure_body .

    SEMICOLON       reduce using rule 37 (procedure_declaration -> procedure_heading SEMICOLON procedure_body .)


state 128

    (38) procedure_declaration -> procedure_heading SEMICOLON directive .

    SEMICOLON       reduce using rule 38 (procedure_declaration -> procedure_heading SEMICOLON directive .)


state 129

    (40) procedure_body -> block .

    SEMICOLON       reduce using rule 40 (procedure_body -> block .)


state 130

    (45) directive -> FORWARD .

    SEMICOLON       reduce using rule 45 (directive -> FORWARD .)


state 131

    (39) procedure_declaration -> procedure_identification SEMICOLON procedure_body .

    SEMICOLON       reduce using rule 39 (procedure_declaration -> procedure_identification SEMICOLON procedure_body .)


state 132

    (41) function_declaration -> function_heading SEMICOLON function_body .

    SEMICOLON       reduce using rule 41 (function_declaration -> function_heading SEMICOLON function_body .)


state 133

    (42) function_declaration -> function_heading SEMICOLON directive .

    SEMICOLON       reduce using rule 42 (function_declaration -> function_heading SEMICOLON directive .)


state 134

    (44) function_body -> block .

    SEMICOLON       reduce using rule 44 (function_body -> block .)


state 135

    (43) function_declaration -> function_identification SEMICOLON function_body .

    SEMICOLON       reduce using rule 43 (function_declaration -> function_identification SEMICOLON function_body .)


state 136

    (48) procedure_heading -> PROCEDURE identifier formal_parameter_list .

    SEMICOLON       reduce using rule 48 (procedure_heading -> PROCEDURE identifier formal_parameter_list .)
    RPAREN          reduce using rule 48 (procedure_heading -> PROCEDURE identifier formal_parameter_list .)


state 137

    (54) formal_parameter_list -> LPAREN . formal_parameter_section_list RPAREN
    (55) formal_parameter_section_list -> . formal_parameter_section
    (56) formal_parameter_section_list -> . formal_parameter_section_list SEMICOLON formal_parameter_section
    (57) formal_parameter_section -> . value_parameter_section
    (58) formal_parameter_section -> . variable_parameter_section
    (59) formal_parameter_section -> . procedure_parameter_section
    (60) formal_parameter_section -> . function_parameter_section
    (61) value_parameter_section -> . identifier_list COLON parameter_type
    (62) variable_parameter_section -> . VAR identifier_list COLON parameter_type
    (63) procedure_parameter_section -> . procedure_heading
    (64) function_parameter_section -> . function_heading
    (242) identifier_list -> . identifier
    (243) identifier_list -> . identifier_list COMMA identifier
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (226) identifier -> . ID

    VAR             shift and go to state 232
    PROCEDURE       shift and go to state 235
    FUNCTION        shift and go to state 236
    ID              shift and go to state 22

    formal_parameter_section_list  shift and go to state 225
    formal_parameter_section       shift and go to state 226
    value_parameter_section        shift and go to state 227
    variable_parameter_section     shift and go to state 228
    procedure_parameter_section    shift and go to state 229
    function_parameter_section     shift and go to state 230
    identifier_list                shift and go to state 231
    procedure_heading              shift and go to state 233
    function_heading               shift and go to state 234
    identifier                     shift and go to state 114

state 138

    (49) function_heading -> FUNCTION identifier COLON . result_type
    (51) result_type -> . type_identifier
    (236) type_identifier -> . identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    identifier                     shift and go to state 237
    result_type                    shift and go to state 238
    type_identifier                shift and go to state 239

state 139

    (50) function_heading -> FUNCTION identifier formal_parameter_list . COLON result_type

    COLON           shift and go to state 240


state 140

    (3) program_heading -> PROGRAM identifier LPAREN identifier_list . RPAREN SEMICOLON
    (243) identifier_list -> identifier_list . COMMA identifier

    RPAREN          shift and go to state 241
    COMMA           shift and go to state 192


state 141

    (94) compound_statement -> BEGIN statement_sequence . END

    END             shift and go to state 242


state 142

    (46) statement_part -> BEGIN statement_sequence END .

    DOT             reduce using rule 46 (statement_part -> BEGIN statement_sequence END .)
    SEMICOLON       reduce using rule 46 (statement_part -> BEGIN statement_sequence END .)


state 143

    (77) statement_sequence -> statement SEMICOLON . statement
    (78) statement -> . label COLON simple_statement
    (79) statement -> . label COLON structured_statement
    (80) statement -> . simple_statement
    (81) statement -> . structured_statement
    (272) label -> . integer_number
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (248) integer_number -> . digit_sequence
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (266) digit -> . NUMBER
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    statement                      shift and go to state 243
    label                          shift and go to state 67
    simple_statement               shift and go to state 68
    structured_statement           shift and go to state 69
    integer_number                 shift and go to state 38
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    digit_sequence                 shift and go to state 39
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    variable_identifier            shift and go to state 94
    digit                          shift and go to state 44
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 144

    (78) statement -> label COLON . simple_statement
    (79) statement -> label COLON . structured_statement
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    ID              shift and go to state 22

    simple_statement               shift and go to state 244
    structured_statement           shift and go to state 245
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 145

    (85) assignment_statement -> variable ASSIGN . expression
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    variable                       shift and go to state 160
    expression                     shift and go to state 246
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 146

    (86) assignment_statement -> function_identifier ASSIGN . expression
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    function_identifier            shift and go to state 175
    expression                     shift and go to state 247
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 147

    (88) procedure_statement -> procedure_identifier actual_parameter_list .

    SEMICOLON       reduce using rule 88 (procedure_statement -> procedure_identifier actual_parameter_list .)
    END             reduce using rule 88 (procedure_statement -> procedure_identifier actual_parameter_list .)
    UNTIL           reduce using rule 88 (procedure_statement -> procedure_identifier actual_parameter_list .)
    ELSE            reduce using rule 88 (procedure_statement -> procedure_identifier actual_parameter_list .)


state 148

    (118) actual_parameter_list -> LPAREN . actual_parameter_list2 RPAREN
    (119) actual_parameter_list2 -> . actual_parameter
    (120) actual_parameter_list2 -> . actual_parameter_list2 COMMA actual_parameter
    (121) actual_parameter -> . actual_value
    (122) actual_parameter -> . actual_variable
    (123) actual_parameter -> . actual_procedure
    (124) actual_parameter -> . actual_function
    (125) actual_value -> . expression
    (231) actual_variable -> . variable
    (126) actual_procedure -> . procedure_identifier
    (127) actual_function -> . function_identifier
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (237) procedure_identifier -> . identifier
    (238) function_identifier -> . identifier
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    ID              shift and go to state 22
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    NUMBER          shift and go to state 45

    actual_parameter_list2         shift and go to state 248
    actual_parameter               shift and go to state 249
    actual_value                   shift and go to state 250
    actual_variable                shift and go to state 251
    actual_procedure               shift and go to state 252
    actual_function                shift and go to state 253
    expression                     shift and go to state 254
    variable                       shift and go to state 255
    procedure_identifier           shift and go to state 256
    function_identifier            shift and go to state 257
    simple_expression              shift and go to state 155
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 258
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    term                           shift and go to state 158
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    factor                         shift and go to state 159
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 149

    (89) goto_statement -> GOTO label .

    SEMICOLON       reduce using rule 89 (goto_statement -> GOTO label .)
    END             reduce using rule 89 (goto_statement -> GOTO label .)
    UNTIL           reduce using rule 89 (goto_statement -> GOTO label .)
    ELSE            reduce using rule 89 (goto_statement -> GOTO label .)


state 150

    (115) with_statement -> WITH record_variable_list . DO statement
    (117) record_variable_list -> record_variable_list . COMMA record_variable

    DO              shift and go to state 259
    COMMA           shift and go to state 260


state 151

    (116) record_variable_list -> record_variable .
    (170) field_designator -> record_variable . DOT field_identifier

    DO              reduce using rule 116 (record_variable_list -> record_variable .)
    COMMA           reduce using rule 116 (record_variable_list -> record_variable .)
    DOT             shift and go to state 184


state 152

    (229) record_variable -> variable .
    (230) pointer_variable -> variable .
    (232) array_variable -> variable .
    (227) file_variable -> variable .

  ! reduce/reduce conflict for UPARROW resolved using rule 227 (file_variable -> variable .)
    DOT             reduce using rule 229 (record_variable -> variable .)
    DO              reduce using rule 229 (record_variable -> variable .)
    COMMA           reduce using rule 229 (record_variable -> variable .)
    LBRACKET        reduce using rule 232 (array_variable -> variable .)
    UPARROW         reduce using rule 227 (file_variable -> variable .)

  ! UPARROW         [ reduce using rule 230 (pointer_variable -> variable .) ]


state 153

    (235) variable_identifier -> identifier .
    (233) field_identifier -> identifier .

  ! reduce/reduce conflict for DOT resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DO resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for UPARROW resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 233 (field_identifier -> identifier .)
    DOT             reduce using rule 233 (field_identifier -> identifier .)
    DO              reduce using rule 233 (field_identifier -> identifier .)
    COMMA           reduce using rule 233 (field_identifier -> identifier .)
    UPARROW         reduce using rule 233 (field_identifier -> identifier .)
    LBRACKET        reduce using rule 233 (field_identifier -> identifier .)

  ! DOT             [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! DO              [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! COMMA           [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! UPARROW         [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! LBRACKET        [ reduce using rule 235 (variable_identifier -> identifier .) ]


state 154

    (98) while_statement -> WHILE expression . DO statement

    DO              shift and go to state 261


state 155

    (128) expression -> simple_expression .
    (129) expression -> simple_expression . relational_operator simple_expression
    (146) relational_operator -> . EQUAL
    (147) relational_operator -> . NOTEQUAL
    (148) relational_operator -> . LESS
    (149) relational_operator -> . LESSEQUAL
    (150) relational_operator -> . GREATER
    (151) relational_operator -> . GREATEREQUAL
    (152) relational_operator -> . IN

    DO              reduce using rule 128 (expression -> simple_expression .)
    THEN            reduce using rule 128 (expression -> simple_expression .)
    OF              reduce using rule 128 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 128 (expression -> simple_expression .)
    END             reduce using rule 128 (expression -> simple_expression .)
    UNTIL           reduce using rule 128 (expression -> simple_expression .)
    ELSE            reduce using rule 128 (expression -> simple_expression .)
    RPAREN          reduce using rule 128 (expression -> simple_expression .)
    COMMA           reduce using rule 128 (expression -> simple_expression .)
    RBRACKET        reduce using rule 128 (expression -> simple_expression .)
    TO              reduce using rule 128 (expression -> simple_expression .)
    DOWNTO          reduce using rule 128 (expression -> simple_expression .)
    EQUAL           shift and go to state 263
    NOTEQUAL        shift and go to state 264
    LESS            shift and go to state 265
    LESSEQUAL       shift and go to state 266
    GREATER         shift and go to state 267
    GREATEREQUAL    shift and go to state 268
    IN              shift and go to state 269

    relational_operator            shift and go to state 262

state 156

    (130) simple_expression -> sign . term_list
    (261) digit_sequence -> sign . unsigned_digit_sequence
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (266) digit -> . NUMBER
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (263) sign -> . PLUS
    (264) sign -> . MINUS

    NUMBER          shift and go to state 45
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43

    sign                           shift and go to state 40
    term_list                      shift and go to state 270
    unsigned_digit_sequence        shift and go to state 271
    term                           shift and go to state 158
    digit                          shift and go to state 44
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 157

    (131) simple_expression -> term_list .
    (133) term_list -> term_list . addition_operator term
    (153) addition_operator -> . PLUS
    (154) addition_operator -> . MINUS
    (155) addition_operator -> . OR

    EQUAL           reduce using rule 131 (simple_expression -> term_list .)
    NOTEQUAL        reduce using rule 131 (simple_expression -> term_list .)
    LESS            reduce using rule 131 (simple_expression -> term_list .)
    LESSEQUAL       reduce using rule 131 (simple_expression -> term_list .)
    GREATER         reduce using rule 131 (simple_expression -> term_list .)
    GREATEREQUAL    reduce using rule 131 (simple_expression -> term_list .)
    IN              reduce using rule 131 (simple_expression -> term_list .)
    DO              reduce using rule 131 (simple_expression -> term_list .)
    THEN            reduce using rule 131 (simple_expression -> term_list .)
    OF              reduce using rule 131 (simple_expression -> term_list .)
    SEMICOLON       reduce using rule 131 (simple_expression -> term_list .)
    END             reduce using rule 131 (simple_expression -> term_list .)
    UNTIL           reduce using rule 131 (simple_expression -> term_list .)
    ELSE            reduce using rule 131 (simple_expression -> term_list .)
    RPAREN          reduce using rule 131 (simple_expression -> term_list .)
    COMMA           reduce using rule 131 (simple_expression -> term_list .)
    RBRACKET        reduce using rule 131 (simple_expression -> term_list .)
    TO              reduce using rule 131 (simple_expression -> term_list .)
    DOWNTO          reduce using rule 131 (simple_expression -> term_list .)
    PLUS            shift and go to state 273
    MINUS           shift and go to state 274
    OR              shift and go to state 275

    addition_operator              shift and go to state 272

state 158

    (132) term_list -> term .
    (135) term -> term . multiplication_operator factor
    (156) multiplication_operator -> . TIMES
    (157) multiplication_operator -> . DIVIDE
    (158) multiplication_operator -> . DIV
    (159) multiplication_operator -> . MOD
    (160) multiplication_operator -> . AND

    PLUS            reduce using rule 132 (term_list -> term .)
    MINUS           reduce using rule 132 (term_list -> term .)
    OR              reduce using rule 132 (term_list -> term .)
    EQUAL           reduce using rule 132 (term_list -> term .)
    NOTEQUAL        reduce using rule 132 (term_list -> term .)
    LESS            reduce using rule 132 (term_list -> term .)
    LESSEQUAL       reduce using rule 132 (term_list -> term .)
    GREATER         reduce using rule 132 (term_list -> term .)
    GREATEREQUAL    reduce using rule 132 (term_list -> term .)
    IN              reduce using rule 132 (term_list -> term .)
    DO              reduce using rule 132 (term_list -> term .)
    THEN            reduce using rule 132 (term_list -> term .)
    OF              reduce using rule 132 (term_list -> term .)
    SEMICOLON       reduce using rule 132 (term_list -> term .)
    END             reduce using rule 132 (term_list -> term .)
    UNTIL           reduce using rule 132 (term_list -> term .)
    ELSE            reduce using rule 132 (term_list -> term .)
    RPAREN          reduce using rule 132 (term_list -> term .)
    COMMA           reduce using rule 132 (term_list -> term .)
    RBRACKET        reduce using rule 132 (term_list -> term .)
    TO              reduce using rule 132 (term_list -> term .)
    DOWNTO          reduce using rule 132 (term_list -> term .)
    TIMES           shift and go to state 277
    DIVIDE          shift and go to state 278
    DIV             shift and go to state 279
    MOD             shift and go to state 280
    AND             shift and go to state 281

    multiplication_operator        shift and go to state 276

state 159

    (134) term -> factor .

    TIMES           reduce using rule 134 (term -> factor .)
    DIVIDE          reduce using rule 134 (term -> factor .)
    DIV             reduce using rule 134 (term -> factor .)
    MOD             reduce using rule 134 (term -> factor .)
    AND             reduce using rule 134 (term -> factor .)
    PLUS            reduce using rule 134 (term -> factor .)
    MINUS           reduce using rule 134 (term -> factor .)
    OR              reduce using rule 134 (term -> factor .)
    EQUAL           reduce using rule 134 (term -> factor .)
    NOTEQUAL        reduce using rule 134 (term -> factor .)
    LESS            reduce using rule 134 (term -> factor .)
    LESSEQUAL       reduce using rule 134 (term -> factor .)
    GREATER         reduce using rule 134 (term -> factor .)
    GREATEREQUAL    reduce using rule 134 (term -> factor .)
    IN              reduce using rule 134 (term -> factor .)
    DO              reduce using rule 134 (term -> factor .)
    THEN            reduce using rule 134 (term -> factor .)
    OF              reduce using rule 134 (term -> factor .)
    SEMICOLON       reduce using rule 134 (term -> factor .)
    END             reduce using rule 134 (term -> factor .)
    UNTIL           reduce using rule 134 (term -> factor .)
    ELSE            reduce using rule 134 (term -> factor .)
    RPAREN          reduce using rule 134 (term -> factor .)
    COMMA           reduce using rule 134 (term -> factor .)
    RBRACKET        reduce using rule 134 (term -> factor .)
    TO              reduce using rule 134 (term -> factor .)
    DOWNTO          reduce using rule 134 (term -> factor .)


state 160

    (136) factor -> variable .
    (230) pointer_variable -> variable .
    (232) array_variable -> variable .
    (229) record_variable -> variable .
    (227) file_variable -> variable .

  ! reduce/reduce conflict for UPARROW resolved using rule 227 (file_variable -> variable .)
    TIMES           reduce using rule 136 (factor -> variable .)
    DIVIDE          reduce using rule 136 (factor -> variable .)
    DIV             reduce using rule 136 (factor -> variable .)
    MOD             reduce using rule 136 (factor -> variable .)
    AND             reduce using rule 136 (factor -> variable .)
    PLUS            reduce using rule 136 (factor -> variable .)
    MINUS           reduce using rule 136 (factor -> variable .)
    OR              reduce using rule 136 (factor -> variable .)
    EQUAL           reduce using rule 136 (factor -> variable .)
    NOTEQUAL        reduce using rule 136 (factor -> variable .)
    LESS            reduce using rule 136 (factor -> variable .)
    LESSEQUAL       reduce using rule 136 (factor -> variable .)
    GREATER         reduce using rule 136 (factor -> variable .)
    GREATEREQUAL    reduce using rule 136 (factor -> variable .)
    IN              reduce using rule 136 (factor -> variable .)
    DO              reduce using rule 136 (factor -> variable .)
    THEN            reduce using rule 136 (factor -> variable .)
    OF              reduce using rule 136 (factor -> variable .)
    SEMICOLON       reduce using rule 136 (factor -> variable .)
    END             reduce using rule 136 (factor -> variable .)
    UNTIL           reduce using rule 136 (factor -> variable .)
    ELSE            reduce using rule 136 (factor -> variable .)
    RPAREN          reduce using rule 136 (factor -> variable .)
    COMMA           reduce using rule 136 (factor -> variable .)
    RBRACKET        reduce using rule 136 (factor -> variable .)
    TO              reduce using rule 136 (factor -> variable .)
    DOWNTO          reduce using rule 136 (factor -> variable .)
    LBRACKET        reduce using rule 232 (array_variable -> variable .)
    DOT             reduce using rule 229 (record_variable -> variable .)
    UPARROW         reduce using rule 227 (file_variable -> variable .)

  ! UPARROW         [ reduce using rule 230 (pointer_variable -> variable .) ]


state 161

    (137) factor -> number .

    TIMES           reduce using rule 137 (factor -> number .)
    DIVIDE          reduce using rule 137 (factor -> number .)
    DIV             reduce using rule 137 (factor -> number .)
    MOD             reduce using rule 137 (factor -> number .)
    AND             reduce using rule 137 (factor -> number .)
    PLUS            reduce using rule 137 (factor -> number .)
    MINUS           reduce using rule 137 (factor -> number .)
    OR              reduce using rule 137 (factor -> number .)
    EQUAL           reduce using rule 137 (factor -> number .)
    NOTEQUAL        reduce using rule 137 (factor -> number .)
    LESS            reduce using rule 137 (factor -> number .)
    LESSEQUAL       reduce using rule 137 (factor -> number .)
    GREATER         reduce using rule 137 (factor -> number .)
    GREATEREQUAL    reduce using rule 137 (factor -> number .)
    IN              reduce using rule 137 (factor -> number .)
    DO              reduce using rule 137 (factor -> number .)
    THEN            reduce using rule 137 (factor -> number .)
    OF              reduce using rule 137 (factor -> number .)
    SEMICOLON       reduce using rule 137 (factor -> number .)
    END             reduce using rule 137 (factor -> number .)
    UNTIL           reduce using rule 137 (factor -> number .)
    ELSE            reduce using rule 137 (factor -> number .)
    RPAREN          reduce using rule 137 (factor -> number .)
    COMMA           reduce using rule 137 (factor -> number .)
    RBRACKET        reduce using rule 137 (factor -> number .)
    TO              reduce using rule 137 (factor -> number .)
    DOWNTO          reduce using rule 137 (factor -> number .)


state 162

    (138) factor -> string .

    TIMES           reduce using rule 138 (factor -> string .)
    DIVIDE          reduce using rule 138 (factor -> string .)
    DIV             reduce using rule 138 (factor -> string .)
    MOD             reduce using rule 138 (factor -> string .)
    AND             reduce using rule 138 (factor -> string .)
    PLUS            reduce using rule 138 (factor -> string .)
    MINUS           reduce using rule 138 (factor -> string .)
    OR              reduce using rule 138 (factor -> string .)
    EQUAL           reduce using rule 138 (factor -> string .)
    NOTEQUAL        reduce using rule 138 (factor -> string .)
    LESS            reduce using rule 138 (factor -> string .)
    LESSEQUAL       reduce using rule 138 (factor -> string .)
    GREATER         reduce using rule 138 (factor -> string .)
    GREATEREQUAL    reduce using rule 138 (factor -> string .)
    IN              reduce using rule 138 (factor -> string .)
    DO              reduce using rule 138 (factor -> string .)
    THEN            reduce using rule 138 (factor -> string .)
    OF              reduce using rule 138 (factor -> string .)
    SEMICOLON       reduce using rule 138 (factor -> string .)
    END             reduce using rule 138 (factor -> string .)
    UNTIL           reduce using rule 138 (factor -> string .)
    ELSE            reduce using rule 138 (factor -> string .)
    RPAREN          reduce using rule 138 (factor -> string .)
    COMMA           reduce using rule 138 (factor -> string .)
    RBRACKET        reduce using rule 138 (factor -> string .)
    TO              reduce using rule 138 (factor -> string .)
    DOWNTO          reduce using rule 138 (factor -> string .)


state 163

    (139) factor -> set .

    TIMES           reduce using rule 139 (factor -> set .)
    DIVIDE          reduce using rule 139 (factor -> set .)
    DIV             reduce using rule 139 (factor -> set .)
    MOD             reduce using rule 139 (factor -> set .)
    AND             reduce using rule 139 (factor -> set .)
    PLUS            reduce using rule 139 (factor -> set .)
    MINUS           reduce using rule 139 (factor -> set .)
    OR              reduce using rule 139 (factor -> set .)
    EQUAL           reduce using rule 139 (factor -> set .)
    NOTEQUAL        reduce using rule 139 (factor -> set .)
    LESS            reduce using rule 139 (factor -> set .)
    LESSEQUAL       reduce using rule 139 (factor -> set .)
    GREATER         reduce using rule 139 (factor -> set .)
    GREATEREQUAL    reduce using rule 139 (factor -> set .)
    IN              reduce using rule 139 (factor -> set .)
    DO              reduce using rule 139 (factor -> set .)
    THEN            reduce using rule 139 (factor -> set .)
    OF              reduce using rule 139 (factor -> set .)
    SEMICOLON       reduce using rule 139 (factor -> set .)
    END             reduce using rule 139 (factor -> set .)
    UNTIL           reduce using rule 139 (factor -> set .)
    ELSE            reduce using rule 139 (factor -> set .)
    RPAREN          reduce using rule 139 (factor -> set .)
    COMMA           reduce using rule 139 (factor -> set .)
    RBRACKET        reduce using rule 139 (factor -> set .)
    TO              reduce using rule 139 (factor -> set .)
    DOWNTO          reduce using rule 139 (factor -> set .)


state 164

    (140) factor -> NIL .

    TIMES           reduce using rule 140 (factor -> NIL .)
    DIVIDE          reduce using rule 140 (factor -> NIL .)
    DIV             reduce using rule 140 (factor -> NIL .)
    MOD             reduce using rule 140 (factor -> NIL .)
    AND             reduce using rule 140 (factor -> NIL .)
    PLUS            reduce using rule 140 (factor -> NIL .)
    MINUS           reduce using rule 140 (factor -> NIL .)
    OR              reduce using rule 140 (factor -> NIL .)
    EQUAL           reduce using rule 140 (factor -> NIL .)
    NOTEQUAL        reduce using rule 140 (factor -> NIL .)
    LESS            reduce using rule 140 (factor -> NIL .)
    LESSEQUAL       reduce using rule 140 (factor -> NIL .)
    GREATER         reduce using rule 140 (factor -> NIL .)
    GREATEREQUAL    reduce using rule 140 (factor -> NIL .)
    IN              reduce using rule 140 (factor -> NIL .)
    DO              reduce using rule 140 (factor -> NIL .)
    THEN            reduce using rule 140 (factor -> NIL .)
    OF              reduce using rule 140 (factor -> NIL .)
    SEMICOLON       reduce using rule 140 (factor -> NIL .)
    END             reduce using rule 140 (factor -> NIL .)
    UNTIL           reduce using rule 140 (factor -> NIL .)
    ELSE            reduce using rule 140 (factor -> NIL .)
    RPAREN          reduce using rule 140 (factor -> NIL .)
    COMMA           reduce using rule 140 (factor -> NIL .)
    RBRACKET        reduce using rule 140 (factor -> NIL .)
    TO              reduce using rule 140 (factor -> NIL .)
    DOWNTO          reduce using rule 140 (factor -> NIL .)


state 165

    (141) factor -> constant_identifier .

    TIMES           reduce using rule 141 (factor -> constant_identifier .)
    DIVIDE          reduce using rule 141 (factor -> constant_identifier .)
    DIV             reduce using rule 141 (factor -> constant_identifier .)
    MOD             reduce using rule 141 (factor -> constant_identifier .)
    AND             reduce using rule 141 (factor -> constant_identifier .)
    PLUS            reduce using rule 141 (factor -> constant_identifier .)
    MINUS           reduce using rule 141 (factor -> constant_identifier .)
    OR              reduce using rule 141 (factor -> constant_identifier .)
    EQUAL           reduce using rule 141 (factor -> constant_identifier .)
    NOTEQUAL        reduce using rule 141 (factor -> constant_identifier .)
    LESS            reduce using rule 141 (factor -> constant_identifier .)
    LESSEQUAL       reduce using rule 141 (factor -> constant_identifier .)
    GREATER         reduce using rule 141 (factor -> constant_identifier .)
    GREATEREQUAL    reduce using rule 141 (factor -> constant_identifier .)
    IN              reduce using rule 141 (factor -> constant_identifier .)
    DO              reduce using rule 141 (factor -> constant_identifier .)
    THEN            reduce using rule 141 (factor -> constant_identifier .)
    OF              reduce using rule 141 (factor -> constant_identifier .)
    SEMICOLON       reduce using rule 141 (factor -> constant_identifier .)
    END             reduce using rule 141 (factor -> constant_identifier .)
    UNTIL           reduce using rule 141 (factor -> constant_identifier .)
    ELSE            reduce using rule 141 (factor -> constant_identifier .)
    RPAREN          reduce using rule 141 (factor -> constant_identifier .)
    COMMA           reduce using rule 141 (factor -> constant_identifier .)
    RBRACKET        reduce using rule 141 (factor -> constant_identifier .)
    TO              reduce using rule 141 (factor -> constant_identifier .)
    DOWNTO          reduce using rule 141 (factor -> constant_identifier .)


state 166

    (142) factor -> bound_identifier .

    TIMES           reduce using rule 142 (factor -> bound_identifier .)
    DIVIDE          reduce using rule 142 (factor -> bound_identifier .)
    DIV             reduce using rule 142 (factor -> bound_identifier .)
    MOD             reduce using rule 142 (factor -> bound_identifier .)
    AND             reduce using rule 142 (factor -> bound_identifier .)
    PLUS            reduce using rule 142 (factor -> bound_identifier .)
    MINUS           reduce using rule 142 (factor -> bound_identifier .)
    OR              reduce using rule 142 (factor -> bound_identifier .)
    EQUAL           reduce using rule 142 (factor -> bound_identifier .)
    NOTEQUAL        reduce using rule 142 (factor -> bound_identifier .)
    LESS            reduce using rule 142 (factor -> bound_identifier .)
    LESSEQUAL       reduce using rule 142 (factor -> bound_identifier .)
    GREATER         reduce using rule 142 (factor -> bound_identifier .)
    GREATEREQUAL    reduce using rule 142 (factor -> bound_identifier .)
    IN              reduce using rule 142 (factor -> bound_identifier .)
    DO              reduce using rule 142 (factor -> bound_identifier .)
    THEN            reduce using rule 142 (factor -> bound_identifier .)
    OF              reduce using rule 142 (factor -> bound_identifier .)
    SEMICOLON       reduce using rule 142 (factor -> bound_identifier .)
    END             reduce using rule 142 (factor -> bound_identifier .)
    UNTIL           reduce using rule 142 (factor -> bound_identifier .)
    ELSE            reduce using rule 142 (factor -> bound_identifier .)
    RPAREN          reduce using rule 142 (factor -> bound_identifier .)
    COMMA           reduce using rule 142 (factor -> bound_identifier .)
    RBRACKET        reduce using rule 142 (factor -> bound_identifier .)
    TO              reduce using rule 142 (factor -> bound_identifier .)
    DOWNTO          reduce using rule 142 (factor -> bound_identifier .)


state 167

    (143) factor -> function_designator .

    TIMES           reduce using rule 143 (factor -> function_designator .)
    DIVIDE          reduce using rule 143 (factor -> function_designator .)
    DIV             reduce using rule 143 (factor -> function_designator .)
    MOD             reduce using rule 143 (factor -> function_designator .)
    AND             reduce using rule 143 (factor -> function_designator .)
    PLUS            reduce using rule 143 (factor -> function_designator .)
    MINUS           reduce using rule 143 (factor -> function_designator .)
    OR              reduce using rule 143 (factor -> function_designator .)
    EQUAL           reduce using rule 143 (factor -> function_designator .)
    NOTEQUAL        reduce using rule 143 (factor -> function_designator .)
    LESS            reduce using rule 143 (factor -> function_designator .)
    LESSEQUAL       reduce using rule 143 (factor -> function_designator .)
    GREATER         reduce using rule 143 (factor -> function_designator .)
    GREATEREQUAL    reduce using rule 143 (factor -> function_designator .)
    IN              reduce using rule 143 (factor -> function_designator .)
    DO              reduce using rule 143 (factor -> function_designator .)
    THEN            reduce using rule 143 (factor -> function_designator .)
    OF              reduce using rule 143 (factor -> function_designator .)
    SEMICOLON       reduce using rule 143 (factor -> function_designator .)
    END             reduce using rule 143 (factor -> function_designator .)
    UNTIL           reduce using rule 143 (factor -> function_designator .)
    ELSE            reduce using rule 143 (factor -> function_designator .)
    RPAREN          reduce using rule 143 (factor -> function_designator .)
    COMMA           reduce using rule 143 (factor -> function_designator .)
    RBRACKET        reduce using rule 143 (factor -> function_designator .)
    TO              reduce using rule 143 (factor -> function_designator .)
    DOWNTO          reduce using rule 143 (factor -> function_designator .)


state 168

    (144) factor -> LPAREN . expression RPAREN
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    expression                     shift and go to state 282
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 169

    (145) factor -> NOT . factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

    factor                         shift and go to state 283
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 170

    (246) number -> integer_number .

    TIMES           reduce using rule 246 (number -> integer_number .)
    DIVIDE          reduce using rule 246 (number -> integer_number .)
    DIV             reduce using rule 246 (number -> integer_number .)
    MOD             reduce using rule 246 (number -> integer_number .)
    AND             reduce using rule 246 (number -> integer_number .)
    PLUS            reduce using rule 246 (number -> integer_number .)
    MINUS           reduce using rule 246 (number -> integer_number .)
    OR              reduce using rule 246 (number -> integer_number .)
    EQUAL           reduce using rule 246 (number -> integer_number .)
    NOTEQUAL        reduce using rule 246 (number -> integer_number .)
    LESS            reduce using rule 246 (number -> integer_number .)
    LESSEQUAL       reduce using rule 246 (number -> integer_number .)
    GREATER         reduce using rule 246 (number -> integer_number .)
    GREATEREQUAL    reduce using rule 246 (number -> integer_number .)
    IN              reduce using rule 246 (number -> integer_number .)
    DO              reduce using rule 246 (number -> integer_number .)
    THEN            reduce using rule 246 (number -> integer_number .)
    OF              reduce using rule 246 (number -> integer_number .)
    SEMICOLON       reduce using rule 246 (number -> integer_number .)
    RANGE_OPERATOR  reduce using rule 246 (number -> integer_number .)
    END             reduce using rule 246 (number -> integer_number .)
    UNTIL           reduce using rule 246 (number -> integer_number .)
    ELSE            reduce using rule 246 (number -> integer_number .)
    RPAREN          reduce using rule 246 (number -> integer_number .)
    COMMA           reduce using rule 246 (number -> integer_number .)
    RBRACKET        reduce using rule 246 (number -> integer_number .)
    TO              reduce using rule 246 (number -> integer_number .)
    DOWNTO          reduce using rule 246 (number -> integer_number .)
    COLON           reduce using rule 246 (number -> integer_number .)


state 171

    (247) number -> real_number .

    TIMES           reduce using rule 247 (number -> real_number .)
    DIVIDE          reduce using rule 247 (number -> real_number .)
    DIV             reduce using rule 247 (number -> real_number .)
    MOD             reduce using rule 247 (number -> real_number .)
    AND             reduce using rule 247 (number -> real_number .)
    PLUS            reduce using rule 247 (number -> real_number .)
    MINUS           reduce using rule 247 (number -> real_number .)
    OR              reduce using rule 247 (number -> real_number .)
    EQUAL           reduce using rule 247 (number -> real_number .)
    NOTEQUAL        reduce using rule 247 (number -> real_number .)
    LESS            reduce using rule 247 (number -> real_number .)
    LESSEQUAL       reduce using rule 247 (number -> real_number .)
    GREATER         reduce using rule 247 (number -> real_number .)
    GREATEREQUAL    reduce using rule 247 (number -> real_number .)
    IN              reduce using rule 247 (number -> real_number .)
    DO              reduce using rule 247 (number -> real_number .)
    THEN            reduce using rule 247 (number -> real_number .)
    OF              reduce using rule 247 (number -> real_number .)
    SEMICOLON       reduce using rule 247 (number -> real_number .)
    RANGE_OPERATOR  reduce using rule 247 (number -> real_number .)
    END             reduce using rule 247 (number -> real_number .)
    UNTIL           reduce using rule 247 (number -> real_number .)
    ELSE            reduce using rule 247 (number -> real_number .)
    RPAREN          reduce using rule 247 (number -> real_number .)
    COMMA           reduce using rule 247 (number -> real_number .)
    RBRACKET        reduce using rule 247 (number -> real_number .)
    TO              reduce using rule 247 (number -> real_number .)
    DOWNTO          reduce using rule 247 (number -> real_number .)
    COLON           reduce using rule 247 (number -> real_number .)


state 172

    (267) string -> QUOTE . string_character_list QUOTE
    (268) string_character_list -> . string_character
    (269) string_character_list -> . string_character_list string_character
    (270) string_character -> . ANY_CHARACTER_EXCEPT_QUOTE
    (271) string_character -> . SQUOTE SQUOTE

    ANY_CHARACTER_EXCEPT_QUOTE shift and go to state 286
    SQUOTE          shift and go to state 287

    string_character_list          shift and go to state 284
    string_character               shift and go to state 285

state 173

    (171) set -> LBRACKET . element_list RBRACKET
    (172) element_list -> .
    (173) element_list -> . expression_list
    (244) expression_list -> . expression
    (245) expression_list -> . expression_list COMMA expression
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    RBRACKET        reduce using rule 172 (element_list -> .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    element_list                   shift and go to state 288
    expression_list                shift and go to state 289
    expression                     shift and go to state 290
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 174

    (234) constant_identifier -> identifier .
    (239) bound_identifier -> identifier .
    (238) function_identifier -> identifier .
    (235) variable_identifier -> identifier .
    (233) field_identifier -> identifier .

  ! reduce/reduce conflict for TIMES resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DIV resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for EQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for LESS resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for GREATER resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for IN resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DO resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for THEN resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for OF resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for END resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for UNTIL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for ELSE resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for TO resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DIV resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for EQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for LESS resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for GREATER resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for IN resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DO resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for THEN resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for OF resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for END resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for UNTIL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for ELSE resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for TO resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DIV resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for EQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for LESS resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for GREATER resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for IN resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DO resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for THEN resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for OF resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for END resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for UNTIL resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for ELSE resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for TO resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 234 (constant_identifier -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DIV resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for EQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LESS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for GREATER resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for IN resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DO resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for UPARROW resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DOT resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for THEN resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for OF resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for END resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for UNTIL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for ELSE resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for TO resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 233 (field_identifier -> identifier .)
    LPAREN          reduce using rule 238 (function_identifier -> identifier .)
    TIMES           reduce using rule 233 (field_identifier -> identifier .)
    DIVIDE          reduce using rule 233 (field_identifier -> identifier .)
    DIV             reduce using rule 233 (field_identifier -> identifier .)
    MOD             reduce using rule 233 (field_identifier -> identifier .)
    AND             reduce using rule 233 (field_identifier -> identifier .)
    PLUS            reduce using rule 233 (field_identifier -> identifier .)
    MINUS           reduce using rule 233 (field_identifier -> identifier .)
    OR              reduce using rule 233 (field_identifier -> identifier .)
    EQUAL           reduce using rule 233 (field_identifier -> identifier .)
    NOTEQUAL        reduce using rule 233 (field_identifier -> identifier .)
    LESS            reduce using rule 233 (field_identifier -> identifier .)
    LESSEQUAL       reduce using rule 233 (field_identifier -> identifier .)
    GREATER         reduce using rule 233 (field_identifier -> identifier .)
    GREATEREQUAL    reduce using rule 233 (field_identifier -> identifier .)
    IN              reduce using rule 233 (field_identifier -> identifier .)
    DO              reduce using rule 233 (field_identifier -> identifier .)
    UPARROW         reduce using rule 233 (field_identifier -> identifier .)
    LBRACKET        reduce using rule 233 (field_identifier -> identifier .)
    DOT             reduce using rule 233 (field_identifier -> identifier .)
    THEN            reduce using rule 233 (field_identifier -> identifier .)
    OF              reduce using rule 233 (field_identifier -> identifier .)
    SEMICOLON       reduce using rule 233 (field_identifier -> identifier .)
    END             reduce using rule 233 (field_identifier -> identifier .)
    UNTIL           reduce using rule 233 (field_identifier -> identifier .)
    ELSE            reduce using rule 233 (field_identifier -> identifier .)
    RPAREN          reduce using rule 233 (field_identifier -> identifier .)
    COMMA           reduce using rule 233 (field_identifier -> identifier .)
    RBRACKET        reduce using rule 233 (field_identifier -> identifier .)
    TO              reduce using rule 233 (field_identifier -> identifier .)
    DOWNTO          reduce using rule 233 (field_identifier -> identifier .)

  ! TIMES           [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! DIVIDE          [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! DIV             [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! MOD             [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! AND             [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! PLUS            [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! MINUS           [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! OR              [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! EQUAL           [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! NOTEQUAL        [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! LESS            [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! LESSEQUAL       [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! GREATER         [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! GREATEREQUAL    [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! IN              [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! DO              [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! THEN            [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! OF              [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! SEMICOLON       [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! END             [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! UNTIL           [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! ELSE            [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! RPAREN          [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! COMMA           [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! RBRACKET        [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! TO              [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! DOWNTO          [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! TIMES           [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! DIVIDE          [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! DIV             [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! MOD             [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! AND             [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! PLUS            [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! MINUS           [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! OR              [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! EQUAL           [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! NOTEQUAL        [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! LESS            [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! LESSEQUAL       [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! GREATER         [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! GREATEREQUAL    [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! IN              [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! DO              [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! THEN            [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! OF              [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! SEMICOLON       [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! END             [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! UNTIL           [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! ELSE            [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! RPAREN          [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! COMMA           [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! RBRACKET        [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! TO              [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! DOWNTO          [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! TIMES           [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! DIVIDE          [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! DIV             [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! MOD             [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! AND             [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! PLUS            [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! MINUS           [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! OR              [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! EQUAL           [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! NOTEQUAL        [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! LESS            [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! LESSEQUAL       [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! GREATER         [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! GREATEREQUAL    [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! IN              [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! DO              [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! THEN            [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! OF              [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! SEMICOLON       [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! END             [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! UNTIL           [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! ELSE            [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! RPAREN          [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! COMMA           [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! RBRACKET        [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! TO              [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! DOWNTO          [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! TIMES           [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! DIVIDE          [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! DIV             [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! MOD             [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! AND             [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! PLUS            [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! MINUS           [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! OR              [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! EQUAL           [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! NOTEQUAL        [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! LESS            [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! LESSEQUAL       [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! GREATER         [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! GREATEREQUAL    [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! IN              [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! DO              [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! UPARROW         [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! LBRACKET        [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! DOT             [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! THEN            [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! OF              [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! SEMICOLON       [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! END             [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! UNTIL           [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! ELSE            [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! RPAREN          [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! COMMA           [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! RBRACKET        [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! TO              [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! DOWNTO          [ reduce using rule 235 (variable_identifier -> identifier .) ]


state 175

    (174) function_designator -> function_identifier .
    (175) function_designator -> function_identifier . actual_parameter_list
    (118) actual_parameter_list -> . LPAREN actual_parameter_list2 RPAREN

    TIMES           reduce using rule 174 (function_designator -> function_identifier .)
    DIVIDE          reduce using rule 174 (function_designator -> function_identifier .)
    DIV             reduce using rule 174 (function_designator -> function_identifier .)
    MOD             reduce using rule 174 (function_designator -> function_identifier .)
    AND             reduce using rule 174 (function_designator -> function_identifier .)
    PLUS            reduce using rule 174 (function_designator -> function_identifier .)
    MINUS           reduce using rule 174 (function_designator -> function_identifier .)
    OR              reduce using rule 174 (function_designator -> function_identifier .)
    EQUAL           reduce using rule 174 (function_designator -> function_identifier .)
    NOTEQUAL        reduce using rule 174 (function_designator -> function_identifier .)
    LESS            reduce using rule 174 (function_designator -> function_identifier .)
    LESSEQUAL       reduce using rule 174 (function_designator -> function_identifier .)
    GREATER         reduce using rule 174 (function_designator -> function_identifier .)
    GREATEREQUAL    reduce using rule 174 (function_designator -> function_identifier .)
    IN              reduce using rule 174 (function_designator -> function_identifier .)
    DO              reduce using rule 174 (function_designator -> function_identifier .)
    THEN            reduce using rule 174 (function_designator -> function_identifier .)
    OF              reduce using rule 174 (function_designator -> function_identifier .)
    SEMICOLON       reduce using rule 174 (function_designator -> function_identifier .)
    END             reduce using rule 174 (function_designator -> function_identifier .)
    UNTIL           reduce using rule 174 (function_designator -> function_identifier .)
    ELSE            reduce using rule 174 (function_designator -> function_identifier .)
    RPAREN          reduce using rule 174 (function_designator -> function_identifier .)
    COMMA           reduce using rule 174 (function_designator -> function_identifier .)
    RBRACKET        reduce using rule 174 (function_designator -> function_identifier .)
    TO              reduce using rule 174 (function_designator -> function_identifier .)
    DOWNTO          reduce using rule 174 (function_designator -> function_identifier .)
    LPAREN          shift and go to state 148

    actual_parameter_list          shift and go to state 291

state 176

    (248) integer_number -> digit_sequence .
    (249) real_number -> digit_sequence . DOT
    (250) real_number -> digit_sequence . DOT digit_sequence
    (251) real_number -> digit_sequence . DOT digit_sequence scale_factor
    (252) real_number -> digit_sequence . DOT scale_factor
    (253) real_number -> digit_sequence . scale_factor
    (254) scale_factor -> . digit_sequence DOT
    (255) scale_factor -> . digit_sequence DOT digit_sequence
    (256) scale_factor -> . digit_sequence DOT digit_sequence scale_factor
    (257) scale_factor -> . digit_sequence DOT scale_factor
    (258) scale_factor -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    TIMES           reduce using rule 248 (integer_number -> digit_sequence .)
    DIVIDE          reduce using rule 248 (integer_number -> digit_sequence .)
    DIV             reduce using rule 248 (integer_number -> digit_sequence .)
    MOD             reduce using rule 248 (integer_number -> digit_sequence .)
    AND             reduce using rule 248 (integer_number -> digit_sequence .)
    OR              reduce using rule 248 (integer_number -> digit_sequence .)
    EQUAL           reduce using rule 248 (integer_number -> digit_sequence .)
    NOTEQUAL        reduce using rule 248 (integer_number -> digit_sequence .)
    LESS            reduce using rule 248 (integer_number -> digit_sequence .)
    LESSEQUAL       reduce using rule 248 (integer_number -> digit_sequence .)
    GREATER         reduce using rule 248 (integer_number -> digit_sequence .)
    GREATEREQUAL    reduce using rule 248 (integer_number -> digit_sequence .)
    IN              reduce using rule 248 (integer_number -> digit_sequence .)
    DO              reduce using rule 248 (integer_number -> digit_sequence .)
    THEN            reduce using rule 248 (integer_number -> digit_sequence .)
    OF              reduce using rule 248 (integer_number -> digit_sequence .)
    SEMICOLON       reduce using rule 248 (integer_number -> digit_sequence .)
    RANGE_OPERATOR  reduce using rule 248 (integer_number -> digit_sequence .)
    END             reduce using rule 248 (integer_number -> digit_sequence .)
    UNTIL           reduce using rule 248 (integer_number -> digit_sequence .)
    ELSE            reduce using rule 248 (integer_number -> digit_sequence .)
    RPAREN          reduce using rule 248 (integer_number -> digit_sequence .)
    COMMA           reduce using rule 248 (integer_number -> digit_sequence .)
    RBRACKET        reduce using rule 248 (integer_number -> digit_sequence .)
    TO              reduce using rule 248 (integer_number -> digit_sequence .)
    DOWNTO          reduce using rule 248 (integer_number -> digit_sequence .)
    COLON           reduce using rule 248 (integer_number -> digit_sequence .)
    DOT             shift and go to state 293
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

  ! PLUS            [ reduce using rule 248 (integer_number -> digit_sequence .) ]
  ! MINUS           [ reduce using rule 248 (integer_number -> digit_sequence .) ]

    digit_sequence                 shift and go to state 292
    scale_factor                   shift and go to state 294
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 177

    (99) repeat_statement -> REPEAT statement_sequence . UNTIL expression

    UNTIL           shift and go to state 295


state 178

    (100) for_statement -> FOR variable_identifier . ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> FOR variable_identifier . ASSIGN initial_expression DOWNTO final_expression DO statement

    ASSIGN          shift and go to state 296


state 179

    (235) variable_identifier -> identifier .

    ASSIGN          reduce using rule 235 (variable_identifier -> identifier .)


state 180

    (106) if_statement -> IF expression . THEN statement
    (107) if_statement -> IF expression . THEN statement ELSE statement

    THEN            shift and go to state 297


state 181

    (108) case_statement -> CASE expression . OF case_limb_list END
    (109) case_statement -> CASE expression . OF case_limb_list SEMICOLON END

    OF              shift and go to state 298


state 182

    (228) referenced_variable -> pointer_variable UPARROW .

    ASSIGN          reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    UPARROW         reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    LBRACKET        reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    DOT             reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    DO              reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    COMMA           reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    TIMES           reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    DIVIDE          reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    DIV             reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    MOD             reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    AND             reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    PLUS            reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    MINUS           reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    OR              reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    EQUAL           reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    NOTEQUAL        reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    LESS            reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    LESSEQUAL       reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    GREATER         reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    GREATEREQUAL    reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    IN              reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    THEN            reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    OF              reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    SEMICOLON       reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    END             reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    UNTIL           reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    ELSE            reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    RPAREN          reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    RBRACKET        reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    TO              reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)
    DOWNTO          reduce using rule 228 (referenced_variable -> pointer_variable UPARROW .)


state 183

    (169) indexed_variable -> array_variable LBRACKET . expression_list RBRACKET
    (244) expression_list -> . expression
    (245) expression_list -> . expression_list COMMA expression
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    array_variable                 shift and go to state 102
    expression_list                shift and go to state 299
    expression                     shift and go to state 290
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 184

    (170) field_designator -> record_variable DOT . field_identifier
    (233) field_identifier -> . identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    field_identifier               shift and go to state 300
    identifier                     shift and go to state 301

state 185

    (176) file_buffer -> file_variable UPARROW .

    ASSIGN          reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    UPARROW         reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    LBRACKET        reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    DOT             reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    DO              reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    COMMA           reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    TIMES           reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    DIVIDE          reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    DIV             reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    MOD             reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    AND             reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    PLUS            reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    MINUS           reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    OR              reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    EQUAL           reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    NOTEQUAL        reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    LESS            reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    LESSEQUAL       reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    GREATER         reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    GREATEREQUAL    reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    IN              reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    THEN            reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    OF              reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    SEMICOLON       reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    END             reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    UNTIL           reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    ELSE            reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    RPAREN          reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    RBRACKET        reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    TO              reduce using rule 176 (file_buffer -> file_variable UPARROW .)
    DOWNTO          reduce using rule 176 (file_buffer -> file_variable UPARROW .)


state 186

    (9) declaration_part -> label_declaration_part constant_definition_part type_definition_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 9 (declaration_part -> label_declaration_part constant_definition_part type_definition_part procedure_and_function_declaration_part .)


state 187

    (10) declaration_part -> label_declaration_part constant_definition_part type_definition_part variable_declaration_part . procedure_and_function_declaration_part
    (35) procedure_and_function_declaration_part -> . procedure_declaration SEMICOLON
    (36) procedure_and_function_declaration_part -> . function_declaration SEMICOLON
    (37) procedure_declaration -> . procedure_heading SEMICOLON procedure_body
    (38) procedure_declaration -> . procedure_heading SEMICOLON directive
    (39) procedure_declaration -> . procedure_identification SEMICOLON procedure_body
    (41) function_declaration -> . function_heading SEMICOLON function_body
    (42) function_declaration -> . function_heading SEMICOLON directive
    (43) function_declaration -> . function_identification SEMICOLON function_body
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (52) procedure_identification -> . PROCEDURE procedure_identifier
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (53) function_identification -> . FUNCTION function_identifier

    PROCEDURE       shift and go to state 19
    FUNCTION        shift and go to state 20

    procedure_and_function_declaration_part shift and go to state 302
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    procedure_identification       shift and go to state 16
    function_heading               shift and go to state 17
    function_identification        shift and go to state 18

state 188

    (11) declaration_part -> label_declaration_part constant_definition_part variable_declaration_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 11 (declaration_part -> label_declaration_part constant_definition_part variable_declaration_part procedure_and_function_declaration_part .)


state 189

    (12) declaration_part -> label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 12 (declaration_part -> label_declaration_part type_definition_part variable_declaration_part procedure_and_function_declaration_part .)


state 190

    (31) variable_declaration_part -> VAR variable_declaration_list SEMICOLON .
    (33) variable_declaration_list -> variable_declaration_list SEMICOLON . variable_declaration
    (34) variable_declaration -> . identifier_list COLON type
    (242) identifier_list -> . identifier
    (243) identifier_list -> . identifier_list COMMA identifier
    (226) identifier -> . ID

    PROCEDURE       reduce using rule 31 (variable_declaration_part -> VAR variable_declaration_list SEMICOLON .)
    FUNCTION        reduce using rule 31 (variable_declaration_part -> VAR variable_declaration_list SEMICOLON .)
    ID              shift and go to state 22

    variable_declaration           shift and go to state 303
    identifier_list                shift and go to state 113
    identifier                     shift and go to state 114

state 191

    (34) variable_declaration -> identifier_list COLON . type
    (177) type -> . simple_type
    (178) type -> . structured_type
    (179) type -> . pointer_type
    (180) type -> . type_identifier
    (181) simple_type -> . subrange_type
    (182) simple_type -> . enumerated_type
    (187) structured_type -> . PACKED unpacked_structured_type
    (188) structured_type -> . unpacked_structured_type
    (203) pointer_type -> . UPARROW type_identifier
    (236) type_identifier -> . identifier
    (184) subrange_type -> . lower_bound RANGE_OPERATOR upper_bound
    (183) enumerated_type -> . LPAREN identifier_list RPAREN
    (189) unpacked_structured_type -> . array_type
    (190) unpacked_structured_type -> . record_type
    (191) unpacked_structured_type -> . set_type
    (192) unpacked_structured_type -> . file_type
    (226) identifier -> . ID
    (185) lower_bound -> . constant
    (193) array_type -> . ARRAY LBRACKET index_type_list RBRACKET OF element_type
    (198) record_type -> . RECORD field_list END
    (199) set_type -> . SET OF base_type
    (201) file_type -> . FILE OF file_component_type
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PACKED          shift and go to state 211
    UPARROW         shift and go to state 213
    LPAREN          shift and go to state 215
    ID              shift and go to state 22
    ARRAY           shift and go to state 221
    RECORD          shift and go to state 222
    SET             shift and go to state 223
    FILE            shift and go to state 224
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    NUMBER          shift and go to state 45

    type                           shift and go to state 304
    simple_type                    shift and go to state 205
    structured_type                shift and go to state 206
    pointer_type                   shift and go to state 207
    type_identifier                shift and go to state 208
    subrange_type                  shift and go to state 209
    enumerated_type                shift and go to state 210
    unpacked_structured_type       shift and go to state 212
    identifier                     shift and go to state 203
    lower_bound                    shift and go to state 214
    array_type                     shift and go to state 216
    record_type                    shift and go to state 217
    set_type                       shift and go to state 218
    file_type                      shift and go to state 219
    constant                       shift and go to state 220
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 192

    (243) identifier_list -> identifier_list COMMA . identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    identifier                     shift and go to state 305

state 193

    (16) declaration_part -> constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 16 (declaration_part -> constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part .)


state 194

    (22) label_list -> label_list COMMA label .

    SEMICOLON       reduce using rule 22 (label_list -> label_list COMMA label .)
    COMMA           reduce using rule 22 (label_list -> label_list COMMA label .)


state 195

    (25) constant_definition_list -> constant_definition_list SEMICOLON constant_definition .

    SEMICOLON       reduce using rule 25 (constant_definition_list -> constant_definition_list SEMICOLON constant_definition .)


state 196

    (234) constant_identifier -> identifier .

    SEMICOLON       reduce using rule 234 (constant_identifier -> identifier .)
    RANGE_OPERATOR  reduce using rule 234 (constant_identifier -> identifier .)
    COLON           reduce using rule 234 (constant_identifier -> identifier .)
    COMMA           reduce using rule 234 (constant_identifier -> identifier .)
    RBRACKET        reduce using rule 234 (constant_identifier -> identifier .)
    END             reduce using rule 234 (constant_identifier -> identifier .)
    RPAREN          reduce using rule 234 (constant_identifier -> identifier .)


state 197

    (26) constant_definition -> identifier EQUAL constant .

    SEMICOLON       reduce using rule 26 (constant_definition -> identifier EQUAL constant .)


state 198

    (273) constant -> sign . constant_identifier
    (274) constant -> sign . number
    (261) digit_sequence -> sign . unsigned_digit_sequence
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (226) identifier -> . ID
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (266) digit -> . NUMBER
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (263) sign -> . PLUS
    (264) sign -> . MINUS

    ID              shift and go to state 22
    NUMBER          shift and go to state 45
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43

    sign                           shift and go to state 40
    constant_identifier            shift and go to state 306
    number                         shift and go to state 307
    unsigned_digit_sequence        shift and go to state 271
    identifier                     shift and go to state 196
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit                          shift and go to state 44
    digit_sequence                 shift and go to state 176

state 199

    (275) constant -> constant_identifier .

    SEMICOLON       reduce using rule 275 (constant -> constant_identifier .)
    RANGE_OPERATOR  reduce using rule 275 (constant -> constant_identifier .)
    COLON           reduce using rule 275 (constant -> constant_identifier .)
    COMMA           reduce using rule 275 (constant -> constant_identifier .)
    RBRACKET        reduce using rule 275 (constant -> constant_identifier .)
    END             reduce using rule 275 (constant -> constant_identifier .)
    RPAREN          reduce using rule 275 (constant -> constant_identifier .)


state 200

    (276) constant -> number .

    SEMICOLON       reduce using rule 276 (constant -> number .)
    RANGE_OPERATOR  reduce using rule 276 (constant -> number .)
    COLON           reduce using rule 276 (constant -> number .)
    COMMA           reduce using rule 276 (constant -> number .)
    RBRACKET        reduce using rule 276 (constant -> number .)
    END             reduce using rule 276 (constant -> number .)
    RPAREN          reduce using rule 276 (constant -> number .)


state 201

    (277) constant -> string .

    SEMICOLON       reduce using rule 277 (constant -> string .)
    RANGE_OPERATOR  reduce using rule 277 (constant -> string .)
    COLON           reduce using rule 277 (constant -> string .)
    COMMA           reduce using rule 277 (constant -> string .)
    RBRACKET        reduce using rule 277 (constant -> string .)
    END             reduce using rule 277 (constant -> string .)
    RPAREN          reduce using rule 277 (constant -> string .)


state 202

    (29) type_definition_list -> type_definition_list SEMICOLON type_definition .

    SEMICOLON       reduce using rule 29 (type_definition_list -> type_definition_list SEMICOLON type_definition .)


state 203

    (236) type_identifier -> identifier .
    (234) constant_identifier -> identifier .

    SEMICOLON       reduce using rule 236 (type_identifier -> identifier .)
    END             reduce using rule 236 (type_identifier -> identifier .)
    RPAREN          reduce using rule 236 (type_identifier -> identifier .)
    RANGE_OPERATOR  reduce using rule 234 (constant_identifier -> identifier .)


state 204

    (30) type_definition -> identifier EQUAL type .

    SEMICOLON       reduce using rule 30 (type_definition -> identifier EQUAL type .)


state 205

    (177) type -> simple_type .

    SEMICOLON       reduce using rule 177 (type -> simple_type .)
    END             reduce using rule 177 (type -> simple_type .)
    RPAREN          reduce using rule 177 (type -> simple_type .)


state 206

    (178) type -> structured_type .

    SEMICOLON       reduce using rule 178 (type -> structured_type .)
    END             reduce using rule 178 (type -> structured_type .)
    RPAREN          reduce using rule 178 (type -> structured_type .)


state 207

    (179) type -> pointer_type .

    SEMICOLON       reduce using rule 179 (type -> pointer_type .)
    END             reduce using rule 179 (type -> pointer_type .)
    RPAREN          reduce using rule 179 (type -> pointer_type .)


state 208

    (180) type -> type_identifier .

    SEMICOLON       reduce using rule 180 (type -> type_identifier .)
    END             reduce using rule 180 (type -> type_identifier .)
    RPAREN          reduce using rule 180 (type -> type_identifier .)


state 209

    (181) simple_type -> subrange_type .

    SEMICOLON       reduce using rule 181 (simple_type -> subrange_type .)
    RBRACKET        reduce using rule 181 (simple_type -> subrange_type .)
    COMMA           reduce using rule 181 (simple_type -> subrange_type .)
    END             reduce using rule 181 (simple_type -> subrange_type .)
    RPAREN          reduce using rule 181 (simple_type -> subrange_type .)


state 210

    (182) simple_type -> enumerated_type .

    SEMICOLON       reduce using rule 182 (simple_type -> enumerated_type .)
    RBRACKET        reduce using rule 182 (simple_type -> enumerated_type .)
    COMMA           reduce using rule 182 (simple_type -> enumerated_type .)
    END             reduce using rule 182 (simple_type -> enumerated_type .)
    RPAREN          reduce using rule 182 (simple_type -> enumerated_type .)


state 211

    (187) structured_type -> PACKED . unpacked_structured_type
    (189) unpacked_structured_type -> . array_type
    (190) unpacked_structured_type -> . record_type
    (191) unpacked_structured_type -> . set_type
    (192) unpacked_structured_type -> . file_type
    (193) array_type -> . ARRAY LBRACKET index_type_list RBRACKET OF element_type
    (198) record_type -> . RECORD field_list END
    (199) set_type -> . SET OF base_type
    (201) file_type -> . FILE OF file_component_type

    ARRAY           shift and go to state 221
    RECORD          shift and go to state 222
    SET             shift and go to state 223
    FILE            shift and go to state 224

    unpacked_structured_type       shift and go to state 308
    array_type                     shift and go to state 216
    record_type                    shift and go to state 217
    set_type                       shift and go to state 218
    file_type                      shift and go to state 219

state 212

    (188) structured_type -> unpacked_structured_type .

    SEMICOLON       reduce using rule 188 (structured_type -> unpacked_structured_type .)
    END             reduce using rule 188 (structured_type -> unpacked_structured_type .)
    RPAREN          reduce using rule 188 (structured_type -> unpacked_structured_type .)


state 213

    (203) pointer_type -> UPARROW . type_identifier
    (236) type_identifier -> . identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    type_identifier                shift and go to state 309
    identifier                     shift and go to state 237

state 214

    (184) subrange_type -> lower_bound . RANGE_OPERATOR upper_bound

    RANGE_OPERATOR  shift and go to state 310


state 215

    (183) enumerated_type -> LPAREN . identifier_list RPAREN
    (242) identifier_list -> . identifier
    (243) identifier_list -> . identifier_list COMMA identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    identifier_list                shift and go to state 311
    identifier                     shift and go to state 114

state 216

    (189) unpacked_structured_type -> array_type .

    SEMICOLON       reduce using rule 189 (unpacked_structured_type -> array_type .)
    END             reduce using rule 189 (unpacked_structured_type -> array_type .)
    RPAREN          reduce using rule 189 (unpacked_structured_type -> array_type .)


state 217

    (190) unpacked_structured_type -> record_type .

    SEMICOLON       reduce using rule 190 (unpacked_structured_type -> record_type .)
    END             reduce using rule 190 (unpacked_structured_type -> record_type .)
    RPAREN          reduce using rule 190 (unpacked_structured_type -> record_type .)


state 218

    (191) unpacked_structured_type -> set_type .

    SEMICOLON       reduce using rule 191 (unpacked_structured_type -> set_type .)
    END             reduce using rule 191 (unpacked_structured_type -> set_type .)
    RPAREN          reduce using rule 191 (unpacked_structured_type -> set_type .)


state 219

    (192) unpacked_structured_type -> file_type .

    SEMICOLON       reduce using rule 192 (unpacked_structured_type -> file_type .)
    END             reduce using rule 192 (unpacked_structured_type -> file_type .)
    RPAREN          reduce using rule 192 (unpacked_structured_type -> file_type .)


state 220

    (185) lower_bound -> constant .

    RANGE_OPERATOR  reduce using rule 185 (lower_bound -> constant .)


state 221

    (193) array_type -> ARRAY . LBRACKET index_type_list RBRACKET OF element_type

    LBRACKET        shift and go to state 312


state 222

    (198) record_type -> RECORD . field_list END
    (204) field_list -> .
    (205) field_list -> . fixed_part
    (206) field_list -> . fixed_part SEMICOLON variant_part
    (207) field_list -> . fixed_part SEMICOLON variant_part SEMICOLON
    (208) field_list -> . variant_part
    (209) field_list -> . variant_part SEMICOLON
    (210) fixed_part -> . record_section
    (211) fixed_part -> . fixed_part SEMICOLON record_section
    (213) variant_part -> . CASE tag_field type_identifier OF variant_list
    (212) record_section -> . identifier_list COLON type
    (242) identifier_list -> . identifier
    (243) identifier_list -> . identifier_list COMMA identifier
    (226) identifier -> . ID

    END             reduce using rule 204 (field_list -> .)
    CASE            shift and go to state 317
    ID              shift and go to state 22

    field_list                     shift and go to state 313
    fixed_part                     shift and go to state 314
    variant_part                   shift and go to state 315
    record_section                 shift and go to state 316
    identifier_list                shift and go to state 318
    identifier                     shift and go to state 114

state 223

    (199) set_type -> SET . OF base_type

    OF              shift and go to state 319


state 224

    (201) file_type -> FILE . OF file_component_type

    OF              shift and go to state 320


state 225

    (54) formal_parameter_list -> LPAREN formal_parameter_section_list . RPAREN
    (56) formal_parameter_section_list -> formal_parameter_section_list . SEMICOLON formal_parameter_section

    RPAREN          shift and go to state 321
    SEMICOLON       shift and go to state 322


state 226

    (55) formal_parameter_section_list -> formal_parameter_section .

    RPAREN          reduce using rule 55 (formal_parameter_section_list -> formal_parameter_section .)
    SEMICOLON       reduce using rule 55 (formal_parameter_section_list -> formal_parameter_section .)


state 227

    (57) formal_parameter_section -> value_parameter_section .

    RPAREN          reduce using rule 57 (formal_parameter_section -> value_parameter_section .)
    SEMICOLON       reduce using rule 57 (formal_parameter_section -> value_parameter_section .)


state 228

    (58) formal_parameter_section -> variable_parameter_section .

    RPAREN          reduce using rule 58 (formal_parameter_section -> variable_parameter_section .)
    SEMICOLON       reduce using rule 58 (formal_parameter_section -> variable_parameter_section .)


state 229

    (59) formal_parameter_section -> procedure_parameter_section .

    RPAREN          reduce using rule 59 (formal_parameter_section -> procedure_parameter_section .)
    SEMICOLON       reduce using rule 59 (formal_parameter_section -> procedure_parameter_section .)


state 230

    (60) formal_parameter_section -> function_parameter_section .

    RPAREN          reduce using rule 60 (formal_parameter_section -> function_parameter_section .)
    SEMICOLON       reduce using rule 60 (formal_parameter_section -> function_parameter_section .)


state 231

    (61) value_parameter_section -> identifier_list . COLON parameter_type
    (243) identifier_list -> identifier_list . COMMA identifier

    COLON           shift and go to state 323
    COMMA           shift and go to state 192


state 232

    (62) variable_parameter_section -> VAR . identifier_list COLON parameter_type
    (242) identifier_list -> . identifier
    (243) identifier_list -> . identifier_list COMMA identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    identifier_list                shift and go to state 324
    identifier                     shift and go to state 114

state 233

    (63) procedure_parameter_section -> procedure_heading .

    RPAREN          reduce using rule 63 (procedure_parameter_section -> procedure_heading .)
    SEMICOLON       reduce using rule 63 (procedure_parameter_section -> procedure_heading .)


state 234

    (64) function_parameter_section -> function_heading .

    RPAREN          reduce using rule 64 (function_parameter_section -> function_heading .)
    SEMICOLON       reduce using rule 64 (function_parameter_section -> function_heading .)


state 235

    (47) procedure_heading -> PROCEDURE . identifier
    (48) procedure_heading -> PROCEDURE . identifier formal_parameter_list
    (226) identifier -> . ID

    ID              shift and go to state 22

    identifier                     shift and go to state 325

state 236

    (49) function_heading -> FUNCTION . identifier COLON result_type
    (50) function_heading -> FUNCTION . identifier formal_parameter_list COLON result_type
    (226) identifier -> . ID

    ID              shift and go to state 22

    identifier                     shift and go to state 326

state 237

    (236) type_identifier -> identifier .

    SEMICOLON       reduce using rule 236 (type_identifier -> identifier .)
    RPAREN          reduce using rule 236 (type_identifier -> identifier .)
    END             reduce using rule 236 (type_identifier -> identifier .)
    OF              reduce using rule 236 (type_identifier -> identifier .)
    RBRACKET        reduce using rule 236 (type_identifier -> identifier .)


state 238

    (49) function_heading -> FUNCTION identifier COLON result_type .

    SEMICOLON       reduce using rule 49 (function_heading -> FUNCTION identifier COLON result_type .)
    RPAREN          reduce using rule 49 (function_heading -> FUNCTION identifier COLON result_type .)


state 239

    (51) result_type -> type_identifier .

    SEMICOLON       reduce using rule 51 (result_type -> type_identifier .)
    RPAREN          reduce using rule 51 (result_type -> type_identifier .)


state 240

    (50) function_heading -> FUNCTION identifier formal_parameter_list COLON . result_type
    (51) result_type -> . type_identifier
    (236) type_identifier -> . identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    identifier                     shift and go to state 237
    result_type                    shift and go to state 327
    type_identifier                shift and go to state 239

state 241

    (3) program_heading -> PROGRAM identifier LPAREN identifier_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 328


state 242

    (94) compound_statement -> BEGIN statement_sequence END .

    SEMICOLON       reduce using rule 94 (compound_statement -> BEGIN statement_sequence END .)
    END             reduce using rule 94 (compound_statement -> BEGIN statement_sequence END .)
    UNTIL           reduce using rule 94 (compound_statement -> BEGIN statement_sequence END .)
    ELSE            reduce using rule 94 (compound_statement -> BEGIN statement_sequence END .)


state 243

    (77) statement_sequence -> statement SEMICOLON statement .

    END             reduce using rule 77 (statement_sequence -> statement SEMICOLON statement .)
    UNTIL           reduce using rule 77 (statement_sequence -> statement SEMICOLON statement .)


state 244

    (78) statement -> label COLON simple_statement .

    SEMICOLON       reduce using rule 78 (statement -> label COLON simple_statement .)
    END             reduce using rule 78 (statement -> label COLON simple_statement .)
    UNTIL           reduce using rule 78 (statement -> label COLON simple_statement .)
    ELSE            reduce using rule 78 (statement -> label COLON simple_statement .)


state 245

    (79) statement -> label COLON structured_statement .

    SEMICOLON       reduce using rule 79 (statement -> label COLON structured_statement .)
    END             reduce using rule 79 (statement -> label COLON structured_statement .)
    UNTIL           reduce using rule 79 (statement -> label COLON structured_statement .)
    ELSE            reduce using rule 79 (statement -> label COLON structured_statement .)


state 246

    (85) assignment_statement -> variable ASSIGN expression .

    SEMICOLON       reduce using rule 85 (assignment_statement -> variable ASSIGN expression .)
    END             reduce using rule 85 (assignment_statement -> variable ASSIGN expression .)
    UNTIL           reduce using rule 85 (assignment_statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 85 (assignment_statement -> variable ASSIGN expression .)


state 247

    (86) assignment_statement -> function_identifier ASSIGN expression .

    SEMICOLON       reduce using rule 86 (assignment_statement -> function_identifier ASSIGN expression .)
    END             reduce using rule 86 (assignment_statement -> function_identifier ASSIGN expression .)
    UNTIL           reduce using rule 86 (assignment_statement -> function_identifier ASSIGN expression .)
    ELSE            reduce using rule 86 (assignment_statement -> function_identifier ASSIGN expression .)


state 248

    (118) actual_parameter_list -> LPAREN actual_parameter_list2 . RPAREN
    (120) actual_parameter_list2 -> actual_parameter_list2 . COMMA actual_parameter

    RPAREN          shift and go to state 329
    COMMA           shift and go to state 330


state 249

    (119) actual_parameter_list2 -> actual_parameter .

    RPAREN          reduce using rule 119 (actual_parameter_list2 -> actual_parameter .)
    COMMA           reduce using rule 119 (actual_parameter_list2 -> actual_parameter .)


state 250

    (121) actual_parameter -> actual_value .

    RPAREN          reduce using rule 121 (actual_parameter -> actual_value .)
    COMMA           reduce using rule 121 (actual_parameter -> actual_value .)


state 251

    (122) actual_parameter -> actual_variable .

    RPAREN          reduce using rule 122 (actual_parameter -> actual_variable .)
    COMMA           reduce using rule 122 (actual_parameter -> actual_variable .)


state 252

    (123) actual_parameter -> actual_procedure .

    RPAREN          reduce using rule 123 (actual_parameter -> actual_procedure .)
    COMMA           reduce using rule 123 (actual_parameter -> actual_procedure .)


state 253

    (124) actual_parameter -> actual_function .

    RPAREN          reduce using rule 124 (actual_parameter -> actual_function .)
    COMMA           reduce using rule 124 (actual_parameter -> actual_function .)


state 254

    (125) actual_value -> expression .

    RPAREN          reduce using rule 125 (actual_value -> expression .)
    COMMA           reduce using rule 125 (actual_value -> expression .)


state 255

    (231) actual_variable -> variable .
    (230) pointer_variable -> variable .
    (232) array_variable -> variable .
    (229) record_variable -> variable .
    (227) file_variable -> variable .
    (136) factor -> variable .

  ! reduce/reduce conflict for UPARROW resolved using rule 227 (file_variable -> variable .)
  ! reduce/reduce conflict for RPAREN resolved using rule 136 (factor -> variable .)
  ! reduce/reduce conflict for COMMA resolved using rule 136 (factor -> variable .)
    LBRACKET        reduce using rule 232 (array_variable -> variable .)
    DOT             reduce using rule 229 (record_variable -> variable .)
    UPARROW         reduce using rule 227 (file_variable -> variable .)
    TIMES           reduce using rule 136 (factor -> variable .)
    DIVIDE          reduce using rule 136 (factor -> variable .)
    DIV             reduce using rule 136 (factor -> variable .)
    MOD             reduce using rule 136 (factor -> variable .)
    AND             reduce using rule 136 (factor -> variable .)
    PLUS            reduce using rule 136 (factor -> variable .)
    MINUS           reduce using rule 136 (factor -> variable .)
    OR              reduce using rule 136 (factor -> variable .)
    EQUAL           reduce using rule 136 (factor -> variable .)
    NOTEQUAL        reduce using rule 136 (factor -> variable .)
    LESS            reduce using rule 136 (factor -> variable .)
    LESSEQUAL       reduce using rule 136 (factor -> variable .)
    GREATER         reduce using rule 136 (factor -> variable .)
    GREATEREQUAL    reduce using rule 136 (factor -> variable .)
    IN              reduce using rule 136 (factor -> variable .)
    RPAREN          reduce using rule 136 (factor -> variable .)
    COMMA           reduce using rule 136 (factor -> variable .)

  ! RPAREN          [ reduce using rule 231 (actual_variable -> variable .) ]
  ! COMMA           [ reduce using rule 231 (actual_variable -> variable .) ]
  ! UPARROW         [ reduce using rule 230 (pointer_variable -> variable .) ]


state 256

    (126) actual_procedure -> procedure_identifier .

    RPAREN          reduce using rule 126 (actual_procedure -> procedure_identifier .)
    COMMA           reduce using rule 126 (actual_procedure -> procedure_identifier .)


state 257

    (127) actual_function -> function_identifier .
    (174) function_designator -> function_identifier .
    (175) function_designator -> function_identifier . actual_parameter_list
    (118) actual_parameter_list -> . LPAREN actual_parameter_list2 RPAREN

  ! reduce/reduce conflict for RPAREN resolved using rule 127 (actual_function -> function_identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 127 (actual_function -> function_identifier .)
    RPAREN          reduce using rule 127 (actual_function -> function_identifier .)
    COMMA           reduce using rule 127 (actual_function -> function_identifier .)
    TIMES           reduce using rule 174 (function_designator -> function_identifier .)
    DIVIDE          reduce using rule 174 (function_designator -> function_identifier .)
    DIV             reduce using rule 174 (function_designator -> function_identifier .)
    MOD             reduce using rule 174 (function_designator -> function_identifier .)
    AND             reduce using rule 174 (function_designator -> function_identifier .)
    PLUS            reduce using rule 174 (function_designator -> function_identifier .)
    MINUS           reduce using rule 174 (function_designator -> function_identifier .)
    OR              reduce using rule 174 (function_designator -> function_identifier .)
    EQUAL           reduce using rule 174 (function_designator -> function_identifier .)
    NOTEQUAL        reduce using rule 174 (function_designator -> function_identifier .)
    LESS            reduce using rule 174 (function_designator -> function_identifier .)
    LESSEQUAL       reduce using rule 174 (function_designator -> function_identifier .)
    GREATER         reduce using rule 174 (function_designator -> function_identifier .)
    GREATEREQUAL    reduce using rule 174 (function_designator -> function_identifier .)
    IN              reduce using rule 174 (function_designator -> function_identifier .)
    LPAREN          shift and go to state 148

  ! RPAREN          [ reduce using rule 174 (function_designator -> function_identifier .) ]
  ! COMMA           [ reduce using rule 174 (function_designator -> function_identifier .) ]

    actual_parameter_list          shift and go to state 291

state 258

    (237) procedure_identifier -> identifier .
    (238) function_identifier -> identifier .
    (235) variable_identifier -> identifier .
    (233) field_identifier -> identifier .
    (234) constant_identifier -> identifier .
    (239) bound_identifier -> identifier .

  ! reduce/reduce conflict for RPAREN resolved using rule 237 (procedure_identifier -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 237 (procedure_identifier -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for DIV resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for EQUAL resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for LESS resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for GREATER resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for IN resolved using rule 235 (variable_identifier -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for UPARROW resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DOT resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DIV resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for EQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LESS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for GREATER resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for IN resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DIV resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for EQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LESS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for GREATER resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for IN resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for DIV resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for EQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LESS resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for GREATER resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for IN resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 233 (field_identifier -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 233 (field_identifier -> identifier .)
    LPAREN          reduce using rule 238 (function_identifier -> identifier .)
    RPAREN          reduce using rule 233 (field_identifier -> identifier .)
    COMMA           reduce using rule 233 (field_identifier -> identifier .)
    UPARROW         reduce using rule 233 (field_identifier -> identifier .)
    LBRACKET        reduce using rule 233 (field_identifier -> identifier .)
    DOT             reduce using rule 233 (field_identifier -> identifier .)
    TIMES           reduce using rule 233 (field_identifier -> identifier .)
    DIVIDE          reduce using rule 233 (field_identifier -> identifier .)
    DIV             reduce using rule 233 (field_identifier -> identifier .)
    MOD             reduce using rule 233 (field_identifier -> identifier .)
    AND             reduce using rule 233 (field_identifier -> identifier .)
    PLUS            reduce using rule 233 (field_identifier -> identifier .)
    MINUS           reduce using rule 233 (field_identifier -> identifier .)
    OR              reduce using rule 233 (field_identifier -> identifier .)
    EQUAL           reduce using rule 233 (field_identifier -> identifier .)
    NOTEQUAL        reduce using rule 233 (field_identifier -> identifier .)
    LESS            reduce using rule 233 (field_identifier -> identifier .)
    LESSEQUAL       reduce using rule 233 (field_identifier -> identifier .)
    GREATER         reduce using rule 233 (field_identifier -> identifier .)
    GREATEREQUAL    reduce using rule 233 (field_identifier -> identifier .)
    IN              reduce using rule 233 (field_identifier -> identifier .)

  ! RPAREN          [ reduce using rule 237 (procedure_identifier -> identifier .) ]
  ! COMMA           [ reduce using rule 237 (procedure_identifier -> identifier .) ]
  ! RPAREN          [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! COMMA           [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! TIMES           [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! DIVIDE          [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! DIV             [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! MOD             [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! AND             [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! PLUS            [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! MINUS           [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! OR              [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! EQUAL           [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! NOTEQUAL        [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! LESS            [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! LESSEQUAL       [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! GREATER         [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! GREATEREQUAL    [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! IN              [ reduce using rule 238 (function_identifier -> identifier .) ]
  ! RPAREN          [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! COMMA           [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! UPARROW         [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! LBRACKET        [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! DOT             [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! TIMES           [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! DIVIDE          [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! DIV             [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! MOD             [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! AND             [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! PLUS            [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! MINUS           [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! OR              [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! EQUAL           [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! NOTEQUAL        [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! LESS            [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! LESSEQUAL       [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! GREATER         [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! GREATEREQUAL    [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! IN              [ reduce using rule 235 (variable_identifier -> identifier .) ]
  ! TIMES           [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! DIVIDE          [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! DIV             [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! MOD             [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! AND             [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! PLUS            [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! MINUS           [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! OR              [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! EQUAL           [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! NOTEQUAL        [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! LESS            [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! LESSEQUAL       [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! GREATER         [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! GREATEREQUAL    [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! IN              [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! RPAREN          [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! COMMA           [ reduce using rule 234 (constant_identifier -> identifier .) ]
  ! TIMES           [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! DIVIDE          [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! DIV             [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! MOD             [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! AND             [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! PLUS            [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! MINUS           [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! OR              [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! EQUAL           [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! NOTEQUAL        [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! LESS            [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! LESSEQUAL       [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! GREATER         [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! GREATEREQUAL    [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! IN              [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! RPAREN          [ reduce using rule 239 (bound_identifier -> identifier .) ]
  ! COMMA           [ reduce using rule 239 (bound_identifier -> identifier .) ]


state 259

    (115) with_statement -> WITH record_variable_list DO . statement
    (78) statement -> . label COLON simple_statement
    (79) statement -> . label COLON structured_statement
    (80) statement -> . simple_statement
    (81) statement -> . structured_statement
    (272) label -> . integer_number
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (248) integer_number -> . digit_sequence
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (266) digit -> . NUMBER
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    statement                      shift and go to state 331
    label                          shift and go to state 67
    simple_statement               shift and go to state 68
    structured_statement           shift and go to state 69
    integer_number                 shift and go to state 38
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    digit_sequence                 shift and go to state 39
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    variable_identifier            shift and go to state 94
    digit                          shift and go to state 44
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 260

    (117) record_variable_list -> record_variable_list COMMA . record_variable
    (229) record_variable -> . variable
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (226) identifier -> . ID
    (232) array_variable -> . variable
    (227) file_variable -> . variable

    ID              shift and go to state 22

    record_variable                shift and go to state 332
    variable                       shift and go to state 152
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    identifier                     shift and go to state 153
    array_variable                 shift and go to state 102
    file_variable                  shift and go to state 104

state 261

    (98) while_statement -> WHILE expression DO . statement
    (78) statement -> . label COLON simple_statement
    (79) statement -> . label COLON structured_statement
    (80) statement -> . simple_statement
    (81) statement -> . structured_statement
    (272) label -> . integer_number
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (248) integer_number -> . digit_sequence
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (266) digit -> . NUMBER
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    statement                      shift and go to state 333
    label                          shift and go to state 67
    simple_statement               shift and go to state 68
    structured_statement           shift and go to state 69
    integer_number                 shift and go to state 38
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    digit_sequence                 shift and go to state 39
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    variable_identifier            shift and go to state 94
    digit                          shift and go to state 44
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 262

    (129) expression -> simple_expression relational_operator . simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    simple_expression              shift and go to state 334
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 263

    (146) relational_operator -> EQUAL .

    PLUS            reduce using rule 146 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 146 (relational_operator -> EQUAL .)
    NIL             reduce using rule 146 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 146 (relational_operator -> EQUAL .)
    NOT             reduce using rule 146 (relational_operator -> EQUAL .)
    QUOTE           reduce using rule 146 (relational_operator -> EQUAL .)
    LBRACKET        reduce using rule 146 (relational_operator -> EQUAL .)
    ID              reduce using rule 146 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 146 (relational_operator -> EQUAL .)


state 264

    (147) relational_operator -> NOTEQUAL .

    PLUS            reduce using rule 147 (relational_operator -> NOTEQUAL .)
    MINUS           reduce using rule 147 (relational_operator -> NOTEQUAL .)
    NIL             reduce using rule 147 (relational_operator -> NOTEQUAL .)
    LPAREN          reduce using rule 147 (relational_operator -> NOTEQUAL .)
    NOT             reduce using rule 147 (relational_operator -> NOTEQUAL .)
    QUOTE           reduce using rule 147 (relational_operator -> NOTEQUAL .)
    LBRACKET        reduce using rule 147 (relational_operator -> NOTEQUAL .)
    ID              reduce using rule 147 (relational_operator -> NOTEQUAL .)
    NUMBER          reduce using rule 147 (relational_operator -> NOTEQUAL .)


state 265

    (148) relational_operator -> LESS .

    PLUS            reduce using rule 148 (relational_operator -> LESS .)
    MINUS           reduce using rule 148 (relational_operator -> LESS .)
    NIL             reduce using rule 148 (relational_operator -> LESS .)
    LPAREN          reduce using rule 148 (relational_operator -> LESS .)
    NOT             reduce using rule 148 (relational_operator -> LESS .)
    QUOTE           reduce using rule 148 (relational_operator -> LESS .)
    LBRACKET        reduce using rule 148 (relational_operator -> LESS .)
    ID              reduce using rule 148 (relational_operator -> LESS .)
    NUMBER          reduce using rule 148 (relational_operator -> LESS .)


state 266

    (149) relational_operator -> LESSEQUAL .

    PLUS            reduce using rule 149 (relational_operator -> LESSEQUAL .)
    MINUS           reduce using rule 149 (relational_operator -> LESSEQUAL .)
    NIL             reduce using rule 149 (relational_operator -> LESSEQUAL .)
    LPAREN          reduce using rule 149 (relational_operator -> LESSEQUAL .)
    NOT             reduce using rule 149 (relational_operator -> LESSEQUAL .)
    QUOTE           reduce using rule 149 (relational_operator -> LESSEQUAL .)
    LBRACKET        reduce using rule 149 (relational_operator -> LESSEQUAL .)
    ID              reduce using rule 149 (relational_operator -> LESSEQUAL .)
    NUMBER          reduce using rule 149 (relational_operator -> LESSEQUAL .)


state 267

    (150) relational_operator -> GREATER .

    PLUS            reduce using rule 150 (relational_operator -> GREATER .)
    MINUS           reduce using rule 150 (relational_operator -> GREATER .)
    NIL             reduce using rule 150 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 150 (relational_operator -> GREATER .)
    NOT             reduce using rule 150 (relational_operator -> GREATER .)
    QUOTE           reduce using rule 150 (relational_operator -> GREATER .)
    LBRACKET        reduce using rule 150 (relational_operator -> GREATER .)
    ID              reduce using rule 150 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 150 (relational_operator -> GREATER .)


state 268

    (151) relational_operator -> GREATEREQUAL .

    PLUS            reduce using rule 151 (relational_operator -> GREATEREQUAL .)
    MINUS           reduce using rule 151 (relational_operator -> GREATEREQUAL .)
    NIL             reduce using rule 151 (relational_operator -> GREATEREQUAL .)
    LPAREN          reduce using rule 151 (relational_operator -> GREATEREQUAL .)
    NOT             reduce using rule 151 (relational_operator -> GREATEREQUAL .)
    QUOTE           reduce using rule 151 (relational_operator -> GREATEREQUAL .)
    LBRACKET        reduce using rule 151 (relational_operator -> GREATEREQUAL .)
    ID              reduce using rule 151 (relational_operator -> GREATEREQUAL .)
    NUMBER          reduce using rule 151 (relational_operator -> GREATEREQUAL .)


state 269

    (152) relational_operator -> IN .

    PLUS            reduce using rule 152 (relational_operator -> IN .)
    MINUS           reduce using rule 152 (relational_operator -> IN .)
    NIL             reduce using rule 152 (relational_operator -> IN .)
    LPAREN          reduce using rule 152 (relational_operator -> IN .)
    NOT             reduce using rule 152 (relational_operator -> IN .)
    QUOTE           reduce using rule 152 (relational_operator -> IN .)
    LBRACKET        reduce using rule 152 (relational_operator -> IN .)
    ID              reduce using rule 152 (relational_operator -> IN .)
    NUMBER          reduce using rule 152 (relational_operator -> IN .)


state 270

    (130) simple_expression -> sign term_list .
    (133) term_list -> term_list . addition_operator term
    (153) addition_operator -> . PLUS
    (154) addition_operator -> . MINUS
    (155) addition_operator -> . OR

    EQUAL           reduce using rule 130 (simple_expression -> sign term_list .)
    NOTEQUAL        reduce using rule 130 (simple_expression -> sign term_list .)
    LESS            reduce using rule 130 (simple_expression -> sign term_list .)
    LESSEQUAL       reduce using rule 130 (simple_expression -> sign term_list .)
    GREATER         reduce using rule 130 (simple_expression -> sign term_list .)
    GREATEREQUAL    reduce using rule 130 (simple_expression -> sign term_list .)
    IN              reduce using rule 130 (simple_expression -> sign term_list .)
    DO              reduce using rule 130 (simple_expression -> sign term_list .)
    THEN            reduce using rule 130 (simple_expression -> sign term_list .)
    OF              reduce using rule 130 (simple_expression -> sign term_list .)
    SEMICOLON       reduce using rule 130 (simple_expression -> sign term_list .)
    END             reduce using rule 130 (simple_expression -> sign term_list .)
    UNTIL           reduce using rule 130 (simple_expression -> sign term_list .)
    ELSE            reduce using rule 130 (simple_expression -> sign term_list .)
    RPAREN          reduce using rule 130 (simple_expression -> sign term_list .)
    COMMA           reduce using rule 130 (simple_expression -> sign term_list .)
    RBRACKET        reduce using rule 130 (simple_expression -> sign term_list .)
    TO              reduce using rule 130 (simple_expression -> sign term_list .)
    DOWNTO          reduce using rule 130 (simple_expression -> sign term_list .)
    PLUS            shift and go to state 273
    MINUS           shift and go to state 274
    OR              shift and go to state 275

    addition_operator              shift and go to state 272

state 271

    (261) digit_sequence -> sign unsigned_digit_sequence .
    (260) unsigned_digit_sequence -> unsigned_digit_sequence . digit
    (262) digit_sequence -> unsigned_digit_sequence .
    (266) digit -> . NUMBER

  ! reduce/reduce conflict for DOT resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for PLUS resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for MINUS resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for NUMBER resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for TIMES resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for DIV resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for MOD resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for AND resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for OR resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for EQUAL resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for LESS resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for GREATER resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for IN resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for DO resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for THEN resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for OF resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for END resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for UNTIL resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for ELSE resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for RPAREN resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for COMMA resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for TO resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for RANGE_OPERATOR resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! reduce/reduce conflict for COLON resolved using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
  ! shift/reduce conflict for NUMBER resolved as shift
    DOT             reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    PLUS            reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    MINUS           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    TIMES           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    DIVIDE          reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    DIV             reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    MOD             reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    AND             reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    OR              reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    EQUAL           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    NOTEQUAL        reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    LESS            reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    LESSEQUAL       reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    GREATER         reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    GREATEREQUAL    reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    IN              reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    DO              reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    THEN            reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    OF              reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    SEMICOLON       reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    RANGE_OPERATOR  reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    END             reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    UNTIL           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    ELSE            reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    RPAREN          reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    COMMA           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    RBRACKET        reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    TO              reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    DOWNTO          reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    COLON           reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .)
    NUMBER          shift and go to state 45

  ! NUMBER          [ reduce using rule 261 (digit_sequence -> sign unsigned_digit_sequence .) ]
  ! DOT             [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! PLUS            [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! MINUS           [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! NUMBER          [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! TIMES           [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! DIVIDE          [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! DIV             [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! MOD             [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! AND             [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! OR              [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! EQUAL           [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! NOTEQUAL        [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! LESS            [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! LESSEQUAL       [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! GREATER         [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! GREATEREQUAL    [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! IN              [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! DO              [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! THEN            [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! OF              [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! SEMICOLON       [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! END             [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! UNTIL           [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! ELSE            [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! RPAREN          [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! COMMA           [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! RBRACKET        [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! TO              [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! DOWNTO          [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! RANGE_OPERATOR  [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]
  ! COLON           [ reduce using rule 262 (digit_sequence -> unsigned_digit_sequence .) ]

    digit                          shift and go to state 122

state 272

    (133) term_list -> term_list addition_operator . term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

    term                           shift and go to state 335
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 273

    (153) addition_operator -> PLUS .

    NIL             reduce using rule 153 (addition_operator -> PLUS .)
    LPAREN          reduce using rule 153 (addition_operator -> PLUS .)
    NOT             reduce using rule 153 (addition_operator -> PLUS .)
    QUOTE           reduce using rule 153 (addition_operator -> PLUS .)
    LBRACKET        reduce using rule 153 (addition_operator -> PLUS .)
    ID              reduce using rule 153 (addition_operator -> PLUS .)
    PLUS            reduce using rule 153 (addition_operator -> PLUS .)
    MINUS           reduce using rule 153 (addition_operator -> PLUS .)
    NUMBER          reduce using rule 153 (addition_operator -> PLUS .)


state 274

    (154) addition_operator -> MINUS .

    NIL             reduce using rule 154 (addition_operator -> MINUS .)
    LPAREN          reduce using rule 154 (addition_operator -> MINUS .)
    NOT             reduce using rule 154 (addition_operator -> MINUS .)
    QUOTE           reduce using rule 154 (addition_operator -> MINUS .)
    LBRACKET        reduce using rule 154 (addition_operator -> MINUS .)
    ID              reduce using rule 154 (addition_operator -> MINUS .)
    PLUS            reduce using rule 154 (addition_operator -> MINUS .)
    MINUS           reduce using rule 154 (addition_operator -> MINUS .)
    NUMBER          reduce using rule 154 (addition_operator -> MINUS .)


state 275

    (155) addition_operator -> OR .

    NIL             reduce using rule 155 (addition_operator -> OR .)
    LPAREN          reduce using rule 155 (addition_operator -> OR .)
    NOT             reduce using rule 155 (addition_operator -> OR .)
    QUOTE           reduce using rule 155 (addition_operator -> OR .)
    LBRACKET        reduce using rule 155 (addition_operator -> OR .)
    ID              reduce using rule 155 (addition_operator -> OR .)
    PLUS            reduce using rule 155 (addition_operator -> OR .)
    MINUS           reduce using rule 155 (addition_operator -> OR .)
    NUMBER          reduce using rule 155 (addition_operator -> OR .)


state 276

    (135) term -> term multiplication_operator . factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

    factor                         shift and go to state 336
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 277

    (156) multiplication_operator -> TIMES .

    NIL             reduce using rule 156 (multiplication_operator -> TIMES .)
    LPAREN          reduce using rule 156 (multiplication_operator -> TIMES .)
    NOT             reduce using rule 156 (multiplication_operator -> TIMES .)
    QUOTE           reduce using rule 156 (multiplication_operator -> TIMES .)
    LBRACKET        reduce using rule 156 (multiplication_operator -> TIMES .)
    ID              reduce using rule 156 (multiplication_operator -> TIMES .)
    PLUS            reduce using rule 156 (multiplication_operator -> TIMES .)
    MINUS           reduce using rule 156 (multiplication_operator -> TIMES .)
    NUMBER          reduce using rule 156 (multiplication_operator -> TIMES .)


state 278

    (157) multiplication_operator -> DIVIDE .

    NIL             reduce using rule 157 (multiplication_operator -> DIVIDE .)
    LPAREN          reduce using rule 157 (multiplication_operator -> DIVIDE .)
    NOT             reduce using rule 157 (multiplication_operator -> DIVIDE .)
    QUOTE           reduce using rule 157 (multiplication_operator -> DIVIDE .)
    LBRACKET        reduce using rule 157 (multiplication_operator -> DIVIDE .)
    ID              reduce using rule 157 (multiplication_operator -> DIVIDE .)
    PLUS            reduce using rule 157 (multiplication_operator -> DIVIDE .)
    MINUS           reduce using rule 157 (multiplication_operator -> DIVIDE .)
    NUMBER          reduce using rule 157 (multiplication_operator -> DIVIDE .)


state 279

    (158) multiplication_operator -> DIV .

    NIL             reduce using rule 158 (multiplication_operator -> DIV .)
    LPAREN          reduce using rule 158 (multiplication_operator -> DIV .)
    NOT             reduce using rule 158 (multiplication_operator -> DIV .)
    QUOTE           reduce using rule 158 (multiplication_operator -> DIV .)
    LBRACKET        reduce using rule 158 (multiplication_operator -> DIV .)
    ID              reduce using rule 158 (multiplication_operator -> DIV .)
    PLUS            reduce using rule 158 (multiplication_operator -> DIV .)
    MINUS           reduce using rule 158 (multiplication_operator -> DIV .)
    NUMBER          reduce using rule 158 (multiplication_operator -> DIV .)


state 280

    (159) multiplication_operator -> MOD .

    NIL             reduce using rule 159 (multiplication_operator -> MOD .)
    LPAREN          reduce using rule 159 (multiplication_operator -> MOD .)
    NOT             reduce using rule 159 (multiplication_operator -> MOD .)
    QUOTE           reduce using rule 159 (multiplication_operator -> MOD .)
    LBRACKET        reduce using rule 159 (multiplication_operator -> MOD .)
    ID              reduce using rule 159 (multiplication_operator -> MOD .)
    PLUS            reduce using rule 159 (multiplication_operator -> MOD .)
    MINUS           reduce using rule 159 (multiplication_operator -> MOD .)
    NUMBER          reduce using rule 159 (multiplication_operator -> MOD .)


state 281

    (160) multiplication_operator -> AND .

    NIL             reduce using rule 160 (multiplication_operator -> AND .)
    LPAREN          reduce using rule 160 (multiplication_operator -> AND .)
    NOT             reduce using rule 160 (multiplication_operator -> AND .)
    QUOTE           reduce using rule 160 (multiplication_operator -> AND .)
    LBRACKET        reduce using rule 160 (multiplication_operator -> AND .)
    ID              reduce using rule 160 (multiplication_operator -> AND .)
    PLUS            reduce using rule 160 (multiplication_operator -> AND .)
    MINUS           reduce using rule 160 (multiplication_operator -> AND .)
    NUMBER          reduce using rule 160 (multiplication_operator -> AND .)


state 282

    (144) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 337


state 283

    (145) factor -> NOT factor .

    TIMES           reduce using rule 145 (factor -> NOT factor .)
    DIVIDE          reduce using rule 145 (factor -> NOT factor .)
    DIV             reduce using rule 145 (factor -> NOT factor .)
    MOD             reduce using rule 145 (factor -> NOT factor .)
    AND             reduce using rule 145 (factor -> NOT factor .)
    PLUS            reduce using rule 145 (factor -> NOT factor .)
    MINUS           reduce using rule 145 (factor -> NOT factor .)
    OR              reduce using rule 145 (factor -> NOT factor .)
    EQUAL           reduce using rule 145 (factor -> NOT factor .)
    NOTEQUAL        reduce using rule 145 (factor -> NOT factor .)
    LESS            reduce using rule 145 (factor -> NOT factor .)
    LESSEQUAL       reduce using rule 145 (factor -> NOT factor .)
    GREATER         reduce using rule 145 (factor -> NOT factor .)
    GREATEREQUAL    reduce using rule 145 (factor -> NOT factor .)
    IN              reduce using rule 145 (factor -> NOT factor .)
    DO              reduce using rule 145 (factor -> NOT factor .)
    THEN            reduce using rule 145 (factor -> NOT factor .)
    OF              reduce using rule 145 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 145 (factor -> NOT factor .)
    END             reduce using rule 145 (factor -> NOT factor .)
    UNTIL           reduce using rule 145 (factor -> NOT factor .)
    ELSE            reduce using rule 145 (factor -> NOT factor .)
    RPAREN          reduce using rule 145 (factor -> NOT factor .)
    COMMA           reduce using rule 145 (factor -> NOT factor .)
    RBRACKET        reduce using rule 145 (factor -> NOT factor .)
    TO              reduce using rule 145 (factor -> NOT factor .)
    DOWNTO          reduce using rule 145 (factor -> NOT factor .)


state 284

    (267) string -> QUOTE string_character_list . QUOTE
    (269) string_character_list -> string_character_list . string_character
    (270) string_character -> . ANY_CHARACTER_EXCEPT_QUOTE
    (271) string_character -> . SQUOTE SQUOTE

    QUOTE           shift and go to state 338
    ANY_CHARACTER_EXCEPT_QUOTE shift and go to state 286
    SQUOTE          shift and go to state 287

    string_character               shift and go to state 339

state 285

    (268) string_character_list -> string_character .

    QUOTE           reduce using rule 268 (string_character_list -> string_character .)
    ANY_CHARACTER_EXCEPT_QUOTE reduce using rule 268 (string_character_list -> string_character .)
    SQUOTE          reduce using rule 268 (string_character_list -> string_character .)


state 286

    (270) string_character -> ANY_CHARACTER_EXCEPT_QUOTE .

    QUOTE           reduce using rule 270 (string_character -> ANY_CHARACTER_EXCEPT_QUOTE .)
    ANY_CHARACTER_EXCEPT_QUOTE reduce using rule 270 (string_character -> ANY_CHARACTER_EXCEPT_QUOTE .)
    SQUOTE          reduce using rule 270 (string_character -> ANY_CHARACTER_EXCEPT_QUOTE .)


state 287

    (271) string_character -> SQUOTE . SQUOTE

    SQUOTE          shift and go to state 340


state 288

    (171) set -> LBRACKET element_list . RBRACKET

    RBRACKET        shift and go to state 341


state 289

    (173) element_list -> expression_list .
    (245) expression_list -> expression_list . COMMA expression

    RBRACKET        reduce using rule 173 (element_list -> expression_list .)
    COMMA           shift and go to state 342


state 290

    (244) expression_list -> expression .

    COMMA           reduce using rule 244 (expression_list -> expression .)
    RBRACKET        reduce using rule 244 (expression_list -> expression .)


state 291

    (175) function_designator -> function_identifier actual_parameter_list .

    TIMES           reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    DIVIDE          reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    DIV             reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    MOD             reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    AND             reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    PLUS            reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    MINUS           reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    OR              reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    EQUAL           reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    NOTEQUAL        reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    LESS            reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    LESSEQUAL       reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    GREATER         reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    GREATEREQUAL    reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    IN              reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    DO              reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    THEN            reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    OF              reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    SEMICOLON       reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    END             reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    UNTIL           reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    ELSE            reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    RPAREN          reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    COMMA           reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    RBRACKET        reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    TO              reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)
    DOWNTO          reduce using rule 175 (function_designator -> function_identifier actual_parameter_list .)


state 292

    (254) scale_factor -> digit_sequence . DOT
    (255) scale_factor -> digit_sequence . DOT digit_sequence
    (256) scale_factor -> digit_sequence . DOT digit_sequence scale_factor
    (257) scale_factor -> digit_sequence . DOT scale_factor
    (258) scale_factor -> digit_sequence . scale_factor
    (254) scale_factor -> . digit_sequence DOT
    (255) scale_factor -> . digit_sequence DOT digit_sequence
    (256) scale_factor -> . digit_sequence DOT digit_sequence scale_factor
    (257) scale_factor -> . digit_sequence DOT scale_factor
    (258) scale_factor -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    DOT             shift and go to state 343
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

    digit_sequence                 shift and go to state 292
    scale_factor                   shift and go to state 344
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 293

    (249) real_number -> digit_sequence DOT .
    (250) real_number -> digit_sequence DOT . digit_sequence
    (251) real_number -> digit_sequence DOT . digit_sequence scale_factor
    (252) real_number -> digit_sequence DOT . scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (254) scale_factor -> . digit_sequence DOT
    (255) scale_factor -> . digit_sequence DOT digit_sequence
    (256) scale_factor -> . digit_sequence DOT digit_sequence scale_factor
    (257) scale_factor -> . digit_sequence DOT scale_factor
    (258) scale_factor -> . digit_sequence scale_factor
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    TIMES           reduce using rule 249 (real_number -> digit_sequence DOT .)
    DIVIDE          reduce using rule 249 (real_number -> digit_sequence DOT .)
    DIV             reduce using rule 249 (real_number -> digit_sequence DOT .)
    MOD             reduce using rule 249 (real_number -> digit_sequence DOT .)
    AND             reduce using rule 249 (real_number -> digit_sequence DOT .)
    OR              reduce using rule 249 (real_number -> digit_sequence DOT .)
    EQUAL           reduce using rule 249 (real_number -> digit_sequence DOT .)
    NOTEQUAL        reduce using rule 249 (real_number -> digit_sequence DOT .)
    LESS            reduce using rule 249 (real_number -> digit_sequence DOT .)
    LESSEQUAL       reduce using rule 249 (real_number -> digit_sequence DOT .)
    GREATER         reduce using rule 249 (real_number -> digit_sequence DOT .)
    GREATEREQUAL    reduce using rule 249 (real_number -> digit_sequence DOT .)
    IN              reduce using rule 249 (real_number -> digit_sequence DOT .)
    DO              reduce using rule 249 (real_number -> digit_sequence DOT .)
    THEN            reduce using rule 249 (real_number -> digit_sequence DOT .)
    OF              reduce using rule 249 (real_number -> digit_sequence DOT .)
    SEMICOLON       reduce using rule 249 (real_number -> digit_sequence DOT .)
    RANGE_OPERATOR  reduce using rule 249 (real_number -> digit_sequence DOT .)
    END             reduce using rule 249 (real_number -> digit_sequence DOT .)
    UNTIL           reduce using rule 249 (real_number -> digit_sequence DOT .)
    ELSE            reduce using rule 249 (real_number -> digit_sequence DOT .)
    RPAREN          reduce using rule 249 (real_number -> digit_sequence DOT .)
    COMMA           reduce using rule 249 (real_number -> digit_sequence DOT .)
    RBRACKET        reduce using rule 249 (real_number -> digit_sequence DOT .)
    TO              reduce using rule 249 (real_number -> digit_sequence DOT .)
    DOWNTO          reduce using rule 249 (real_number -> digit_sequence DOT .)
    COLON           reduce using rule 249 (real_number -> digit_sequence DOT .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

  ! PLUS            [ reduce using rule 249 (real_number -> digit_sequence DOT .) ]
  ! MINUS           [ reduce using rule 249 (real_number -> digit_sequence DOT .) ]

    digit_sequence                 shift and go to state 345
    scale_factor                   shift and go to state 346
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 294

    (253) real_number -> digit_sequence scale_factor .

    TIMES           reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    DIVIDE          reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    DIV             reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    MOD             reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    AND             reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    PLUS            reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    MINUS           reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    OR              reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    EQUAL           reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    NOTEQUAL        reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    LESS            reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    LESSEQUAL       reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    GREATER         reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    GREATEREQUAL    reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    IN              reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    DO              reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    THEN            reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    OF              reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    SEMICOLON       reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    RANGE_OPERATOR  reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    END             reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    UNTIL           reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    ELSE            reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    RPAREN          reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    COMMA           reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    RBRACKET        reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    TO              reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    DOWNTO          reduce using rule 253 (real_number -> digit_sequence scale_factor .)
    COLON           reduce using rule 253 (real_number -> digit_sequence scale_factor .)


state 295

    (99) repeat_statement -> REPEAT statement_sequence UNTIL . expression
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    expression                     shift and go to state 347
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 296

    (100) for_statement -> FOR variable_identifier ASSIGN . initial_expression TO final_expression DO statement
    (101) for_statement -> FOR variable_identifier ASSIGN . initial_expression DOWNTO final_expression DO statement
    (102) initial_expression -> . expression
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    variable_identifier            shift and go to state 94
    initial_expression             shift and go to state 348
    expression                     shift and go to state 349
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 297

    (106) if_statement -> IF expression THEN . statement
    (107) if_statement -> IF expression THEN . statement ELSE statement
    (78) statement -> . label COLON simple_statement
    (79) statement -> . label COLON structured_statement
    (80) statement -> . simple_statement
    (81) statement -> . structured_statement
    (272) label -> . integer_number
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (248) integer_number -> . digit_sequence
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (266) digit -> . NUMBER
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    statement                      shift and go to state 350
    label                          shift and go to state 67
    simple_statement               shift and go to state 68
    structured_statement           shift and go to state 69
    integer_number                 shift and go to state 38
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    digit_sequence                 shift and go to state 39
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    variable_identifier            shift and go to state 94
    digit                          shift and go to state 44
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 298

    (108) case_statement -> CASE expression OF . case_limb_list END
    (109) case_statement -> CASE expression OF . case_limb_list SEMICOLON END
    (110) case_limb_list -> . case_limb
    (111) case_limb_list -> . case_limb_list SEMICOLON case_limb
    (112) case_limb -> . case_label_list COLON statement
    (113) case_label_list -> . constant
    (114) case_label_list -> . case_label_list COMMA constant
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (226) identifier -> . ID
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    case_limb_list                 shift and go to state 351
    case_limb                      shift and go to state 352
    case_label_list                shift and go to state 353
    constant                       shift and go to state 354
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    identifier                     shift and go to state 196
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 299

    (169) indexed_variable -> array_variable LBRACKET expression_list . RBRACKET
    (245) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 355
    COMMA           shift and go to state 342


state 300

    (170) field_designator -> record_variable DOT field_identifier .

    ASSIGN          reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    UPARROW         reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    LBRACKET        reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    DOT             reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    DO              reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    COMMA           reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    TIMES           reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    DIVIDE          reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    DIV             reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    MOD             reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    AND             reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    PLUS            reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    MINUS           reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    OR              reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    EQUAL           reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    NOTEQUAL        reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    LESS            reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    LESSEQUAL       reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    GREATER         reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    GREATEREQUAL    reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    IN              reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    THEN            reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    OF              reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    SEMICOLON       reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    END             reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    UNTIL           reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    ELSE            reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    RPAREN          reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    RBRACKET        reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    TO              reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)
    DOWNTO          reduce using rule 170 (field_designator -> record_variable DOT field_identifier .)


state 301

    (233) field_identifier -> identifier .

    ASSIGN          reduce using rule 233 (field_identifier -> identifier .)
    UPARROW         reduce using rule 233 (field_identifier -> identifier .)
    LBRACKET        reduce using rule 233 (field_identifier -> identifier .)
    DOT             reduce using rule 233 (field_identifier -> identifier .)
    DO              reduce using rule 233 (field_identifier -> identifier .)
    COMMA           reduce using rule 233 (field_identifier -> identifier .)
    TIMES           reduce using rule 233 (field_identifier -> identifier .)
    DIVIDE          reduce using rule 233 (field_identifier -> identifier .)
    DIV             reduce using rule 233 (field_identifier -> identifier .)
    MOD             reduce using rule 233 (field_identifier -> identifier .)
    AND             reduce using rule 233 (field_identifier -> identifier .)
    PLUS            reduce using rule 233 (field_identifier -> identifier .)
    MINUS           reduce using rule 233 (field_identifier -> identifier .)
    OR              reduce using rule 233 (field_identifier -> identifier .)
    EQUAL           reduce using rule 233 (field_identifier -> identifier .)
    NOTEQUAL        reduce using rule 233 (field_identifier -> identifier .)
    LESS            reduce using rule 233 (field_identifier -> identifier .)
    LESSEQUAL       reduce using rule 233 (field_identifier -> identifier .)
    GREATER         reduce using rule 233 (field_identifier -> identifier .)
    GREATEREQUAL    reduce using rule 233 (field_identifier -> identifier .)
    IN              reduce using rule 233 (field_identifier -> identifier .)
    THEN            reduce using rule 233 (field_identifier -> identifier .)
    OF              reduce using rule 233 (field_identifier -> identifier .)
    SEMICOLON       reduce using rule 233 (field_identifier -> identifier .)
    END             reduce using rule 233 (field_identifier -> identifier .)
    UNTIL           reduce using rule 233 (field_identifier -> identifier .)
    ELSE            reduce using rule 233 (field_identifier -> identifier .)
    RPAREN          reduce using rule 233 (field_identifier -> identifier .)
    RBRACKET        reduce using rule 233 (field_identifier -> identifier .)
    TO              reduce using rule 233 (field_identifier -> identifier .)
    DOWNTO          reduce using rule 233 (field_identifier -> identifier .)


state 302

    (10) declaration_part -> label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part .

    BEGIN           reduce using rule 10 (declaration_part -> label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part .)


state 303

    (33) variable_declaration_list -> variable_declaration_list SEMICOLON variable_declaration .

    SEMICOLON       reduce using rule 33 (variable_declaration_list -> variable_declaration_list SEMICOLON variable_declaration .)


state 304

    (34) variable_declaration -> identifier_list COLON type .

    SEMICOLON       reduce using rule 34 (variable_declaration -> identifier_list COLON type .)


state 305

    (243) identifier_list -> identifier_list COMMA identifier .

    COLON           reduce using rule 243 (identifier_list -> identifier_list COMMA identifier .)
    COMMA           reduce using rule 243 (identifier_list -> identifier_list COMMA identifier .)
    RPAREN          reduce using rule 243 (identifier_list -> identifier_list COMMA identifier .)


state 306

    (273) constant -> sign constant_identifier .

    SEMICOLON       reduce using rule 273 (constant -> sign constant_identifier .)
    RANGE_OPERATOR  reduce using rule 273 (constant -> sign constant_identifier .)
    COLON           reduce using rule 273 (constant -> sign constant_identifier .)
    COMMA           reduce using rule 273 (constant -> sign constant_identifier .)
    RBRACKET        reduce using rule 273 (constant -> sign constant_identifier .)
    END             reduce using rule 273 (constant -> sign constant_identifier .)
    RPAREN          reduce using rule 273 (constant -> sign constant_identifier .)


state 307

    (274) constant -> sign number .

    SEMICOLON       reduce using rule 274 (constant -> sign number .)
    RANGE_OPERATOR  reduce using rule 274 (constant -> sign number .)
    COLON           reduce using rule 274 (constant -> sign number .)
    COMMA           reduce using rule 274 (constant -> sign number .)
    RBRACKET        reduce using rule 274 (constant -> sign number .)
    END             reduce using rule 274 (constant -> sign number .)
    RPAREN          reduce using rule 274 (constant -> sign number .)


state 308

    (187) structured_type -> PACKED unpacked_structured_type .

    SEMICOLON       reduce using rule 187 (structured_type -> PACKED unpacked_structured_type .)
    END             reduce using rule 187 (structured_type -> PACKED unpacked_structured_type .)
    RPAREN          reduce using rule 187 (structured_type -> PACKED unpacked_structured_type .)


state 309

    (203) pointer_type -> UPARROW type_identifier .

    SEMICOLON       reduce using rule 203 (pointer_type -> UPARROW type_identifier .)
    END             reduce using rule 203 (pointer_type -> UPARROW type_identifier .)
    RPAREN          reduce using rule 203 (pointer_type -> UPARROW type_identifier .)


state 310

    (184) subrange_type -> lower_bound RANGE_OPERATOR . upper_bound
    (186) upper_bound -> . constant
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (226) identifier -> . ID
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    upper_bound                    shift and go to state 356
    constant                       shift and go to state 357
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    identifier                     shift and go to state 196
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 311

    (183) enumerated_type -> LPAREN identifier_list . RPAREN
    (243) identifier_list -> identifier_list . COMMA identifier

    RPAREN          shift and go to state 358
    COMMA           shift and go to state 192


state 312

    (193) array_type -> ARRAY LBRACKET . index_type_list RBRACKET OF element_type
    (194) index_type_list -> . index_type
    (195) index_type_list -> . index_type_list COMMA index_type
    (196) index_type -> . simple_type
    (181) simple_type -> . subrange_type
    (182) simple_type -> . enumerated_type
    (184) subrange_type -> . lower_bound RANGE_OPERATOR upper_bound
    (183) enumerated_type -> . LPAREN identifier_list RPAREN
    (185) lower_bound -> . constant
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (226) identifier -> . ID
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    LPAREN          shift and go to state 215
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    index_type_list                shift and go to state 359
    index_type                     shift and go to state 360
    simple_type                    shift and go to state 361
    subrange_type                  shift and go to state 209
    enumerated_type                shift and go to state 210
    lower_bound                    shift and go to state 214
    constant                       shift and go to state 220
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    identifier                     shift and go to state 196
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 313

    (198) record_type -> RECORD field_list . END

    END             shift and go to state 362


state 314

    (205) field_list -> fixed_part .
    (206) field_list -> fixed_part . SEMICOLON variant_part
    (207) field_list -> fixed_part . SEMICOLON variant_part SEMICOLON
    (211) fixed_part -> fixed_part . SEMICOLON record_section

    END             reduce using rule 205 (field_list -> fixed_part .)
    RPAREN          reduce using rule 205 (field_list -> fixed_part .)
    SEMICOLON       shift and go to state 363


state 315

    (208) field_list -> variant_part .
    (209) field_list -> variant_part . SEMICOLON

    END             reduce using rule 208 (field_list -> variant_part .)
    RPAREN          reduce using rule 208 (field_list -> variant_part .)
    SEMICOLON       shift and go to state 364


state 316

    (210) fixed_part -> record_section .

    SEMICOLON       reduce using rule 210 (fixed_part -> record_section .)
    END             reduce using rule 210 (fixed_part -> record_section .)
    RPAREN          reduce using rule 210 (fixed_part -> record_section .)


state 317

    (213) variant_part -> CASE . tag_field type_identifier OF variant_list
    (216) tag_field -> .
    (217) tag_field -> . identifier COLON
    (226) identifier -> . ID

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 22

  ! ID              [ reduce using rule 216 (tag_field -> .) ]

    tag_field                      shift and go to state 365
    identifier                     shift and go to state 366

state 318

    (212) record_section -> identifier_list . COLON type
    (243) identifier_list -> identifier_list . COMMA identifier

    COLON           shift and go to state 367
    COMMA           shift and go to state 192


state 319

    (199) set_type -> SET OF . base_type
    (200) base_type -> . type
    (177) type -> . simple_type
    (178) type -> . structured_type
    (179) type -> . pointer_type
    (180) type -> . type_identifier
    (181) simple_type -> . subrange_type
    (182) simple_type -> . enumerated_type
    (187) structured_type -> . PACKED unpacked_structured_type
    (188) structured_type -> . unpacked_structured_type
    (203) pointer_type -> . UPARROW type_identifier
    (236) type_identifier -> . identifier
    (184) subrange_type -> . lower_bound RANGE_OPERATOR upper_bound
    (183) enumerated_type -> . LPAREN identifier_list RPAREN
    (189) unpacked_structured_type -> . array_type
    (190) unpacked_structured_type -> . record_type
    (191) unpacked_structured_type -> . set_type
    (192) unpacked_structured_type -> . file_type
    (226) identifier -> . ID
    (185) lower_bound -> . constant
    (193) array_type -> . ARRAY LBRACKET index_type_list RBRACKET OF element_type
    (198) record_type -> . RECORD field_list END
    (199) set_type -> . SET OF base_type
    (201) file_type -> . FILE OF file_component_type
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PACKED          shift and go to state 211
    UPARROW         shift and go to state 213
    LPAREN          shift and go to state 215
    ID              shift and go to state 22
    ARRAY           shift and go to state 221
    RECORD          shift and go to state 222
    SET             shift and go to state 223
    FILE            shift and go to state 224
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    NUMBER          shift and go to state 45

    base_type                      shift and go to state 368
    type                           shift and go to state 369
    simple_type                    shift and go to state 205
    structured_type                shift and go to state 206
    pointer_type                   shift and go to state 207
    type_identifier                shift and go to state 208
    subrange_type                  shift and go to state 209
    enumerated_type                shift and go to state 210
    unpacked_structured_type       shift and go to state 212
    identifier                     shift and go to state 203
    lower_bound                    shift and go to state 214
    array_type                     shift and go to state 216
    record_type                    shift and go to state 217
    set_type                       shift and go to state 218
    file_type                      shift and go to state 219
    constant                       shift and go to state 220
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 320

    (201) file_type -> FILE OF . file_component_type
    (202) file_component_type -> . type
    (177) type -> . simple_type
    (178) type -> . structured_type
    (179) type -> . pointer_type
    (180) type -> . type_identifier
    (181) simple_type -> . subrange_type
    (182) simple_type -> . enumerated_type
    (187) structured_type -> . PACKED unpacked_structured_type
    (188) structured_type -> . unpacked_structured_type
    (203) pointer_type -> . UPARROW type_identifier
    (236) type_identifier -> . identifier
    (184) subrange_type -> . lower_bound RANGE_OPERATOR upper_bound
    (183) enumerated_type -> . LPAREN identifier_list RPAREN
    (189) unpacked_structured_type -> . array_type
    (190) unpacked_structured_type -> . record_type
    (191) unpacked_structured_type -> . set_type
    (192) unpacked_structured_type -> . file_type
    (226) identifier -> . ID
    (185) lower_bound -> . constant
    (193) array_type -> . ARRAY LBRACKET index_type_list RBRACKET OF element_type
    (198) record_type -> . RECORD field_list END
    (199) set_type -> . SET OF base_type
    (201) file_type -> . FILE OF file_component_type
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PACKED          shift and go to state 211
    UPARROW         shift and go to state 213
    LPAREN          shift and go to state 215
    ID              shift and go to state 22
    ARRAY           shift and go to state 221
    RECORD          shift and go to state 222
    SET             shift and go to state 223
    FILE            shift and go to state 224
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    NUMBER          shift and go to state 45

    file_component_type            shift and go to state 370
    type                           shift and go to state 371
    simple_type                    shift and go to state 205
    structured_type                shift and go to state 206
    pointer_type                   shift and go to state 207
    type_identifier                shift and go to state 208
    subrange_type                  shift and go to state 209
    enumerated_type                shift and go to state 210
    unpacked_structured_type       shift and go to state 212
    identifier                     shift and go to state 203
    lower_bound                    shift and go to state 214
    array_type                     shift and go to state 216
    record_type                    shift and go to state 217
    set_type                       shift and go to state 218
    file_type                      shift and go to state 219
    constant                       shift and go to state 220
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 321

    (54) formal_parameter_list -> LPAREN formal_parameter_section_list RPAREN .

    SEMICOLON       reduce using rule 54 (formal_parameter_list -> LPAREN formal_parameter_section_list RPAREN .)
    COLON           reduce using rule 54 (formal_parameter_list -> LPAREN formal_parameter_section_list RPAREN .)
    RPAREN          reduce using rule 54 (formal_parameter_list -> LPAREN formal_parameter_section_list RPAREN .)


state 322

    (56) formal_parameter_section_list -> formal_parameter_section_list SEMICOLON . formal_parameter_section
    (57) formal_parameter_section -> . value_parameter_section
    (58) formal_parameter_section -> . variable_parameter_section
    (59) formal_parameter_section -> . procedure_parameter_section
    (60) formal_parameter_section -> . function_parameter_section
    (61) value_parameter_section -> . identifier_list COLON parameter_type
    (62) variable_parameter_section -> . VAR identifier_list COLON parameter_type
    (63) procedure_parameter_section -> . procedure_heading
    (64) function_parameter_section -> . function_heading
    (242) identifier_list -> . identifier
    (243) identifier_list -> . identifier_list COMMA identifier
    (47) procedure_heading -> . PROCEDURE identifier
    (48) procedure_heading -> . PROCEDURE identifier formal_parameter_list
    (49) function_heading -> . FUNCTION identifier COLON result_type
    (50) function_heading -> . FUNCTION identifier formal_parameter_list COLON result_type
    (226) identifier -> . ID

    VAR             shift and go to state 232
    PROCEDURE       shift and go to state 235
    FUNCTION        shift and go to state 236
    ID              shift and go to state 22

    formal_parameter_section       shift and go to state 372
    value_parameter_section        shift and go to state 227
    variable_parameter_section     shift and go to state 228
    procedure_parameter_section    shift and go to state 229
    function_parameter_section     shift and go to state 230
    identifier_list                shift and go to state 231
    procedure_heading              shift and go to state 233
    function_heading               shift and go to state 234
    identifier                     shift and go to state 114

state 323

    (61) value_parameter_section -> identifier_list COLON . parameter_type
    (65) parameter_type -> . type_identifier
    (66) parameter_type -> . conformant_array_schema
    (236) type_identifier -> . identifier
    (67) conformant_array_schema -> . packed_conformant_array_schema
    (68) conformant_array_schema -> . unpacked_conformant_array_schema
    (226) identifier -> . ID
    (69) packed_conformant_array_schema -> . PACKED ARRAY LBRACKET bound_specification RBRACKET OF type_identifier
    (70) unpacked_conformant_array_schema -> . ARRAY LBRACKET bound_specification_list RBRACKET OF type_identifier
    (71) unpacked_conformant_array_schema -> . ARRAY LBRACKET bound_specification_list RBRACKET OF conformant_array_schema

    ID              shift and go to state 22
    PACKED          shift and go to state 378
    ARRAY           shift and go to state 379

    parameter_type                 shift and go to state 373
    type_identifier                shift and go to state 374
    conformant_array_schema        shift and go to state 375
    identifier                     shift and go to state 237
    packed_conformant_array_schema shift and go to state 376
    unpacked_conformant_array_schema shift and go to state 377

state 324

    (62) variable_parameter_section -> VAR identifier_list . COLON parameter_type
    (243) identifier_list -> identifier_list . COMMA identifier

    COLON           shift and go to state 380
    COMMA           shift and go to state 192


state 325

    (47) procedure_heading -> PROCEDURE identifier .
    (48) procedure_heading -> PROCEDURE identifier . formal_parameter_list
    (54) formal_parameter_list -> . LPAREN formal_parameter_section_list RPAREN

    RPAREN          reduce using rule 47 (procedure_heading -> PROCEDURE identifier .)
    SEMICOLON       reduce using rule 47 (procedure_heading -> PROCEDURE identifier .)
    LPAREN          shift and go to state 137

    formal_parameter_list          shift and go to state 136

state 326

    (49) function_heading -> FUNCTION identifier . COLON result_type
    (50) function_heading -> FUNCTION identifier . formal_parameter_list COLON result_type
    (54) formal_parameter_list -> . LPAREN formal_parameter_section_list RPAREN

    COLON           shift and go to state 138
    LPAREN          shift and go to state 137

    formal_parameter_list          shift and go to state 139

state 327

    (50) function_heading -> FUNCTION identifier formal_parameter_list COLON result_type .

    SEMICOLON       reduce using rule 50 (function_heading -> FUNCTION identifier formal_parameter_list COLON result_type .)
    RPAREN          reduce using rule 50 (function_heading -> FUNCTION identifier formal_parameter_list COLON result_type .)


state 328

    (3) program_heading -> PROGRAM identifier LPAREN identifier_list RPAREN SEMICOLON .

    LABEL           reduce using rule 3 (program_heading -> PROGRAM identifier LPAREN identifier_list RPAREN SEMICOLON .)
    CONST           reduce using rule 3 (program_heading -> PROGRAM identifier LPAREN identifier_list RPAREN SEMICOLON .)
    TYPE            reduce using rule 3 (program_heading -> PROGRAM identifier LPAREN identifier_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 3 (program_heading -> PROGRAM identifier LPAREN identifier_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 3 (program_heading -> PROGRAM identifier LPAREN identifier_list RPAREN SEMICOLON .)


state 329

    (118) actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .

    SEMICOLON       reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    END             reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    UNTIL           reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    ELSE            reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    TIMES           reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    DIVIDE          reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    DIV             reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    MOD             reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    AND             reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    PLUS            reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    MINUS           reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    OR              reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    EQUAL           reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    NOTEQUAL        reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    LESS            reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    LESSEQUAL       reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    GREATER         reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    GREATEREQUAL    reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    IN              reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    DO              reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    THEN            reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    OF              reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    RPAREN          reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    COMMA           reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    RBRACKET        reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    TO              reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)
    DOWNTO          reduce using rule 118 (actual_parameter_list -> LPAREN actual_parameter_list2 RPAREN .)


state 330

    (120) actual_parameter_list2 -> actual_parameter_list2 COMMA . actual_parameter
    (121) actual_parameter -> . actual_value
    (122) actual_parameter -> . actual_variable
    (123) actual_parameter -> . actual_procedure
    (124) actual_parameter -> . actual_function
    (125) actual_value -> . expression
    (231) actual_variable -> . variable
    (126) actual_procedure -> . procedure_identifier
    (127) actual_function -> . function_identifier
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (237) procedure_identifier -> . identifier
    (238) function_identifier -> . identifier
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    ID              shift and go to state 22
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    NUMBER          shift and go to state 45

    actual_parameter               shift and go to state 381
    actual_value                   shift and go to state 250
    actual_variable                shift and go to state 251
    actual_procedure               shift and go to state 252
    actual_function                shift and go to state 253
    expression                     shift and go to state 254
    variable                       shift and go to state 255
    procedure_identifier           shift and go to state 256
    function_identifier            shift and go to state 257
    simple_expression              shift and go to state 155
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 258
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    term                           shift and go to state 158
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    factor                         shift and go to state 159
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 331

    (115) with_statement -> WITH record_variable_list DO statement .

    SEMICOLON       reduce using rule 115 (with_statement -> WITH record_variable_list DO statement .)
    END             reduce using rule 115 (with_statement -> WITH record_variable_list DO statement .)
    UNTIL           reduce using rule 115 (with_statement -> WITH record_variable_list DO statement .)
    ELSE            reduce using rule 115 (with_statement -> WITH record_variable_list DO statement .)


state 332

    (117) record_variable_list -> record_variable_list COMMA record_variable .
    (170) field_designator -> record_variable . DOT field_identifier

    DO              reduce using rule 117 (record_variable_list -> record_variable_list COMMA record_variable .)
    COMMA           reduce using rule 117 (record_variable_list -> record_variable_list COMMA record_variable .)
    DOT             shift and go to state 184


state 333

    (98) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 98 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 98 (while_statement -> WHILE expression DO statement .)


state 334

    (129) expression -> simple_expression relational_operator simple_expression .

    DO              reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)
    THEN            reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)
    OF              reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)
    SEMICOLON       reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)
    END             reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)
    UNTIL           reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)
    ELSE            reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)
    RPAREN          reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)
    COMMA           reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)
    RBRACKET        reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)
    TO              reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)
    DOWNTO          reduce using rule 129 (expression -> simple_expression relational_operator simple_expression .)


state 335

    (133) term_list -> term_list addition_operator term .
    (135) term -> term . multiplication_operator factor
    (156) multiplication_operator -> . TIMES
    (157) multiplication_operator -> . DIVIDE
    (158) multiplication_operator -> . DIV
    (159) multiplication_operator -> . MOD
    (160) multiplication_operator -> . AND

    PLUS            reduce using rule 133 (term_list -> term_list addition_operator term .)
    MINUS           reduce using rule 133 (term_list -> term_list addition_operator term .)
    OR              reduce using rule 133 (term_list -> term_list addition_operator term .)
    EQUAL           reduce using rule 133 (term_list -> term_list addition_operator term .)
    NOTEQUAL        reduce using rule 133 (term_list -> term_list addition_operator term .)
    LESS            reduce using rule 133 (term_list -> term_list addition_operator term .)
    LESSEQUAL       reduce using rule 133 (term_list -> term_list addition_operator term .)
    GREATER         reduce using rule 133 (term_list -> term_list addition_operator term .)
    GREATEREQUAL    reduce using rule 133 (term_list -> term_list addition_operator term .)
    IN              reduce using rule 133 (term_list -> term_list addition_operator term .)
    DO              reduce using rule 133 (term_list -> term_list addition_operator term .)
    THEN            reduce using rule 133 (term_list -> term_list addition_operator term .)
    OF              reduce using rule 133 (term_list -> term_list addition_operator term .)
    SEMICOLON       reduce using rule 133 (term_list -> term_list addition_operator term .)
    END             reduce using rule 133 (term_list -> term_list addition_operator term .)
    UNTIL           reduce using rule 133 (term_list -> term_list addition_operator term .)
    ELSE            reduce using rule 133 (term_list -> term_list addition_operator term .)
    RPAREN          reduce using rule 133 (term_list -> term_list addition_operator term .)
    COMMA           reduce using rule 133 (term_list -> term_list addition_operator term .)
    RBRACKET        reduce using rule 133 (term_list -> term_list addition_operator term .)
    TO              reduce using rule 133 (term_list -> term_list addition_operator term .)
    DOWNTO          reduce using rule 133 (term_list -> term_list addition_operator term .)
    TIMES           shift and go to state 277
    DIVIDE          shift and go to state 278
    DIV             shift and go to state 279
    MOD             shift and go to state 280
    AND             shift and go to state 281

    multiplication_operator        shift and go to state 276

state 336

    (135) term -> term multiplication_operator factor .

    TIMES           reduce using rule 135 (term -> term multiplication_operator factor .)
    DIVIDE          reduce using rule 135 (term -> term multiplication_operator factor .)
    DIV             reduce using rule 135 (term -> term multiplication_operator factor .)
    MOD             reduce using rule 135 (term -> term multiplication_operator factor .)
    AND             reduce using rule 135 (term -> term multiplication_operator factor .)
    PLUS            reduce using rule 135 (term -> term multiplication_operator factor .)
    MINUS           reduce using rule 135 (term -> term multiplication_operator factor .)
    OR              reduce using rule 135 (term -> term multiplication_operator factor .)
    EQUAL           reduce using rule 135 (term -> term multiplication_operator factor .)
    NOTEQUAL        reduce using rule 135 (term -> term multiplication_operator factor .)
    LESS            reduce using rule 135 (term -> term multiplication_operator factor .)
    LESSEQUAL       reduce using rule 135 (term -> term multiplication_operator factor .)
    GREATER         reduce using rule 135 (term -> term multiplication_operator factor .)
    GREATEREQUAL    reduce using rule 135 (term -> term multiplication_operator factor .)
    IN              reduce using rule 135 (term -> term multiplication_operator factor .)
    DO              reduce using rule 135 (term -> term multiplication_operator factor .)
    THEN            reduce using rule 135 (term -> term multiplication_operator factor .)
    OF              reduce using rule 135 (term -> term multiplication_operator factor .)
    SEMICOLON       reduce using rule 135 (term -> term multiplication_operator factor .)
    END             reduce using rule 135 (term -> term multiplication_operator factor .)
    UNTIL           reduce using rule 135 (term -> term multiplication_operator factor .)
    ELSE            reduce using rule 135 (term -> term multiplication_operator factor .)
    RPAREN          reduce using rule 135 (term -> term multiplication_operator factor .)
    COMMA           reduce using rule 135 (term -> term multiplication_operator factor .)
    RBRACKET        reduce using rule 135 (term -> term multiplication_operator factor .)
    TO              reduce using rule 135 (term -> term multiplication_operator factor .)
    DOWNTO          reduce using rule 135 (term -> term multiplication_operator factor .)


state 337

    (144) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    IN              reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    OF              reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 144 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 144 (factor -> LPAREN expression RPAREN .)


state 338

    (267) string -> QUOTE string_character_list QUOTE .

    TIMES           reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    DIVIDE          reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    DIV             reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    MOD             reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    AND             reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    PLUS            reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    MINUS           reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    OR              reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    EQUAL           reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    NOTEQUAL        reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    LESS            reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    LESSEQUAL       reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    GREATER         reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    GREATEREQUAL    reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    IN              reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    DO              reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    THEN            reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    OF              reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    SEMICOLON       reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    RANGE_OPERATOR  reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    END             reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    UNTIL           reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    ELSE            reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    RPAREN          reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    COMMA           reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    RBRACKET        reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    TO              reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    DOWNTO          reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)
    COLON           reduce using rule 267 (string -> QUOTE string_character_list QUOTE .)


state 339

    (269) string_character_list -> string_character_list string_character .

    QUOTE           reduce using rule 269 (string_character_list -> string_character_list string_character .)
    ANY_CHARACTER_EXCEPT_QUOTE reduce using rule 269 (string_character_list -> string_character_list string_character .)
    SQUOTE          reduce using rule 269 (string_character_list -> string_character_list string_character .)


state 340

    (271) string_character -> SQUOTE SQUOTE .

    QUOTE           reduce using rule 271 (string_character -> SQUOTE SQUOTE .)
    ANY_CHARACTER_EXCEPT_QUOTE reduce using rule 271 (string_character -> SQUOTE SQUOTE .)
    SQUOTE          reduce using rule 271 (string_character -> SQUOTE SQUOTE .)


state 341

    (171) set -> LBRACKET element_list RBRACKET .

    TIMES           reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    DIVIDE          reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    DIV             reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    MOD             reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    AND             reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    PLUS            reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    MINUS           reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    OR              reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    EQUAL           reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    NOTEQUAL        reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    LESS            reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    LESSEQUAL       reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    GREATER         reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    GREATEREQUAL    reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    IN              reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    DO              reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    THEN            reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    OF              reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    SEMICOLON       reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    END             reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    UNTIL           reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    ELSE            reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    RPAREN          reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    COMMA           reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    RBRACKET        reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    TO              reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)
    DOWNTO          reduce using rule 171 (set -> LBRACKET element_list RBRACKET .)


state 342

    (245) expression_list -> expression_list COMMA . expression
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    expression                     shift and go to state 382
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    variable_identifier            shift and go to state 94
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 343

    (254) scale_factor -> digit_sequence DOT .
    (255) scale_factor -> digit_sequence DOT . digit_sequence
    (256) scale_factor -> digit_sequence DOT . digit_sequence scale_factor
    (257) scale_factor -> digit_sequence DOT . scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (254) scale_factor -> . digit_sequence DOT
    (255) scale_factor -> . digit_sequence DOT digit_sequence
    (256) scale_factor -> . digit_sequence DOT digit_sequence scale_factor
    (257) scale_factor -> . digit_sequence DOT scale_factor
    (258) scale_factor -> . digit_sequence scale_factor
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    TIMES           reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    DIVIDE          reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    DIV             reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    MOD             reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    AND             reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    OR              reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    EQUAL           reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    NOTEQUAL        reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    LESS            reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    LESSEQUAL       reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    GREATER         reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    GREATEREQUAL    reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    IN              reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    DO              reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    THEN            reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    OF              reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    SEMICOLON       reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    RANGE_OPERATOR  reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    END             reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    UNTIL           reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    ELSE            reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    RPAREN          reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    COMMA           reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    RBRACKET        reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    TO              reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    DOWNTO          reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    COLON           reduce using rule 254 (scale_factor -> digit_sequence DOT .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

  ! PLUS            [ reduce using rule 254 (scale_factor -> digit_sequence DOT .) ]
  ! MINUS           [ reduce using rule 254 (scale_factor -> digit_sequence DOT .) ]

    digit_sequence                 shift and go to state 383
    scale_factor                   shift and go to state 384
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 344

    (258) scale_factor -> digit_sequence scale_factor .

    TIMES           reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    DIVIDE          reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    DIV             reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    MOD             reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    AND             reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    PLUS            reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    MINUS           reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    OR              reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    EQUAL           reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    NOTEQUAL        reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    LESS            reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    LESSEQUAL       reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    GREATER         reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    GREATEREQUAL    reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    IN              reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    DO              reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    THEN            reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    OF              reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    SEMICOLON       reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    RANGE_OPERATOR  reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    END             reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    UNTIL           reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    ELSE            reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    RPAREN          reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    COMMA           reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    RBRACKET        reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    TO              reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    DOWNTO          reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)
    COLON           reduce using rule 258 (scale_factor -> digit_sequence scale_factor .)


state 345

    (250) real_number -> digit_sequence DOT digit_sequence .
    (251) real_number -> digit_sequence DOT digit_sequence . scale_factor
    (254) scale_factor -> digit_sequence . DOT
    (255) scale_factor -> digit_sequence . DOT digit_sequence
    (256) scale_factor -> digit_sequence . DOT digit_sequence scale_factor
    (257) scale_factor -> digit_sequence . DOT scale_factor
    (258) scale_factor -> digit_sequence . scale_factor
    (254) scale_factor -> . digit_sequence DOT
    (255) scale_factor -> . digit_sequence DOT digit_sequence
    (256) scale_factor -> . digit_sequence DOT digit_sequence scale_factor
    (257) scale_factor -> . digit_sequence DOT scale_factor
    (258) scale_factor -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    TIMES           reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    DIVIDE          reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    DIV             reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    MOD             reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    AND             reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    OR              reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    EQUAL           reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    NOTEQUAL        reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    LESS            reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    LESSEQUAL       reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    GREATER         reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    GREATEREQUAL    reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    IN              reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    DO              reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    THEN            reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    OF              reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    SEMICOLON       reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    RANGE_OPERATOR  reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    END             reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    UNTIL           reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    ELSE            reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    RPAREN          reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    COMMA           reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    RBRACKET        reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    TO              reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    DOWNTO          reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    COLON           reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .)
    DOT             shift and go to state 343
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

  ! PLUS            [ reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .) ]
  ! MINUS           [ reduce using rule 250 (real_number -> digit_sequence DOT digit_sequence .) ]

    digit_sequence                 shift and go to state 292
    scale_factor                   shift and go to state 385
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 346

    (252) real_number -> digit_sequence DOT scale_factor .

    TIMES           reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    DIVIDE          reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    DIV             reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    MOD             reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    AND             reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    PLUS            reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    MINUS           reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    OR              reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    EQUAL           reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    NOTEQUAL        reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    LESS            reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    LESSEQUAL       reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    GREATER         reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    GREATEREQUAL    reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    IN              reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    DO              reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    THEN            reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    OF              reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    SEMICOLON       reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    RANGE_OPERATOR  reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    END             reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    UNTIL           reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    ELSE            reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    RPAREN          reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    COMMA           reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    RBRACKET        reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    TO              reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    DOWNTO          reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)
    COLON           reduce using rule 252 (real_number -> digit_sequence DOT scale_factor .)


state 347

    (99) repeat_statement -> REPEAT statement_sequence UNTIL expression .

    SEMICOLON       reduce using rule 99 (repeat_statement -> REPEAT statement_sequence UNTIL expression .)
    END             reduce using rule 99 (repeat_statement -> REPEAT statement_sequence UNTIL expression .)
    UNTIL           reduce using rule 99 (repeat_statement -> REPEAT statement_sequence UNTIL expression .)
    ELSE            reduce using rule 99 (repeat_statement -> REPEAT statement_sequence UNTIL expression .)


state 348

    (100) for_statement -> FOR variable_identifier ASSIGN initial_expression . TO final_expression DO statement
    (101) for_statement -> FOR variable_identifier ASSIGN initial_expression . DOWNTO final_expression DO statement

    TO              shift and go to state 386
    DOWNTO          shift and go to state 387


state 349

    (102) initial_expression -> expression .

    TO              reduce using rule 102 (initial_expression -> expression .)
    DOWNTO          reduce using rule 102 (initial_expression -> expression .)


state 350

    (106) if_statement -> IF expression THEN statement .
    (107) if_statement -> IF expression THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 106 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 106 (if_statement -> IF expression THEN statement .)
    UNTIL           reduce using rule 106 (if_statement -> IF expression THEN statement .)
    ELSE            shift and go to state 388

  ! ELSE            [ reduce using rule 106 (if_statement -> IF expression THEN statement .) ]


state 351

    (108) case_statement -> CASE expression OF case_limb_list . END
    (109) case_statement -> CASE expression OF case_limb_list . SEMICOLON END
    (111) case_limb_list -> case_limb_list . SEMICOLON case_limb

    END             shift and go to state 389
    SEMICOLON       shift and go to state 390


state 352

    (110) case_limb_list -> case_limb .

    END             reduce using rule 110 (case_limb_list -> case_limb .)
    SEMICOLON       reduce using rule 110 (case_limb_list -> case_limb .)


state 353

    (112) case_limb -> case_label_list . COLON statement
    (114) case_label_list -> case_label_list . COMMA constant

    COLON           shift and go to state 391
    COMMA           shift and go to state 392


state 354

    (113) case_label_list -> constant .

    COLON           reduce using rule 113 (case_label_list -> constant .)
    COMMA           reduce using rule 113 (case_label_list -> constant .)
    SEMICOLON       reduce using rule 113 (case_label_list -> constant .)


state 355

    (169) indexed_variable -> array_variable LBRACKET expression_list RBRACKET .

    ASSIGN          reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    UPARROW         reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    DIV             reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    NOTEQUAL        reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    LESSEQUAL       reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    GREATEREQUAL    reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    OF              reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    END             reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    UNTIL           reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)
    DOWNTO          reduce using rule 169 (indexed_variable -> array_variable LBRACKET expression_list RBRACKET .)


state 356

    (184) subrange_type -> lower_bound RANGE_OPERATOR upper_bound .

    SEMICOLON       reduce using rule 184 (subrange_type -> lower_bound RANGE_OPERATOR upper_bound .)
    RBRACKET        reduce using rule 184 (subrange_type -> lower_bound RANGE_OPERATOR upper_bound .)
    COMMA           reduce using rule 184 (subrange_type -> lower_bound RANGE_OPERATOR upper_bound .)
    END             reduce using rule 184 (subrange_type -> lower_bound RANGE_OPERATOR upper_bound .)
    RPAREN          reduce using rule 184 (subrange_type -> lower_bound RANGE_OPERATOR upper_bound .)


state 357

    (186) upper_bound -> constant .

    SEMICOLON       reduce using rule 186 (upper_bound -> constant .)
    RBRACKET        reduce using rule 186 (upper_bound -> constant .)
    COMMA           reduce using rule 186 (upper_bound -> constant .)
    END             reduce using rule 186 (upper_bound -> constant .)
    RPAREN          reduce using rule 186 (upper_bound -> constant .)


state 358

    (183) enumerated_type -> LPAREN identifier_list RPAREN .

    SEMICOLON       reduce using rule 183 (enumerated_type -> LPAREN identifier_list RPAREN .)
    RBRACKET        reduce using rule 183 (enumerated_type -> LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 183 (enumerated_type -> LPAREN identifier_list RPAREN .)
    END             reduce using rule 183 (enumerated_type -> LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 183 (enumerated_type -> LPAREN identifier_list RPAREN .)


state 359

    (193) array_type -> ARRAY LBRACKET index_type_list . RBRACKET OF element_type
    (195) index_type_list -> index_type_list . COMMA index_type

    RBRACKET        shift and go to state 393
    COMMA           shift and go to state 394


state 360

    (194) index_type_list -> index_type .

    RBRACKET        reduce using rule 194 (index_type_list -> index_type .)
    COMMA           reduce using rule 194 (index_type_list -> index_type .)


state 361

    (196) index_type -> simple_type .

    RBRACKET        reduce using rule 196 (index_type -> simple_type .)
    COMMA           reduce using rule 196 (index_type -> simple_type .)


state 362

    (198) record_type -> RECORD field_list END .

    SEMICOLON       reduce using rule 198 (record_type -> RECORD field_list END .)
    END             reduce using rule 198 (record_type -> RECORD field_list END .)
    RPAREN          reduce using rule 198 (record_type -> RECORD field_list END .)


state 363

    (206) field_list -> fixed_part SEMICOLON . variant_part
    (207) field_list -> fixed_part SEMICOLON . variant_part SEMICOLON
    (211) fixed_part -> fixed_part SEMICOLON . record_section
    (213) variant_part -> . CASE tag_field type_identifier OF variant_list
    (212) record_section -> . identifier_list COLON type
    (242) identifier_list -> . identifier
    (243) identifier_list -> . identifier_list COMMA identifier
    (226) identifier -> . ID

    CASE            shift and go to state 317
    ID              shift and go to state 22

    variant_part                   shift and go to state 395
    record_section                 shift and go to state 396
    identifier_list                shift and go to state 318
    identifier                     shift and go to state 114

state 364

    (209) field_list -> variant_part SEMICOLON .

    END             reduce using rule 209 (field_list -> variant_part SEMICOLON .)
    RPAREN          reduce using rule 209 (field_list -> variant_part SEMICOLON .)


state 365

    (213) variant_part -> CASE tag_field . type_identifier OF variant_list
    (236) type_identifier -> . identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    type_identifier                shift and go to state 397
    identifier                     shift and go to state 237

state 366

    (217) tag_field -> identifier . COLON

    COLON           shift and go to state 398


state 367

    (212) record_section -> identifier_list COLON . type
    (177) type -> . simple_type
    (178) type -> . structured_type
    (179) type -> . pointer_type
    (180) type -> . type_identifier
    (181) simple_type -> . subrange_type
    (182) simple_type -> . enumerated_type
    (187) structured_type -> . PACKED unpacked_structured_type
    (188) structured_type -> . unpacked_structured_type
    (203) pointer_type -> . UPARROW type_identifier
    (236) type_identifier -> . identifier
    (184) subrange_type -> . lower_bound RANGE_OPERATOR upper_bound
    (183) enumerated_type -> . LPAREN identifier_list RPAREN
    (189) unpacked_structured_type -> . array_type
    (190) unpacked_structured_type -> . record_type
    (191) unpacked_structured_type -> . set_type
    (192) unpacked_structured_type -> . file_type
    (226) identifier -> . ID
    (185) lower_bound -> . constant
    (193) array_type -> . ARRAY LBRACKET index_type_list RBRACKET OF element_type
    (198) record_type -> . RECORD field_list END
    (199) set_type -> . SET OF base_type
    (201) file_type -> . FILE OF file_component_type
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PACKED          shift and go to state 211
    UPARROW         shift and go to state 213
    LPAREN          shift and go to state 215
    ID              shift and go to state 22
    ARRAY           shift and go to state 221
    RECORD          shift and go to state 222
    SET             shift and go to state 223
    FILE            shift and go to state 224
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    NUMBER          shift and go to state 45

    type                           shift and go to state 399
    simple_type                    shift and go to state 205
    structured_type                shift and go to state 206
    pointer_type                   shift and go to state 207
    type_identifier                shift and go to state 208
    subrange_type                  shift and go to state 209
    enumerated_type                shift and go to state 210
    unpacked_structured_type       shift and go to state 212
    identifier                     shift and go to state 203
    lower_bound                    shift and go to state 214
    array_type                     shift and go to state 216
    record_type                    shift and go to state 217
    set_type                       shift and go to state 218
    file_type                      shift and go to state 219
    constant                       shift and go to state 220
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 368

    (199) set_type -> SET OF base_type .

    SEMICOLON       reduce using rule 199 (set_type -> SET OF base_type .)
    END             reduce using rule 199 (set_type -> SET OF base_type .)
    RPAREN          reduce using rule 199 (set_type -> SET OF base_type .)


state 369

    (200) base_type -> type .

    SEMICOLON       reduce using rule 200 (base_type -> type .)
    END             reduce using rule 200 (base_type -> type .)
    RPAREN          reduce using rule 200 (base_type -> type .)


state 370

    (201) file_type -> FILE OF file_component_type .

    SEMICOLON       reduce using rule 201 (file_type -> FILE OF file_component_type .)
    END             reduce using rule 201 (file_type -> FILE OF file_component_type .)
    RPAREN          reduce using rule 201 (file_type -> FILE OF file_component_type .)


state 371

    (202) file_component_type -> type .

    SEMICOLON       reduce using rule 202 (file_component_type -> type .)
    END             reduce using rule 202 (file_component_type -> type .)
    RPAREN          reduce using rule 202 (file_component_type -> type .)


state 372

    (56) formal_parameter_section_list -> formal_parameter_section_list SEMICOLON formal_parameter_section .

    RPAREN          reduce using rule 56 (formal_parameter_section_list -> formal_parameter_section_list SEMICOLON formal_parameter_section .)
    SEMICOLON       reduce using rule 56 (formal_parameter_section_list -> formal_parameter_section_list SEMICOLON formal_parameter_section .)


state 373

    (61) value_parameter_section -> identifier_list COLON parameter_type .

    RPAREN          reduce using rule 61 (value_parameter_section -> identifier_list COLON parameter_type .)
    SEMICOLON       reduce using rule 61 (value_parameter_section -> identifier_list COLON parameter_type .)


state 374

    (65) parameter_type -> type_identifier .

    RPAREN          reduce using rule 65 (parameter_type -> type_identifier .)
    SEMICOLON       reduce using rule 65 (parameter_type -> type_identifier .)


state 375

    (66) parameter_type -> conformant_array_schema .

    RPAREN          reduce using rule 66 (parameter_type -> conformant_array_schema .)
    SEMICOLON       reduce using rule 66 (parameter_type -> conformant_array_schema .)


state 376

    (67) conformant_array_schema -> packed_conformant_array_schema .

    RPAREN          reduce using rule 67 (conformant_array_schema -> packed_conformant_array_schema .)
    SEMICOLON       reduce using rule 67 (conformant_array_schema -> packed_conformant_array_schema .)


state 377

    (68) conformant_array_schema -> unpacked_conformant_array_schema .

    RPAREN          reduce using rule 68 (conformant_array_schema -> unpacked_conformant_array_schema .)
    SEMICOLON       reduce using rule 68 (conformant_array_schema -> unpacked_conformant_array_schema .)


state 378

    (69) packed_conformant_array_schema -> PACKED . ARRAY LBRACKET bound_specification RBRACKET OF type_identifier

    ARRAY           shift and go to state 400


state 379

    (70) unpacked_conformant_array_schema -> ARRAY . LBRACKET bound_specification_list RBRACKET OF type_identifier
    (71) unpacked_conformant_array_schema -> ARRAY . LBRACKET bound_specification_list RBRACKET OF conformant_array_schema

    LBRACKET        shift and go to state 401


state 380

    (62) variable_parameter_section -> VAR identifier_list COLON . parameter_type
    (65) parameter_type -> . type_identifier
    (66) parameter_type -> . conformant_array_schema
    (236) type_identifier -> . identifier
    (67) conformant_array_schema -> . packed_conformant_array_schema
    (68) conformant_array_schema -> . unpacked_conformant_array_schema
    (226) identifier -> . ID
    (69) packed_conformant_array_schema -> . PACKED ARRAY LBRACKET bound_specification RBRACKET OF type_identifier
    (70) unpacked_conformant_array_schema -> . ARRAY LBRACKET bound_specification_list RBRACKET OF type_identifier
    (71) unpacked_conformant_array_schema -> . ARRAY LBRACKET bound_specification_list RBRACKET OF conformant_array_schema

    ID              shift and go to state 22
    PACKED          shift and go to state 378
    ARRAY           shift and go to state 379

    parameter_type                 shift and go to state 402
    type_identifier                shift and go to state 374
    conformant_array_schema        shift and go to state 375
    identifier                     shift and go to state 237
    packed_conformant_array_schema shift and go to state 376
    unpacked_conformant_array_schema shift and go to state 377

state 381

    (120) actual_parameter_list2 -> actual_parameter_list2 COMMA actual_parameter .

    RPAREN          reduce using rule 120 (actual_parameter_list2 -> actual_parameter_list2 COMMA actual_parameter .)
    COMMA           reduce using rule 120 (actual_parameter_list2 -> actual_parameter_list2 COMMA actual_parameter .)


state 382

    (245) expression_list -> expression_list COMMA expression .

    COMMA           reduce using rule 245 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 245 (expression_list -> expression_list COMMA expression .)


state 383

    (255) scale_factor -> digit_sequence DOT digit_sequence .
    (256) scale_factor -> digit_sequence DOT digit_sequence . scale_factor
    (254) scale_factor -> digit_sequence . DOT
    (255) scale_factor -> digit_sequence . DOT digit_sequence
    (256) scale_factor -> digit_sequence . DOT digit_sequence scale_factor
    (257) scale_factor -> digit_sequence . DOT scale_factor
    (258) scale_factor -> digit_sequence . scale_factor
    (254) scale_factor -> . digit_sequence DOT
    (255) scale_factor -> . digit_sequence DOT digit_sequence
    (256) scale_factor -> . digit_sequence DOT digit_sequence scale_factor
    (257) scale_factor -> . digit_sequence DOT scale_factor
    (258) scale_factor -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    TIMES           reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    DIVIDE          reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    DIV             reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    MOD             reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    AND             reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    OR              reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    EQUAL           reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    NOTEQUAL        reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    LESS            reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    LESSEQUAL       reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    GREATER         reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    GREATEREQUAL    reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    IN              reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    DO              reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    THEN            reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    OF              reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    SEMICOLON       reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    RANGE_OPERATOR  reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    END             reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    UNTIL           reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    ELSE            reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    RPAREN          reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    COMMA           reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    RBRACKET        reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    TO              reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    DOWNTO          reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    COLON           reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .)
    DOT             shift and go to state 343
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NUMBER          shift and go to state 45

  ! PLUS            [ reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .) ]
  ! MINUS           [ reduce using rule 255 (scale_factor -> digit_sequence DOT digit_sequence .) ]

    digit_sequence                 shift and go to state 292
    scale_factor                   shift and go to state 403
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 384

    (257) scale_factor -> digit_sequence DOT scale_factor .

    TIMES           reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    DIVIDE          reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    DIV             reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    MOD             reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    AND             reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    PLUS            reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    MINUS           reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    OR              reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    EQUAL           reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    NOTEQUAL        reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    LESS            reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    LESSEQUAL       reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    GREATER         reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    GREATEREQUAL    reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    IN              reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    DO              reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    THEN            reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    OF              reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    SEMICOLON       reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    RANGE_OPERATOR  reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    END             reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    UNTIL           reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    ELSE            reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    RPAREN          reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    COMMA           reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    RBRACKET        reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    TO              reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    DOWNTO          reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)
    COLON           reduce using rule 257 (scale_factor -> digit_sequence DOT scale_factor .)


state 385

    (251) real_number -> digit_sequence DOT digit_sequence scale_factor .
    (258) scale_factor -> digit_sequence scale_factor .

  ! reduce/reduce conflict for TIMES resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for DIV resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for MOD resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for AND resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for OR resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for EQUAL resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for LESS resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for GREATER resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for IN resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for DO resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for THEN resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for OF resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for RANGE_OPERATOR resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for END resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for UNTIL resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for ELSE resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for RPAREN resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for COMMA resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for TO resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for COLON resolved using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    TIMES           reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    DIVIDE          reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    DIV             reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    MOD             reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    AND             reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    PLUS            reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    MINUS           reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    OR              reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    EQUAL           reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    NOTEQUAL        reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    LESS            reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    LESSEQUAL       reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    GREATER         reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    GREATEREQUAL    reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    IN              reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    DO              reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    THEN            reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    OF              reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    SEMICOLON       reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    RANGE_OPERATOR  reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    END             reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    UNTIL           reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    ELSE            reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    RPAREN          reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    COMMA           reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    RBRACKET        reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    TO              reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    DOWNTO          reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)
    COLON           reduce using rule 251 (real_number -> digit_sequence DOT digit_sequence scale_factor .)

  ! TIMES           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! DIVIDE          [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! DIV             [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! MOD             [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! AND             [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! PLUS            [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! MINUS           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! OR              [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! EQUAL           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! NOTEQUAL        [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! LESS            [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! LESSEQUAL       [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! GREATER         [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! GREATEREQUAL    [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! IN              [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! DO              [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! THEN            [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! OF              [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! SEMICOLON       [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! RANGE_OPERATOR  [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! END             [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! UNTIL           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! ELSE            [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! RPAREN          [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! COMMA           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! RBRACKET        [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! TO              [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! DOWNTO          [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! COLON           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]


state 386

    (100) for_statement -> FOR variable_identifier ASSIGN initial_expression TO . final_expression DO statement
    (103) final_expression -> . expression
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    variable_identifier            shift and go to state 94
    final_expression               shift and go to state 404
    expression                     shift and go to state 405
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 387

    (101) for_statement -> FOR variable_identifier ASSIGN initial_expression DOWNTO . final_expression DO statement
    (103) final_expression -> . expression
    (128) expression -> . simple_expression
    (129) expression -> . simple_expression relational_operator simple_expression
    (130) simple_expression -> . sign term_list
    (131) simple_expression -> . term_list
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (132) term_list -> . term
    (133) term_list -> . term_list addition_operator term
    (134) term -> . factor
    (135) term -> . term multiplication_operator factor
    (136) factor -> . variable
    (137) factor -> . number
    (138) factor -> . string
    (139) factor -> . set
    (140) factor -> . NIL
    (141) factor -> . constant_identifier
    (142) factor -> . bound_identifier
    (143) factor -> . function_designator
    (144) factor -> . LPAREN expression RPAREN
    (145) factor -> . NOT factor
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (171) set -> . LBRACKET element_list RBRACKET
    (234) constant_identifier -> . identifier
    (239) bound_identifier -> . identifier
    (174) function_designator -> . function_identifier
    (175) function_designator -> . function_identifier actual_parameter_list
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (226) identifier -> . ID
    (238) function_identifier -> . identifier
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    NIL             shift and go to state 164
    LPAREN          shift and go to state 168
    NOT             shift and go to state 169
    QUOTE           shift and go to state 172
    LBRACKET        shift and go to state 173
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    variable_identifier            shift and go to state 94
    final_expression               shift and go to state 406
    expression                     shift and go to state 405
    simple_expression              shift and go to state 155
    sign                           shift and go to state 156
    term_list                      shift and go to state 157
    term                           shift and go to state 158
    factor                         shift and go to state 159
    variable                       shift and go to state 160
    number                         shift and go to state 161
    string                         shift and go to state 162
    set                            shift and go to state 163
    constant_identifier            shift and go to state 165
    bound_identifier               shift and go to state 166
    function_designator            shift and go to state 167
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    identifier                     shift and go to state 174
    function_identifier            shift and go to state 175
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    digit_sequence                 shift and go to state 176
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 388

    (107) if_statement -> IF expression THEN statement ELSE . statement
    (78) statement -> . label COLON simple_statement
    (79) statement -> . label COLON structured_statement
    (80) statement -> . simple_statement
    (81) statement -> . structured_statement
    (272) label -> . integer_number
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (248) integer_number -> . digit_sequence
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (266) digit -> . NUMBER
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    statement                      shift and go to state 407
    label                          shift and go to state 67
    simple_statement               shift and go to state 68
    structured_statement           shift and go to state 69
    integer_number                 shift and go to state 38
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    digit_sequence                 shift and go to state 39
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    variable_identifier            shift and go to state 94
    digit                          shift and go to state 44
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 389

    (108) case_statement -> CASE expression OF case_limb_list END .

    SEMICOLON       reduce using rule 108 (case_statement -> CASE expression OF case_limb_list END .)
    END             reduce using rule 108 (case_statement -> CASE expression OF case_limb_list END .)
    UNTIL           reduce using rule 108 (case_statement -> CASE expression OF case_limb_list END .)
    ELSE            reduce using rule 108 (case_statement -> CASE expression OF case_limb_list END .)


state 390

    (109) case_statement -> CASE expression OF case_limb_list SEMICOLON . END
    (111) case_limb_list -> case_limb_list SEMICOLON . case_limb
    (112) case_limb -> . case_label_list COLON statement
    (113) case_label_list -> . constant
    (114) case_label_list -> . case_label_list COMMA constant
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (226) identifier -> . ID
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    END             shift and go to state 408
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    case_limb                      shift and go to state 409
    case_label_list                shift and go to state 353
    constant                       shift and go to state 354
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    identifier                     shift and go to state 196
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 391

    (112) case_limb -> case_label_list COLON . statement
    (78) statement -> . label COLON simple_statement
    (79) statement -> . label COLON structured_statement
    (80) statement -> . simple_statement
    (81) statement -> . structured_statement
    (272) label -> . integer_number
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (248) integer_number -> . digit_sequence
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (266) digit -> . NUMBER
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    statement                      shift and go to state 410
    label                          shift and go to state 67
    simple_statement               shift and go to state 68
    structured_statement           shift and go to state 69
    integer_number                 shift and go to state 38
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    digit_sequence                 shift and go to state 39
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    variable_identifier            shift and go to state 94
    digit                          shift and go to state 44
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 392

    (114) case_label_list -> case_label_list COMMA . constant
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (226) identifier -> . ID
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    constant                       shift and go to state 411
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    identifier                     shift and go to state 196
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 393

    (193) array_type -> ARRAY LBRACKET index_type_list RBRACKET . OF element_type

    OF              shift and go to state 412


state 394

    (195) index_type_list -> index_type_list COMMA . index_type
    (196) index_type -> . simple_type
    (181) simple_type -> . subrange_type
    (182) simple_type -> . enumerated_type
    (184) subrange_type -> . lower_bound RANGE_OPERATOR upper_bound
    (183) enumerated_type -> . LPAREN identifier_list RPAREN
    (185) lower_bound -> . constant
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (226) identifier -> . ID
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    LPAREN          shift and go to state 215
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    index_type                     shift and go to state 413
    simple_type                    shift and go to state 361
    subrange_type                  shift and go to state 209
    enumerated_type                shift and go to state 210
    lower_bound                    shift and go to state 214
    constant                       shift and go to state 220
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    identifier                     shift and go to state 196
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 395

    (206) field_list -> fixed_part SEMICOLON variant_part .
    (207) field_list -> fixed_part SEMICOLON variant_part . SEMICOLON

    END             reduce using rule 206 (field_list -> fixed_part SEMICOLON variant_part .)
    RPAREN          reduce using rule 206 (field_list -> fixed_part SEMICOLON variant_part .)
    SEMICOLON       shift and go to state 414


state 396

    (211) fixed_part -> fixed_part SEMICOLON record_section .

    SEMICOLON       reduce using rule 211 (fixed_part -> fixed_part SEMICOLON record_section .)
    END             reduce using rule 211 (fixed_part -> fixed_part SEMICOLON record_section .)
    RPAREN          reduce using rule 211 (fixed_part -> fixed_part SEMICOLON record_section .)


state 397

    (213) variant_part -> CASE tag_field type_identifier . OF variant_list

    OF              shift and go to state 415


state 398

    (217) tag_field -> identifier COLON .

    ID              reduce using rule 217 (tag_field -> identifier COLON .)


state 399

    (212) record_section -> identifier_list COLON type .

    SEMICOLON       reduce using rule 212 (record_section -> identifier_list COLON type .)
    END             reduce using rule 212 (record_section -> identifier_list COLON type .)
    RPAREN          reduce using rule 212 (record_section -> identifier_list COLON type .)


state 400

    (69) packed_conformant_array_schema -> PACKED ARRAY . LBRACKET bound_specification RBRACKET OF type_identifier

    LBRACKET        shift and go to state 416


state 401

    (70) unpacked_conformant_array_schema -> ARRAY LBRACKET . bound_specification_list RBRACKET OF type_identifier
    (71) unpacked_conformant_array_schema -> ARRAY LBRACKET . bound_specification_list RBRACKET OF conformant_array_schema
    (72) bound_specification_list -> . bound_specification
    (73) bound_specification_list -> . bound_specification_list SEMICOLON bound_specification
    (74) bound_specification -> . identifier RANGE_OPERATOR identifier SEMICOLON ordinal_type_identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    bound_specification_list       shift and go to state 417
    bound_specification            shift and go to state 418
    identifier                     shift and go to state 419

state 402

    (62) variable_parameter_section -> VAR identifier_list COLON parameter_type .

    RPAREN          reduce using rule 62 (variable_parameter_section -> VAR identifier_list COLON parameter_type .)
    SEMICOLON       reduce using rule 62 (variable_parameter_section -> VAR identifier_list COLON parameter_type .)


state 403

    (256) scale_factor -> digit_sequence DOT digit_sequence scale_factor .
    (258) scale_factor -> digit_sequence scale_factor .

  ! reduce/reduce conflict for TIMES resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for DIV resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for MOD resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for AND resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for OR resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for EQUAL resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for LESS resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for GREATER resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for IN resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for DO resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for THEN resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for OF resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for RANGE_OPERATOR resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for END resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for UNTIL resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for ELSE resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for RPAREN resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for COMMA resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for TO resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
  ! reduce/reduce conflict for COLON resolved using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    TIMES           reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    DIVIDE          reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    DIV             reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    MOD             reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    AND             reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    PLUS            reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    MINUS           reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    OR              reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    EQUAL           reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    NOTEQUAL        reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    LESS            reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    LESSEQUAL       reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    GREATER         reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    GREATEREQUAL    reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    IN              reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    DO              reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    THEN            reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    OF              reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    SEMICOLON       reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    RANGE_OPERATOR  reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    END             reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    UNTIL           reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    ELSE            reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    RPAREN          reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    COMMA           reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    RBRACKET        reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    TO              reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    DOWNTO          reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)
    COLON           reduce using rule 256 (scale_factor -> digit_sequence DOT digit_sequence scale_factor .)

  ! TIMES           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! DIVIDE          [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! DIV             [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! MOD             [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! AND             [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! PLUS            [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! MINUS           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! OR              [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! EQUAL           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! NOTEQUAL        [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! LESS            [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! LESSEQUAL       [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! GREATER         [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! GREATEREQUAL    [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! IN              [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! DO              [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! THEN            [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! OF              [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! SEMICOLON       [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! RANGE_OPERATOR  [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! END             [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! UNTIL           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! ELSE            [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! RPAREN          [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! COMMA           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! RBRACKET        [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! TO              [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! DOWNTO          [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]
  ! COLON           [ reduce using rule 258 (scale_factor -> digit_sequence scale_factor .) ]


state 404

    (100) for_statement -> FOR variable_identifier ASSIGN initial_expression TO final_expression . DO statement

    DO              shift and go to state 420


state 405

    (103) final_expression -> expression .

    DO              reduce using rule 103 (final_expression -> expression .)


state 406

    (101) for_statement -> FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression . DO statement

    DO              shift and go to state 421


state 407

    (107) if_statement -> IF expression THEN statement ELSE statement .

    SEMICOLON       reduce using rule 107 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 107 (if_statement -> IF expression THEN statement ELSE statement .)
    UNTIL           reduce using rule 107 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 107 (if_statement -> IF expression THEN statement ELSE statement .)


state 408

    (109) case_statement -> CASE expression OF case_limb_list SEMICOLON END .

    SEMICOLON       reduce using rule 109 (case_statement -> CASE expression OF case_limb_list SEMICOLON END .)
    END             reduce using rule 109 (case_statement -> CASE expression OF case_limb_list SEMICOLON END .)
    UNTIL           reduce using rule 109 (case_statement -> CASE expression OF case_limb_list SEMICOLON END .)
    ELSE            reduce using rule 109 (case_statement -> CASE expression OF case_limb_list SEMICOLON END .)


state 409

    (111) case_limb_list -> case_limb_list SEMICOLON case_limb .

    END             reduce using rule 111 (case_limb_list -> case_limb_list SEMICOLON case_limb .)
    SEMICOLON       reduce using rule 111 (case_limb_list -> case_limb_list SEMICOLON case_limb .)


state 410

    (112) case_limb -> case_label_list COLON statement .

    END             reduce using rule 112 (case_limb -> case_label_list COLON statement .)
    SEMICOLON       reduce using rule 112 (case_limb -> case_label_list COLON statement .)


state 411

    (114) case_label_list -> case_label_list COMMA constant .

    COLON           reduce using rule 114 (case_label_list -> case_label_list COMMA constant .)
    COMMA           reduce using rule 114 (case_label_list -> case_label_list COMMA constant .)
    SEMICOLON       reduce using rule 114 (case_label_list -> case_label_list COMMA constant .)


state 412

    (193) array_type -> ARRAY LBRACKET index_type_list RBRACKET OF . element_type
    (197) element_type -> . type
    (177) type -> . simple_type
    (178) type -> . structured_type
    (179) type -> . pointer_type
    (180) type -> . type_identifier
    (181) simple_type -> . subrange_type
    (182) simple_type -> . enumerated_type
    (187) structured_type -> . PACKED unpacked_structured_type
    (188) structured_type -> . unpacked_structured_type
    (203) pointer_type -> . UPARROW type_identifier
    (236) type_identifier -> . identifier
    (184) subrange_type -> . lower_bound RANGE_OPERATOR upper_bound
    (183) enumerated_type -> . LPAREN identifier_list RPAREN
    (189) unpacked_structured_type -> . array_type
    (190) unpacked_structured_type -> . record_type
    (191) unpacked_structured_type -> . set_type
    (192) unpacked_structured_type -> . file_type
    (226) identifier -> . ID
    (185) lower_bound -> . constant
    (193) array_type -> . ARRAY LBRACKET index_type_list RBRACKET OF element_type
    (198) record_type -> . RECORD field_list END
    (199) set_type -> . SET OF base_type
    (201) file_type -> . FILE OF file_component_type
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PACKED          shift and go to state 211
    UPARROW         shift and go to state 213
    LPAREN          shift and go to state 215
    ID              shift and go to state 22
    ARRAY           shift and go to state 221
    RECORD          shift and go to state 222
    SET             shift and go to state 223
    FILE            shift and go to state 224
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    NUMBER          shift and go to state 45

    element_type                   shift and go to state 422
    type                           shift and go to state 423
    simple_type                    shift and go to state 205
    structured_type                shift and go to state 206
    pointer_type                   shift and go to state 207
    type_identifier                shift and go to state 208
    subrange_type                  shift and go to state 209
    enumerated_type                shift and go to state 210
    unpacked_structured_type       shift and go to state 212
    identifier                     shift and go to state 203
    lower_bound                    shift and go to state 214
    array_type                     shift and go to state 216
    record_type                    shift and go to state 217
    set_type                       shift and go to state 218
    file_type                      shift and go to state 219
    constant                       shift and go to state 220
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 413

    (195) index_type_list -> index_type_list COMMA index_type .

    RBRACKET        reduce using rule 195 (index_type_list -> index_type_list COMMA index_type .)
    COMMA           reduce using rule 195 (index_type_list -> index_type_list COMMA index_type .)


state 414

    (207) field_list -> fixed_part SEMICOLON variant_part SEMICOLON .

    END             reduce using rule 207 (field_list -> fixed_part SEMICOLON variant_part SEMICOLON .)
    RPAREN          reduce using rule 207 (field_list -> fixed_part SEMICOLON variant_part SEMICOLON .)


state 415

    (213) variant_part -> CASE tag_field type_identifier OF . variant_list
    (214) variant_list -> . variant
    (215) variant_list -> . variant_list SEMICOLON variant
    (218) variant -> . case_label_list SEMICOLON LPAREN field_list RPAREN
    (113) case_label_list -> . constant
    (114) case_label_list -> . case_label_list COMMA constant
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (226) identifier -> . ID
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    variant_list                   shift and go to state 424
    variant                        shift and go to state 425
    case_label_list                shift and go to state 426
    constant                       shift and go to state 354
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    identifier                     shift and go to state 196
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 416

    (69) packed_conformant_array_schema -> PACKED ARRAY LBRACKET . bound_specification RBRACKET OF type_identifier
    (74) bound_specification -> . identifier RANGE_OPERATOR identifier SEMICOLON ordinal_type_identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    bound_specification            shift and go to state 427
    identifier                     shift and go to state 419

state 417

    (70) unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list . RBRACKET OF type_identifier
    (71) unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list . RBRACKET OF conformant_array_schema
    (73) bound_specification_list -> bound_specification_list . SEMICOLON bound_specification

    RBRACKET        shift and go to state 428
    SEMICOLON       shift and go to state 429


state 418

    (72) bound_specification_list -> bound_specification .

    RBRACKET        reduce using rule 72 (bound_specification_list -> bound_specification .)
    SEMICOLON       reduce using rule 72 (bound_specification_list -> bound_specification .)


state 419

    (74) bound_specification -> identifier . RANGE_OPERATOR identifier SEMICOLON ordinal_type_identifier

    RANGE_OPERATOR  shift and go to state 430


state 420

    (100) for_statement -> FOR variable_identifier ASSIGN initial_expression TO final_expression DO . statement
    (78) statement -> . label COLON simple_statement
    (79) statement -> . label COLON structured_statement
    (80) statement -> . simple_statement
    (81) statement -> . structured_statement
    (272) label -> . integer_number
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (248) integer_number -> . digit_sequence
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (266) digit -> . NUMBER
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    variable_identifier            shift and go to state 94
    statement                      shift and go to state 431
    label                          shift and go to state 67
    simple_statement               shift and go to state 68
    structured_statement           shift and go to state 69
    integer_number                 shift and go to state 38
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    digit_sequence                 shift and go to state 39
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    digit                          shift and go to state 44
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 421

    (101) for_statement -> FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO . statement
    (78) statement -> . label COLON simple_statement
    (79) statement -> . label COLON structured_statement
    (80) statement -> . simple_statement
    (81) statement -> . structured_statement
    (272) label -> . integer_number
    (82) simple_statement -> . assignment_statement
    (83) simple_statement -> . procedure_statement
    (84) simple_statement -> . goto_statement
    (90) structured_statement -> . compound_statement
    (91) structured_statement -> . repetitive_statement
    (92) structured_statement -> . conditional_statement
    (93) structured_statement -> . with_statement
    (248) integer_number -> . digit_sequence
    (85) assignment_statement -> . variable ASSIGN expression
    (86) assignment_statement -> . function_identifier ASSIGN expression
    (87) procedure_statement -> . procedure_identifier
    (88) procedure_statement -> . procedure_identifier actual_parameter_list
    (89) goto_statement -> . GOTO label
    (94) compound_statement -> . BEGIN statement_sequence END
    (95) repetitive_statement -> . while_statement
    (96) repetitive_statement -> . repeat_statement
    (97) repetitive_statement -> . for_statement
    (104) conditional_statement -> . if_statement
    (105) conditional_statement -> . case_statement
    (115) with_statement -> . WITH record_variable_list DO statement
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (161) variable -> . entire_variable
    (162) variable -> . component_variable
    (163) variable -> . referenced_variable
    (238) function_identifier -> . identifier
    (237) procedure_identifier -> . identifier
    (98) while_statement -> . WHILE expression DO statement
    (99) repeat_statement -> . REPEAT statement_sequence UNTIL expression
    (100) for_statement -> . FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement
    (101) for_statement -> . FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement
    (106) if_statement -> . IF expression THEN statement
    (107) if_statement -> . IF expression THEN statement ELSE statement
    (108) case_statement -> . CASE expression OF case_limb_list END
    (109) case_statement -> . CASE expression OF case_limb_list SEMICOLON END
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (164) entire_variable -> . variable_identifier
    (165) entire_variable -> . field_identifier
    (166) component_variable -> . indexed_variable
    (167) component_variable -> . field_designator
    (168) component_variable -> . file_buffer
    (228) referenced_variable -> . pointer_variable UPARROW
    (226) identifier -> . ID
    (266) digit -> . NUMBER
    (235) variable_identifier -> . identifier
    (233) field_identifier -> . identifier
    (169) indexed_variable -> . array_variable LBRACKET expression_list RBRACKET
    (170) field_designator -> . record_variable DOT field_identifier
    (176) file_buffer -> . file_variable UPARROW
    (230) pointer_variable -> . variable
    (232) array_variable -> . variable
    (229) record_variable -> . variable
    (227) file_variable -> . variable

    GOTO            shift and go to state 80
    BEGIN           shift and go to state 64
    WITH            shift and go to state 86
    WHILE           shift and go to state 91
    REPEAT          shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    CASE            shift and go to state 96
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    variable_identifier            shift and go to state 94
    statement                      shift and go to state 432
    label                          shift and go to state 67
    simple_statement               shift and go to state 68
    structured_statement           shift and go to state 69
    integer_number                 shift and go to state 38
    assignment_statement           shift and go to state 70
    procedure_statement            shift and go to state 71
    goto_statement                 shift and go to state 72
    compound_statement             shift and go to state 73
    repetitive_statement           shift and go to state 74
    conditional_statement          shift and go to state 75
    with_statement                 shift and go to state 76
    digit_sequence                 shift and go to state 39
    variable                       shift and go to state 77
    function_identifier            shift and go to state 78
    procedure_identifier           shift and go to state 79
    while_statement                shift and go to state 81
    repeat_statement               shift and go to state 82
    for_statement                  shift and go to state 83
    if_statement                   shift and go to state 84
    case_statement                 shift and go to state 85
    sign                           shift and go to state 40
    unsigned_digit_sequence        shift and go to state 41
    entire_variable                shift and go to state 87
    component_variable             shift and go to state 88
    referenced_variable            shift and go to state 89
    identifier                     shift and go to state 90
    digit                          shift and go to state 44
    field_identifier               shift and go to state 97
    indexed_variable               shift and go to state 98
    field_designator               shift and go to state 99
    file_buffer                    shift and go to state 100
    pointer_variable               shift and go to state 101
    array_variable                 shift and go to state 102
    record_variable                shift and go to state 103
    file_variable                  shift and go to state 104

state 422

    (193) array_type -> ARRAY LBRACKET index_type_list RBRACKET OF element_type .

    SEMICOLON       reduce using rule 193 (array_type -> ARRAY LBRACKET index_type_list RBRACKET OF element_type .)
    END             reduce using rule 193 (array_type -> ARRAY LBRACKET index_type_list RBRACKET OF element_type .)
    RPAREN          reduce using rule 193 (array_type -> ARRAY LBRACKET index_type_list RBRACKET OF element_type .)


state 423

    (197) element_type -> type .

    SEMICOLON       reduce using rule 197 (element_type -> type .)
    END             reduce using rule 197 (element_type -> type .)
    RPAREN          reduce using rule 197 (element_type -> type .)


state 424

    (213) variant_part -> CASE tag_field type_identifier OF variant_list .
    (215) variant_list -> variant_list . SEMICOLON variant

  ! shift/reduce conflict for SEMICOLON resolved as shift
    END             reduce using rule 213 (variant_part -> CASE tag_field type_identifier OF variant_list .)
    RPAREN          reduce using rule 213 (variant_part -> CASE tag_field type_identifier OF variant_list .)
    SEMICOLON       shift and go to state 433

  ! SEMICOLON       [ reduce using rule 213 (variant_part -> CASE tag_field type_identifier OF variant_list .) ]


state 425

    (214) variant_list -> variant .

    SEMICOLON       reduce using rule 214 (variant_list -> variant .)
    END             reduce using rule 214 (variant_list -> variant .)
    RPAREN          reduce using rule 214 (variant_list -> variant .)


state 426

    (218) variant -> case_label_list . SEMICOLON LPAREN field_list RPAREN
    (114) case_label_list -> case_label_list . COMMA constant

    SEMICOLON       shift and go to state 434
    COMMA           shift and go to state 392


state 427

    (69) packed_conformant_array_schema -> PACKED ARRAY LBRACKET bound_specification . RBRACKET OF type_identifier

    RBRACKET        shift and go to state 435


state 428

    (70) unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET . OF type_identifier
    (71) unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET . OF conformant_array_schema

    OF              shift and go to state 436


state 429

    (73) bound_specification_list -> bound_specification_list SEMICOLON . bound_specification
    (74) bound_specification -> . identifier RANGE_OPERATOR identifier SEMICOLON ordinal_type_identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    bound_specification            shift and go to state 437
    identifier                     shift and go to state 419

state 430

    (74) bound_specification -> identifier RANGE_OPERATOR . identifier SEMICOLON ordinal_type_identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    identifier                     shift and go to state 438

state 431

    (100) for_statement -> FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement .

    SEMICOLON       reduce using rule 100 (for_statement -> FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement .)
    END             reduce using rule 100 (for_statement -> FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement .)
    UNTIL           reduce using rule 100 (for_statement -> FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement .)
    ELSE            reduce using rule 100 (for_statement -> FOR variable_identifier ASSIGN initial_expression TO final_expression DO statement .)


state 432

    (101) for_statement -> FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement .

    SEMICOLON       reduce using rule 101 (for_statement -> FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement .)
    END             reduce using rule 101 (for_statement -> FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement .)
    UNTIL           reduce using rule 101 (for_statement -> FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement .)
    ELSE            reduce using rule 101 (for_statement -> FOR variable_identifier ASSIGN initial_expression DOWNTO final_expression DO statement .)


state 433

    (215) variant_list -> variant_list SEMICOLON . variant
    (218) variant -> . case_label_list SEMICOLON LPAREN field_list RPAREN
    (113) case_label_list -> . constant
    (114) case_label_list -> . case_label_list COMMA constant
    (273) constant -> . sign constant_identifier
    (274) constant -> . sign number
    (275) constant -> . constant_identifier
    (276) constant -> . number
    (277) constant -> . string
    (263) sign -> . PLUS
    (264) sign -> . MINUS
    (234) constant_identifier -> . identifier
    (246) number -> . integer_number
    (247) number -> . real_number
    (267) string -> . QUOTE string_character_list QUOTE
    (226) identifier -> . ID
    (248) integer_number -> . digit_sequence
    (249) real_number -> . digit_sequence DOT
    (250) real_number -> . digit_sequence DOT digit_sequence
    (251) real_number -> . digit_sequence DOT digit_sequence scale_factor
    (252) real_number -> . digit_sequence DOT scale_factor
    (253) real_number -> . digit_sequence scale_factor
    (261) digit_sequence -> . sign unsigned_digit_sequence
    (262) digit_sequence -> . unsigned_digit_sequence
    (259) unsigned_digit_sequence -> . digit
    (260) unsigned_digit_sequence -> . unsigned_digit_sequence digit
    (266) digit -> . NUMBER

    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    QUOTE           shift and go to state 172
    ID              shift and go to state 22
    NUMBER          shift and go to state 45

    variant                        shift and go to state 439
    case_label_list                shift and go to state 426
    constant                       shift and go to state 354
    sign                           shift and go to state 198
    constant_identifier            shift and go to state 199
    number                         shift and go to state 200
    string                         shift and go to state 201
    identifier                     shift and go to state 196
    integer_number                 shift and go to state 170
    real_number                    shift and go to state 171
    digit_sequence                 shift and go to state 176
    unsigned_digit_sequence        shift and go to state 41
    digit                          shift and go to state 44

state 434

    (218) variant -> case_label_list SEMICOLON . LPAREN field_list RPAREN

    LPAREN          shift and go to state 440


state 435

    (69) packed_conformant_array_schema -> PACKED ARRAY LBRACKET bound_specification RBRACKET . OF type_identifier

    OF              shift and go to state 441


state 436

    (70) unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF . type_identifier
    (71) unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF . conformant_array_schema
    (236) type_identifier -> . identifier
    (67) conformant_array_schema -> . packed_conformant_array_schema
    (68) conformant_array_schema -> . unpacked_conformant_array_schema
    (226) identifier -> . ID
    (69) packed_conformant_array_schema -> . PACKED ARRAY LBRACKET bound_specification RBRACKET OF type_identifier
    (70) unpacked_conformant_array_schema -> . ARRAY LBRACKET bound_specification_list RBRACKET OF type_identifier
    (71) unpacked_conformant_array_schema -> . ARRAY LBRACKET bound_specification_list RBRACKET OF conformant_array_schema

    ID              shift and go to state 22
    PACKED          shift and go to state 378
    ARRAY           shift and go to state 379

    type_identifier                shift and go to state 442
    conformant_array_schema        shift and go to state 443
    identifier                     shift and go to state 237
    packed_conformant_array_schema shift and go to state 376
    unpacked_conformant_array_schema shift and go to state 377

state 437

    (73) bound_specification_list -> bound_specification_list SEMICOLON bound_specification .

    RBRACKET        reduce using rule 73 (bound_specification_list -> bound_specification_list SEMICOLON bound_specification .)
    SEMICOLON       reduce using rule 73 (bound_specification_list -> bound_specification_list SEMICOLON bound_specification .)


state 438

    (74) bound_specification -> identifier RANGE_OPERATOR identifier . SEMICOLON ordinal_type_identifier

    SEMICOLON       shift and go to state 444


state 439

    (215) variant_list -> variant_list SEMICOLON variant .

    SEMICOLON       reduce using rule 215 (variant_list -> variant_list SEMICOLON variant .)
    END             reduce using rule 215 (variant_list -> variant_list SEMICOLON variant .)
    RPAREN          reduce using rule 215 (variant_list -> variant_list SEMICOLON variant .)


state 440

    (218) variant -> case_label_list SEMICOLON LPAREN . field_list RPAREN
    (204) field_list -> .
    (205) field_list -> . fixed_part
    (206) field_list -> . fixed_part SEMICOLON variant_part
    (207) field_list -> . fixed_part SEMICOLON variant_part SEMICOLON
    (208) field_list -> . variant_part
    (209) field_list -> . variant_part SEMICOLON
    (210) fixed_part -> . record_section
    (211) fixed_part -> . fixed_part SEMICOLON record_section
    (213) variant_part -> . CASE tag_field type_identifier OF variant_list
    (212) record_section -> . identifier_list COLON type
    (242) identifier_list -> . identifier
    (243) identifier_list -> . identifier_list COMMA identifier
    (226) identifier -> . ID

    RPAREN          reduce using rule 204 (field_list -> .)
    CASE            shift and go to state 317
    ID              shift and go to state 22

    field_list                     shift and go to state 445
    fixed_part                     shift and go to state 314
    variant_part                   shift and go to state 315
    record_section                 shift and go to state 316
    identifier_list                shift and go to state 318
    identifier                     shift and go to state 114

state 441

    (69) packed_conformant_array_schema -> PACKED ARRAY LBRACKET bound_specification RBRACKET OF . type_identifier
    (236) type_identifier -> . identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    type_identifier                shift and go to state 446
    identifier                     shift and go to state 237

state 442

    (70) unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF type_identifier .

    RPAREN          reduce using rule 70 (unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF type_identifier .)
    SEMICOLON       reduce using rule 70 (unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF type_identifier .)


state 443

    (71) unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF conformant_array_schema .

    RPAREN          reduce using rule 71 (unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF conformant_array_schema .)
    SEMICOLON       reduce using rule 71 (unpacked_conformant_array_schema -> ARRAY LBRACKET bound_specification_list RBRACKET OF conformant_array_schema .)


state 444

    (74) bound_specification -> identifier RANGE_OPERATOR identifier SEMICOLON . ordinal_type_identifier
    (75) ordinal_type_identifier -> . type_identifier
    (236) type_identifier -> . identifier
    (226) identifier -> . ID

    ID              shift and go to state 22

    identifier                     shift and go to state 237
    ordinal_type_identifier        shift and go to state 447
    type_identifier                shift and go to state 448

state 445

    (218) variant -> case_label_list SEMICOLON LPAREN field_list . RPAREN

    RPAREN          shift and go to state 449


state 446

    (69) packed_conformant_array_schema -> PACKED ARRAY LBRACKET bound_specification RBRACKET OF type_identifier .

    RPAREN          reduce using rule 69 (packed_conformant_array_schema -> PACKED ARRAY LBRACKET bound_specification RBRACKET OF type_identifier .)
    SEMICOLON       reduce using rule 69 (packed_conformant_array_schema -> PACKED ARRAY LBRACKET bound_specification RBRACKET OF type_identifier .)


state 447

    (74) bound_specification -> identifier RANGE_OPERATOR identifier SEMICOLON ordinal_type_identifier .

    RBRACKET        reduce using rule 74 (bound_specification -> identifier RANGE_OPERATOR identifier SEMICOLON ordinal_type_identifier .)
    SEMICOLON       reduce using rule 74 (bound_specification -> identifier RANGE_OPERATOR identifier SEMICOLON ordinal_type_identifier .)


state 448

    (75) ordinal_type_identifier -> type_identifier .

    RBRACKET        reduce using rule 75 (ordinal_type_identifier -> type_identifier .)
    SEMICOLON       reduce using rule 75 (ordinal_type_identifier -> type_identifier .)


state 449

    (218) variant -> case_label_list SEMICOLON LPAREN field_list RPAREN .

    SEMICOLON       reduce using rule 218 (variant -> case_label_list SEMICOLON LPAREN field_list RPAREN .)
    END             reduce using rule 218 (variant -> case_label_list SEMICOLON LPAREN field_list RPAREN .)
    RPAREN          reduce using rule 218 (variant -> case_label_list SEMICOLON LPAREN field_list RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 41 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 176 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 176 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 271 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 293 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 293 resolved as shift
WARNING: shift/reduce conflict for ID in state 317 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 343 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 343 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 345 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 345 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 350 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 383 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 383 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 424 resolved as shift
WARNING: reduce/reduce conflict in state 58 resolved using rule (procedure_heading -> PROCEDURE identifier)
WARNING: rejected rule (procedure_identifier -> identifier) in state 58
WARNING: reduce/reduce conflict in state 77 resolved using rule (file_variable -> variable)
WARNING: rejected rule (pointer_variable -> variable) in state 77
WARNING: reduce/reduce conflict in state 90 resolved using rule (variable_identifier -> identifier)
WARNING: rejected rule (function_identifier -> identifier) in state 90
WARNING: reduce/reduce conflict in state 90 resolved using rule (field_identifier -> identifier)
WARNING: rejected rule (variable_identifier -> identifier) in state 90
WARNING: reduce/reduce conflict in state 152 resolved using rule (file_variable -> variable)
WARNING: rejected rule (pointer_variable -> variable) in state 152
WARNING: reduce/reduce conflict in state 153 resolved using rule (field_identifier -> identifier)
WARNING: rejected rule (variable_identifier -> identifier) in state 153
WARNING: reduce/reduce conflict in state 160 resolved using rule (file_variable -> variable)
WARNING: rejected rule (pointer_variable -> variable) in state 160
WARNING: reduce/reduce conflict in state 174 resolved using rule (constant_identifier -> identifier)
WARNING: rejected rule (bound_identifier -> identifier) in state 174
WARNING: reduce/reduce conflict in state 174 resolved using rule (constant_identifier -> identifier)
WARNING: rejected rule (function_identifier -> identifier) in state 174
WARNING: reduce/reduce conflict in state 174 resolved using rule (constant_identifier -> identifier)
WARNING: rejected rule (variable_identifier -> identifier) in state 174
WARNING: reduce/reduce conflict in state 174 resolved using rule (field_identifier -> identifier)
WARNING: rejected rule (constant_identifier -> identifier) in state 174
WARNING: reduce/reduce conflict in state 174 resolved using rule (field_identifier -> identifier)
WARNING: rejected rule (variable_identifier -> identifier) in state 174
WARNING: reduce/reduce conflict in state 255 resolved using rule (file_variable -> variable)
WARNING: rejected rule (pointer_variable -> variable) in state 255
WARNING: reduce/reduce conflict in state 255 resolved using rule (factor -> variable)
WARNING: rejected rule (actual_variable -> variable) in state 255
WARNING: reduce/reduce conflict in state 257 resolved using rule (actual_function -> function_identifier)
WARNING: rejected rule (function_designator -> function_identifier) in state 257
WARNING: reduce/reduce conflict in state 258 resolved using rule (procedure_identifier -> identifier)
WARNING: rejected rule (function_identifier -> identifier) in state 258
WARNING: reduce/reduce conflict in state 258 resolved using rule (variable_identifier -> identifier)
WARNING: rejected rule (procedure_identifier -> identifier) in state 258
WARNING: reduce/reduce conflict in state 258 resolved using rule (variable_identifier -> identifier)
WARNING: rejected rule (function_identifier -> identifier) in state 258
WARNING: reduce/reduce conflict in state 258 resolved using rule (field_identifier -> identifier)
WARNING: rejected rule (variable_identifier -> identifier) in state 258
WARNING: reduce/reduce conflict in state 258 resolved using rule (field_identifier -> identifier)
WARNING: rejected rule (constant_identifier -> identifier) in state 258
WARNING: reduce/reduce conflict in state 258 resolved using rule (field_identifier -> identifier)
WARNING: rejected rule (bound_identifier -> identifier) in state 258
WARNING: reduce/reduce conflict in state 271 resolved using rule (digit_sequence -> sign unsigned_digit_sequence)
WARNING: rejected rule (digit_sequence -> unsigned_digit_sequence) in state 271
WARNING: reduce/reduce conflict in state 385 resolved using rule (real_number -> digit_sequence DOT digit_sequence scale_factor)
WARNING: rejected rule (scale_factor -> digit_sequence scale_factor) in state 385
WARNING: reduce/reduce conflict in state 403 resolved using rule (scale_factor -> digit_sequence DOT digit_sequence scale_factor)
WARNING: rejected rule (scale_factor -> digit_sequence scale_factor) in state 403
WARNING: Rule (pointer_variable -> variable) is never reduced
WARNING: Rule (bound_identifier -> identifier) is never reduced
WARNING: Rule (actual_variable -> variable) is never reduced
